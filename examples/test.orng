// a single comment

// There are no multiline comments in Orng (for good reason!)



// Boolean literals
fn lol: ()->() =

    // Typical manipulation of literals
    true and !(true or false)
    (2 + 4) * (4**2 - 9)
    "abc" ++ "def"



    // Tuples
    // Following are all equivalent
    (1, 2, 3, 4)
    (1, 2) ++ (3, 4)



    // Conditionals
    if powerLevel > 9000 {"lame ass meme"} else {"lol"}

    cond
    | key == 40 => n + 1;
    | key == 38 => n - 1;
    | else      => n;


    case maybeInt
    | ?x   => x;
    | null => 0;


    case n
    | 0 => 1;
    | 1 => 1;
    | _ => fib(n-1) + fib(n-2);


    // "Records"
    // Define
    const Vector 
        = x:Float \ 3.4
        , y:Float \ 5.6

    // Create values
    const origin:   Vector = (0, 0)
    const position: Vector = (.x <- 3, .y <- 4)
    const velocity: Vector = -1.0, 2.3

    // Access fields
    origin.x == 0
    position.x == 3

    // Field access function
    list.map(op.x, [](origin, point)) == [](0, 3)

    // Update a field
    point.x = 6

    // Update many fields?
    point = (.x <- point.x + 1, .y <- point.y + 1)



    // Functions
    fn square: (n: Float)->Float = n**2

    fn hypotenuse: (a: Float \ 0, b: Float \ 0)->Float =
        math.sqrt(square(a) + square(b))

    fn distance: (a: Vector, b: Vector)->Float =
        hypotenuse((a.x - b.x), (a.y - b.y))

    // Anonymous functions
    const square = (n: Float) -> n **2
