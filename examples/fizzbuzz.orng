// Define an Algebraic Data Type (ADT), similar to tagged unions
let const FizzBuzzResult 
    = string: String
    | integer: Int

fn main(sys: System) -> !() {
    while let i = 0; i < 100; i += 1 {
        match fizzbuzz(i) {
            .string(s)  => try sys.stdout.>writeln("{s}", s)
            .integer(j) => try sys.stdout.>writeln("{}", j)
        }
    }
}

fn fizzbuzz(n: Int) -> FizzBuzzResult {
    match 0 {
        {n % 15} => FizzBuzzResult.string <- "fizzbuzz"
        {n % 5}  => .string  <- "buzz"
        {n % 3}  => .string  <- "fizz"
        else     => .integer <- n
    }
}