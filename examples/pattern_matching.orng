fn main() -> Int {
    // Basic tuple destructuring
    let (a, b) = (100, 58)
    debug::println("a = {}, b = {}", a, b)

    // Nested array destructuring
    let ((x, y), (a, b)): [2][2]Int = ((100, 20), (20, 2))
    debug::println("x = {}, y = {}, a = {}, b = {}", x, y, a, b)

    // Partial destructuring with wildcard
    let (first, _, last): [3]Int = (100, 300, 56)
    debug::assert((first, last) == (100, 56))

    // Mutable destructuring with swap
    let (mut x, mut y) = (2)
    debug::println("Before Swap: x = {}, y = {}", x, y)
    (y, x) = (x, y)
    debug::println("After Swap: x = {}, y = {}", x, y)

    // Array destructuring and assignment
    let mut array: [3]Int
    (array[2], array[0], array[1]) = get_array()
    debug::assert((array[0], array[1], array[2]) == (2, 3, 1))

    // Destructuring with mutable references
    let mut x: [3]Int
    let a = &mut x[0]
    let b = &mut x[1]
    let c = &mut x[2]
    (a^, b^, c^) = (100, 30, 30)
    debug::assert((a^ b^, c^) == (100, 30, 30))

    // Sum type pattern matching
    let const The_Type = (a | b | c)
    let x: The_Type = The_Type.c
    let sum_result = match x {
        The_Type.a => 168,
        The_Type.b => 169,
        The_Type.c => 170,
        _ => unreachable
    }
    debug::assert(sum_result == 170)

    // Sum type with associated values
    let const The_Advanced_Type = (a: Int | b: Bool | c: Char)
    let sum_val: The_Advanced_Type = The_Advanced_Type.a(172)
    let advanced_result = match sum_val {
        .a(a) => a,
        .b(b) => if b { 5 } else { 3 },
        .c(c) => { _ = c; 4 }
        _ => unreachable
    }
    debug::println( advanced_result == 173)

    // Complex nested sum matching
    let const ComplexType = (a: (aa: Int | ab: Int) | b: (ba: Int | bb: Int))
    let complex_val: ComplexType = ComplexType.b(.ba(173))
    let complex_result = match complex_val {
        .a(y) => match y {
            .aa(z) => z,
            .ab(z) => z,
            _ => unreachable
        },
        .b(y) => match y {
            .ba(z) => z,
            .bb(z) => z,
            _ => unreachable
        },
        _ => unreachable
    }
    debug::println(complex_result == 173)

    // Match with tuple destructuring and mutation
    let match_mutate_result = match (230, 240) {
        (mut x, mut y) => {
            y /= 4;
            x + y
        },
        _ => 3
    }
    debug::assert(match_mutate_result == 297)
}

fn get_array() -> [3]Int {
    (1, 2, 3)
}