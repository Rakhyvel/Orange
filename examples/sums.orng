fn main() -> () {
    // Basic sum type definition
    const Color = (red | green | blue)
    let red_color: Color = Color.red
    //                     ^ Can use full type name...
    let green_color: Color = .green
    //                     ^ ...or can leave to be infered, if possible
    debug::assert(red_color == Color.red)

    // Sum type with named variants and associated values
    const Int_Or_Bool = (int: Int | bool: Bool)
    
    // Create variants using the type's name
    let int_variant: Int_Or_Bool = Int_Or_Bool.int(42)
    let bool_variant: Int_Or_Bool = Int_Or_Bool.bool(true)
    
    debug::assert(int_variant.int == 42)
    debug::assert(bool_variant.bool == true)

    // Sum type with default values
    const DefaultInt_Or_Bool = (int: Int = 102 | bool: Bool = false)
    let default_int: DefaultInt_Or_Bool = DefaultInt_Or_Bool.int
    let default_bool: DefaultInt_Or_Bool = DefaultInt_Or_Bool.bool
    
    debug::assert(default_int.int == 102)
    debug::assert(default_bool.bool == false)

    // Nested sum types
    const Nested_Type = (
        simple: (a | b | c) | 
        complex: (x: Int | y: String)
    )
    
    let simple_nested: Nested_Type = .simple(.a)
    let complex_nested: Nested_Type = .complex(.x(42))
    
    let nested_result = match simple_nested {
        .simple(.a) => 1,
        .simple(.b) => 2,
        .simple(.c) => 3,
        .complex(.x(val)) => val,
        _ => unreachable
    }
    
    debug::assert(nested_result == 1)

    // Sum type unions
    const A = (aa: Int | ab: String)
    const B = (ba: Int | bb: String)
    const Union = A || B

    let mut union_var: Union = .aa(3)
    debug::assert(union_var.aa == 3)
    
    union_var = .ab("Hello")
    debug::assert(union_var.ab == "Hello")
    
    union_var = .ba(108)
    debug::assert(union_var.ba == 108)

    // Pattern matching with sum types
    const FizzBuzzResult = (
        string: String | 
        integer: Int
    )

    fn fizzbuzz(n: Int) -> FizzBuzzResult {
        match 0 {
            {n % 15} => .string("fizzbuzz"),
            {n % 5}  => .string("buzz"),
            {n % 3}  => .string("fizz"),
            _        => .integer(n)
        }
    }

    let result = fizzbuzz(30)
    let match_result = match result {
        .string(s) => s.length(),
        .integer(i) => i
    }
    
    debug::assert(match_result == 8)

    // Sum type with unit variants
    const UnitType = (a | b | c)
    let unit_var: UnitType = UnitType.a({})
    
    let unit_match_result = match unit_var {
        .a() => 308,
        _ => unreachable
    }
    
    debug::assert(unit_match_result == 308)
}