const std = import_package("std")

// Define types Point and Rectangle as named-tuples
const Point: Type = (x: Float, y: Float)
const Rectangle: Type = 
    ( top_left: Point
    , width: Float
    , height: Float
    )

// Define a function which detects if the two rectangles are collided
fn aabb_collision: (a: Rectangle, b: Rectangle)->Bool
    =   a.top_left.x < b.top_left.x + b.width 
    and a.top_left.x + a.width > b.top_left.x
    and a.top_left.y < b.top_left.y + b.height
    and a.top_left.y + a.height > b.top_left.y

fn main: (_: System)->!() =
    let rect_a: Rectangle = ((10, 10), 10, 10)
    let rect_b: Rectangle = ((13, 15), 15, 10)

    // Normal functional call
    std.debug.assert( aabb_collision(rect_a, rect_b) )

    // UFCS syntax
    // Note that `>>` is an operator which takes the lhs,
    // and prepends it to the rhs "function call".
    std.debug.assert( rect_a>>aabb_collision(rect_b))

    // A `>>` counts as a function call, so you can chain them together
    std.debug.assert( rect_b >> rect_a >> aabb_collision() )

    // You can also chain function calls together, similar to the `|>` operator
    // found in many other languages
    rect_b
    >> rect_a
    >> aabb_collision()
    >> std.debug.assert()

    // Note that this is not partial function application. The following code
    // would result in an error if uncommented:
    //      std.debug.assert( rect_a >> aabb_collision() )
    //                                                ^
    // error: aabb_collision takes 2 parameters, 1 provided

    
    // Related is the `?>` operator.
    // The `?>` operator takes an optional-typed argument, and returns null if 
    // it is null, otherwise behaves as the `>>` operator.
    const rand = extern_function("rand", ()->Int)
    fn maybe_get_rectangle: ()->?Rectangle = 
        if rand() % 2
            .some(rect_a)
        else 
            .null
    let maybe_collided: ?Bool 
        =  maybe_get_rectangle() 
        ?> maybe_get_rectangle()
        ?> aabb_collision()
    
