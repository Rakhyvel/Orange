let const std = import("std")

// Define types Point and Rectangle as named-tuples
let const Point: Type = (x: Float, y: Float)
let const Rectangle: Type = 
    ( top_left: Point
    , width: Float
    , height: Float
    )

// Define a function which detects if the two rectangles are collided
fn aabb_collision(a: Rectangle, b: Rectangle)->Bool {
    a.top_left.x < b.top_left.x + b.width 
    and a.top_left.x + a.width > b.top_left.x
    and a.top_left.y < b.top_left.y + b.height
    and a.top_left.y + a.height > b.top_left.y
}

fn main(_: System) -> !() {
    let rect_a: Rectangle = ((10, 10), 10, 10)
    let rect_b: Rectangle = ((13, 15), 15, 10)

    // Normal functional call
    std.debug.assert( aabb_collision(rect_a, rect_b) )

    // UFCS syntax
    // Note that `>>` is an operator which takes the lhs,
    // and prepends it to the rhs "function call".
    std.debug.assert( rect_a>>aabb_collision(rect_b))

    // A `>>` counts as a function call, so you can chain them together
    std.debug.assert( rect_b >> rect_a >> aabb_collision() )

    // Note that this is not partial function application. The following code
    // would result in an error if uncommented:
    //      std.debug.assert( rect_a >> aabb_collision() )
    //                                                ^
    // error: aabb_collision takes 2 parameters, 1 provided
}
    
