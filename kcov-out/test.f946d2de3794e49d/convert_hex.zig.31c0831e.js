var data = {lines:[
{"lineNum":"    1","line":"//! Conversion of hex-float representation into an accurate value."},
{"lineNum":"    2","line":"//"},
{"lineNum":"    3","line":"// Derived from golang strconv/atof.go."},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"const std = @import(\"std\");"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":"const common = @import(\"common.zig\");"},
{"lineNum":"    8","line":"const Number = common.Number;"},
{"lineNum":"    9","line":"const floatFromUnsigned = common.floatFromUnsigned;"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"// converts the form 0xMMM.NNNpEEE."},
{"lineNum":"   12","line":"//"},
{"lineNum":"   13","line":"// MMM.NNN = mantissa"},
{"lineNum":"   14","line":"// EEE = exponent"},
{"lineNum":"   15","line":"//"},
{"lineNum":"   16","line":"// MMM.NNN is stored as an integer, the exponent is offset."},
{"lineNum":"   17","line":"pub fn convertHex(comptime T: type, n_: Number(T)) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   18","line":"    const MantissaT = common.mantissaType(T);"},
{"lineNum":"   19","line":"    var n = n_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"    if (n.mantissa == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"        return if (n.negative) -0.0 else 0.0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    }"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    const max_exp = math.floatExponentMax(T);"},
{"lineNum":"   26","line":"    const min_exp = math.floatExponentMin(T);"},
{"lineNum":"   27","line":"    const mantissa_bits = math.floatMantissaBits(T);"},
{"lineNum":"   28","line":"    const exp_bits = math.floatExponentBits(T);"},
{"lineNum":"   29","line":"    const exp_bias = min_exp - 1;"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"    // mantissa now implicitly divided by 2^mantissa_bits"},
{"lineNum":"   32","line":"    n.exponent += mantissa_bits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":""},
{"lineNum":"   34","line":"    // Shift mantissa and exponent to bring representation into float range."},
{"lineNum":"   35","line":"    // Eventually we want a mantissa with a leading 1-bit followed by mantbits other bits."},
{"lineNum":"   36","line":"    // For rounding, we need two more, where the bottom bit represents"},
{"lineNum":"   37","line":"    // whether that bit or any later bit was non-zero."},
{"lineNum":"   38","line":"    // (If the mantissa has already lost non-zero bits, trunc is true,"},
{"lineNum":"   39","line":"    // and we OR in a 1 below after shifting left appropriately.)"},
{"lineNum":"   40","line":"    while (n.mantissa != 0 and n.mantissa >> (mantissa_bits + 2) == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"        n.mantissa <<= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   42","line":"        n.exponent -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    }"},
{"lineNum":"   44","line":"    if (n.many_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"        n.mantissa |= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":"    while (n.mantissa >> (1 + mantissa_bits + 2) != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"        n.mantissa = (n.mantissa >> 1) | (n.mantissa & 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   49","line":"        n.exponent += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"    }"},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"    // If exponent is too negative,"},
{"lineNum":"   53","line":"    // denormalize in hopes of making it representable."},
{"lineNum":"   54","line":"    // (The -2 is for the rounding bits.)"},
{"lineNum":"   55","line":"    while (n.mantissa > 1 and n.exponent < min_exp - 2) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        n.mantissa = (n.mantissa >> 1) | (n.mantissa & 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"        n.exponent += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    // Round using two bottom bits."},
{"lineNum":"   61","line":"    var round = n.mantissa & 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   62","line":"    n.mantissa >>= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"    round |= n.mantissa & 1; // round to even (round up if mantissa is odd)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"    n.exponent += 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"    if (round == 3) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"        n.mantissa += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   67","line":"        if (n.mantissa == 1 << (1 + mantissa_bits)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"            n.mantissa >>= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":"            n.exponent += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   70","line":"        }"},
{"lineNum":"   71","line":"    }"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    // Denormal or zero"},
{"lineNum":"   74","line":"    if (n.mantissa >> mantissa_bits == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"        n.exponent = exp_bias;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"    }"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"    // Infinity and range error"},
{"lineNum":"   79","line":"    if (n.exponent > max_exp) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"        return math.inf(T);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"    }"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"    var bits = n.mantissa & ((1 << mantissa_bits) - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"    bits |= @intCast(MantissaT, (n.exponent - exp_bias) & ((1 << exp_bits) - 1)) << mantissa_bits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"    if (n.negative) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"        bits |= 1 << (mantissa_bits + exp_bits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"    }"},
{"lineNum":"   88","line":"    return floatFromUnsigned(T, MantissaT, bits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 34, "covered" : 0,};
var merged_data = [];
