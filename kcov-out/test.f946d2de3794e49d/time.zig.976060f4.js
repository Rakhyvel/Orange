var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const assert = std.debug.assert;"},
{"lineNum":"    4","line":"const testing = std.testing;"},
{"lineNum":"    5","line":"const os = std.os;"},
{"lineNum":"    6","line":"const math = std.math;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"pub const epoch = @import(\"time/epoch.zig\");"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"/// Spurious wakeups are possible and no precision of timing is guaranteed."},
{"lineNum":"   11","line":"pub fn sleep(nanoseconds: u64) void {"},
{"lineNum":"   12","line":"    // TODO: opting out of async sleeping?"},
{"lineNum":"   13","line":"    if (std.io.is_async) {"},
{"lineNum":"   14","line":"        return std.event.Loop.instance.?.sleep(nanoseconds);"},
{"lineNum":"   15","line":"    }"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"   18","line":"        const big_ms_from_ns = nanoseconds / ns_per_ms;"},
{"lineNum":"   19","line":"        const ms = math.cast(os.windows.DWORD, big_ms_from_ns) orelse math.maxInt(os.windows.DWORD);"},
{"lineNum":"   20","line":"        os.windows.kernel32.Sleep(ms);"},
{"lineNum":"   21","line":"        return;"},
{"lineNum":"   22","line":"    }"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"    if (builtin.os.tag == .wasi) {"},
{"lineNum":"   25","line":"        const w = std.os.wasi;"},
{"lineNum":"   26","line":"        const userdata: w.userdata_t = 0x0123_45678;"},
{"lineNum":"   27","line":"        const clock = w.subscription_clock_t{"},
{"lineNum":"   28","line":"            .id = w.CLOCK.MONOTONIC,"},
{"lineNum":"   29","line":"            .timeout = nanoseconds,"},
{"lineNum":"   30","line":"            .precision = 0,"},
{"lineNum":"   31","line":"            .flags = 0,"},
{"lineNum":"   32","line":"        };"},
{"lineNum":"   33","line":"        const in = w.subscription_t{"},
{"lineNum":"   34","line":"            .userdata = userdata,"},
{"lineNum":"   35","line":"            .u = w.subscription_u_t{"},
{"lineNum":"   36","line":"                .tag = w.EVENTTYPE_CLOCK,"},
{"lineNum":"   37","line":"                .u = w.subscription_u_u_t{"},
{"lineNum":"   38","line":"                    .clock = clock,"},
{"lineNum":"   39","line":"                },"},
{"lineNum":"   40","line":"            },"},
{"lineNum":"   41","line":"        };"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        var event: w.event_t = undefined;"},
{"lineNum":"   44","line":"        var nevents: usize = undefined;"},
{"lineNum":"   45","line":"        _ = w.poll_oneoff(&in, &event, 1, &nevents);"},
{"lineNum":"   46","line":"        return;"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    const s = nanoseconds / ns_per_s;"},
{"lineNum":"   50","line":"    const ns = nanoseconds % ns_per_s;"},
{"lineNum":"   51","line":"    std.os.nanosleep(s, ns);"},
{"lineNum":"   52","line":"}"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"test \"sleep\" {"},
{"lineNum":"   55","line":"    sleep(1);"},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"/// Get a calendar timestamp, in seconds, relative to UTC 1970-01-01."},
{"lineNum":"   59","line":"/// Precision of timing depends on the hardware and operating system."},
{"lineNum":"   60","line":"/// The return value is signed because it is possible to have a date that is"},
{"lineNum":"   61","line":"/// before the epoch."},
{"lineNum":"   62","line":"/// See `std.os.clock_gettime` for a POSIX timestamp."},
{"lineNum":"   63","line":"pub fn timestamp() i64 {"},
{"lineNum":"   64","line":"    return @divFloor(milliTimestamp(), ms_per_s);"},
{"lineNum":"   65","line":"}"},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"/// Get a calendar timestamp, in milliseconds, relative to UTC 1970-01-01."},
{"lineNum":"   68","line":"/// Precision of timing depends on the hardware and operating system."},
{"lineNum":"   69","line":"/// The return value is signed because it is possible to have a date that is"},
{"lineNum":"   70","line":"/// before the epoch."},
{"lineNum":"   71","line":"/// See `std.os.clock_gettime` for a POSIX timestamp."},
{"lineNum":"   72","line":"pub fn milliTimestamp() i64 {"},
{"lineNum":"   73","line":"    return @intCast(i64, @divFloor(nanoTimestamp(), ns_per_ms));"},
{"lineNum":"   74","line":"}"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"/// Get a calendar timestamp, in microseconds, relative to UTC 1970-01-01."},
{"lineNum":"   77","line":"/// Precision of timing depends on the hardware and operating system."},
{"lineNum":"   78","line":"/// The return value is signed because it is possible to have a date that is"},
{"lineNum":"   79","line":"/// before the epoch."},
{"lineNum":"   80","line":"/// See `std.os.clock_gettime` for a POSIX timestamp."},
{"lineNum":"   81","line":"pub fn microTimestamp() i64 {"},
{"lineNum":"   82","line":"    return @intCast(i64, @divFloor(nanoTimestamp(), ns_per_us));"},
{"lineNum":"   83","line":"}"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"/// Get a calendar timestamp, in nanoseconds, relative to UTC 1970-01-01."},
{"lineNum":"   86","line":"/// Precision of timing depends on the hardware and operating system."},
{"lineNum":"   87","line":"/// On Windows this has a maximum granularity of 100 nanoseconds."},
{"lineNum":"   88","line":"/// The return value is signed because it is possible to have a date that is"},
{"lineNum":"   89","line":"/// before the epoch."},
{"lineNum":"   90","line":"/// See `std.os.clock_gettime` for a POSIX timestamp."},
{"lineNum":"   91","line":"pub fn nanoTimestamp() i128 {"},
{"lineNum":"   92","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"   93","line":"        // FileTime has a granularity of 100 nanoseconds and uses the NTFS/Windows epoch,"},
{"lineNum":"   94","line":"        // which is 1601-01-01."},
{"lineNum":"   95","line":"        const epoch_adj = epoch.windows * (ns_per_s / 100);"},
{"lineNum":"   96","line":"        var ft: os.windows.FILETIME = undefined;"},
{"lineNum":"   97","line":"        os.windows.kernel32.GetSystemTimeAsFileTime(&ft);"},
{"lineNum":"   98","line":"        const ft64 = (@as(u64, ft.dwHighDateTime) << 32) | ft.dwLowDateTime;"},
{"lineNum":"   99","line":"        return @as(i128, @bitCast(i64, ft64) + epoch_adj) * 100;"},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  103","line":"        var ns: os.wasi.timestamp_t = undefined;"},
{"lineNum":"  104","line":"        const err = os.wasi.clock_time_get(os.wasi.CLOCK.REALTIME, 1, &ns);"},
{"lineNum":"  105","line":"        assert(err == .SUCCESS);"},
{"lineNum":"  106","line":"        return ns;"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    var ts: os.timespec = undefined;"},
{"lineNum":"  110","line":"    os.clock_gettime(os.CLOCK.REALTIME, &ts) catch |err| switch (err) {"},
{"lineNum":"  111","line":"        error.UnsupportedClock, error.Unexpected => return 0, // \"Precision of timing depends on hardware and OS\"."},
{"lineNum":"  112","line":"    };"},
{"lineNum":"  113","line":"    return (@as(i128, ts.tv_sec) * ns_per_s) + ts.tv_nsec;"},
{"lineNum":"  114","line":"}"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"test \"timestamp\" {"},
{"lineNum":"  117","line":"    const margin = ns_per_ms * 50;"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    const time_0 = milliTimestamp();"},
{"lineNum":"  120","line":"    sleep(ns_per_ms);"},
{"lineNum":"  121","line":"    const time_1 = milliTimestamp();"},
{"lineNum":"  122","line":"    const interval = time_1 - time_0;"},
{"lineNum":"  123","line":"    try testing.expect(interval > 0);"},
{"lineNum":"  124","line":"    // Tests should not depend on timings: skip test if outside margin."},
{"lineNum":"  125","line":"    if (!(interval < margin)) return error.SkipZigTest;"},
{"lineNum":"  126","line":"}"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"// Divisions of a nanosecond."},
{"lineNum":"  129","line":"pub const ns_per_us = 1000;"},
{"lineNum":"  130","line":"pub const ns_per_ms = 1000 * ns_per_us;"},
{"lineNum":"  131","line":"pub const ns_per_s = 1000 * ns_per_ms;"},
{"lineNum":"  132","line":"pub const ns_per_min = 60 * ns_per_s;"},
{"lineNum":"  133","line":"pub const ns_per_hour = 60 * ns_per_min;"},
{"lineNum":"  134","line":"pub const ns_per_day = 24 * ns_per_hour;"},
{"lineNum":"  135","line":"pub const ns_per_week = 7 * ns_per_day;"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"// Divisions of a microsecond."},
{"lineNum":"  138","line":"pub const us_per_ms = 1000;"},
{"lineNum":"  139","line":"pub const us_per_s = 1000 * us_per_ms;"},
{"lineNum":"  140","line":"pub const us_per_min = 60 * us_per_s;"},
{"lineNum":"  141","line":"pub const us_per_hour = 60 * us_per_min;"},
{"lineNum":"  142","line":"pub const us_per_day = 24 * us_per_hour;"},
{"lineNum":"  143","line":"pub const us_per_week = 7 * us_per_day;"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"// Divisions of a millisecond."},
{"lineNum":"  146","line":"pub const ms_per_s = 1000;"},
{"lineNum":"  147","line":"pub const ms_per_min = 60 * ms_per_s;"},
{"lineNum":"  148","line":"pub const ms_per_hour = 60 * ms_per_min;"},
{"lineNum":"  149","line":"pub const ms_per_day = 24 * ms_per_hour;"},
{"lineNum":"  150","line":"pub const ms_per_week = 7 * ms_per_day;"},
{"lineNum":"  151","line":""},
{"lineNum":"  152","line":"// Divisions of a second."},
{"lineNum":"  153","line":"pub const s_per_min = 60;"},
{"lineNum":"  154","line":"pub const s_per_hour = s_per_min * 60;"},
{"lineNum":"  155","line":"pub const s_per_day = s_per_hour * 24;"},
{"lineNum":"  156","line":"pub const s_per_week = s_per_day * 7;"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"/// An Instant represents a timestamp with respect to the currently"},
{"lineNum":"  159","line":"/// executing program that ticks during suspend and can be used to"},
{"lineNum":"  160","line":"/// record elapsed time unlike `nanoTimestamp`."},
{"lineNum":"  161","line":"///"},
{"lineNum":"  162","line":"/// It tries to sample the system\'s fastest and most precise timer available."},
{"lineNum":"  163","line":"/// It also tries to be monotonic, but this is not a guarantee due to OS/hardware bugs."},
{"lineNum":"  164","line":"/// If you need monotonic readings for elapsed time, consider `Timer` instead."},
{"lineNum":"  165","line":"pub const Instant = struct {"},
{"lineNum":"  166","line":"    timestamp: if (is_posix) os.timespec else u64,"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"    // true if we should use clock_gettime()"},
{"lineNum":"  169","line":"    const is_posix = switch (builtin.os.tag) {"},
{"lineNum":"  170","line":"        .wasi => builtin.link_libc,"},
{"lineNum":"  171","line":"        .windows => false,"},
{"lineNum":"  172","line":"        else => true,"},
{"lineNum":"  173","line":"    };"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"    /// Queries the system for the current moment of time as an Instant."},
{"lineNum":"  176","line":"    /// This is not guaranteed to be monotonic or steadily increasing, but for most implementations it is."},
{"lineNum":"  177","line":"    /// Returns `error.Unsupported` when a suitable clock is not detected."},
{"lineNum":"  178","line":"    pub fn now() error{Unsupported}!Instant {","class":"lineCov","hits":"1","order":"396","possible_hits":"1",},
{"lineNum":"  179","line":"        // QPC on windows doesn\'t fail on >= XP/2000 and includes time suspended."},
{"lineNum":"  180","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  181","line":"            return Instant{ .timestamp = os.windows.QueryPerformanceCounter() };"},
{"lineNum":"  182","line":"        }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        // On WASI without libc, use clock_time_get directly."},
{"lineNum":"  185","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  186","line":"            var ns: os.wasi.timestamp_t = undefined;"},
{"lineNum":"  187","line":"            const rc = os.wasi.clock_time_get(os.wasi.CLOCK.MONOTONIC, 1, &ns);"},
{"lineNum":"  188","line":"            if (rc != .SUCCESS) return error.Unsupported;"},
{"lineNum":"  189","line":"            return Instant{ .timestamp = ns };"},
{"lineNum":"  190","line":"        }"},
{"lineNum":"  191","line":""},
{"lineNum":"  192","line":"        // On darwin, use UPTIME_RAW instead of MONOTONIC as it ticks while suspended."},
{"lineNum":"  193","line":"        // On linux, use BOOTTIME instead of MONOTONIC as it ticks while suspended."},
{"lineNum":"  194","line":"        // On freebsd derivatives, use MONOTONIC_FAST as currently there\'s no precision tradeoff."},
{"lineNum":"  195","line":"        // On other posix systems, MONOTONIC is generally the fastest and ticks while suspended."},
{"lineNum":"  196","line":"        const clock_id = switch (builtin.os.tag) {"},
{"lineNum":"  197","line":"            .macos, .ios, .tvos, .watchos => os.CLOCK.UPTIME_RAW,"},
{"lineNum":"  198","line":"            .freebsd, .dragonfly => os.CLOCK.MONOTONIC_FAST,"},
{"lineNum":"  199","line":"            .linux => os.CLOCK.BOOTTIME,"},
{"lineNum":"  200","line":"            else => os.CLOCK.MONOTONIC,"},
{"lineNum":"  201","line":"        };"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        var ts: os.timespec = undefined;","class":"lineCov","hits":"1","order":"397","possible_hits":"1",},
{"lineNum":"  204","line":"        os.clock_gettime(clock_id, &ts) catch return error.Unsupported;","class":"lineCov","hits":"1","order":"398","possible_hits":"1",},
{"lineNum":"  205","line":"        return Instant{ .timestamp = ts };","class":"lineCov","hits":"1","order":"474","possible_hits":"1",},
{"lineNum":"  206","line":"    }"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"    /// Quickly compares two instances between each other."},
{"lineNum":"  209","line":"    pub fn order(self: Instant, other: Instant) std.math.Order {","class":"lineCov","hits":"1","order":"536","possible_hits":"1",},
{"lineNum":"  210","line":"        // windows and wasi timestamps are in u64 which is easily comparible"},
{"lineNum":"  211","line":"        if (!is_posix) {"},
{"lineNum":"  212","line":"            return std.math.order(self.timestamp, other.timestamp);"},
{"lineNum":"  213","line":"        }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"        var ord = std.math.order(self.timestamp.tv_sec, other.timestamp.tv_sec);","class":"lineCov","hits":"1","order":"537","possible_hits":"1",},
{"lineNum":"  216","line":"        if (ord == .eq) {","class":"lineCov","hits":"1","order":"541","possible_hits":"1",},
{"lineNum":"  217","line":"            ord = std.math.order(self.timestamp.tv_nsec, other.timestamp.tv_nsec);","class":"lineCov","hits":"1","order":"542","possible_hits":"1",},
{"lineNum":"  218","line":"        }"},
{"lineNum":"  219","line":"        return ord;","class":"lineCov","hits":"1","order":"546","possible_hits":"1",},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    /// Returns elapsed time in nanoseconds since the `earlier` Instant."},
{"lineNum":"  223","line":"    /// This assumes that the `earlier` Instant represents a moment in time before or equal to `self`."},
{"lineNum":"  224","line":"    /// This also assumes that the time that has passed between both Instants fits inside a u64 (~585 yrs)."},
{"lineNum":"  225","line":"    pub fn since(self: Instant, earlier: Instant) u64 {","class":"lineCov","hits":"1","order":"550","possible_hits":"1",},
{"lineNum":"  226","line":"        if (builtin.os.tag == .windows) {"},
{"lineNum":"  227","line":"            // We don\'t need to cache QPF as it\'s internally just a memory read to KUSER_SHARED_DATA"},
{"lineNum":"  228","line":"            // (a read-only page of info updated and mapped by the kernel to all processes):"},
{"lineNum":"  229","line":"            // https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/ntddk/ns-ntddk-kuser_shared_data"},
{"lineNum":"  230","line":"            // https://www.geoffchappell.com/studies/windows/km/ntoskrnl/inc/api/ntexapi_x/kuser_shared_data/index.htm"},
{"lineNum":"  231","line":"            const qpc = self.timestamp - earlier.timestamp;"},
{"lineNum":"  232","line":"            const qpf = os.windows.QueryPerformanceFrequency();"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"            // 10Mhz (1 qpc tick every 100ns) is a common enough QPF value that we can optimize on it."},
{"lineNum":"  235","line":"            // https://github.com/microsoft/STL/blob/785143a0c73f030238ef618890fd4d6ae2b3a3a0/stl/inc/chrono#L694-L701"},
{"lineNum":"  236","line":"            const common_qpf = 10_000_000;"},
{"lineNum":"  237","line":"            if (qpf == common_qpf) {"},
{"lineNum":"  238","line":"                return qpc * (ns_per_s / common_qpf);"},
{"lineNum":"  239","line":"            }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"            // Convert to ns using fixed point."},
{"lineNum":"  242","line":"            const scale = @as(u64, std.time.ns_per_s << 32) / @intCast(u32, qpf);"},
{"lineNum":"  243","line":"            const result = (@as(u96, qpc) * scale) >> 32;"},
{"lineNum":"  244","line":"            return @truncate(u64, result);"},
{"lineNum":"  245","line":"        }"},
{"lineNum":"  246","line":""},
{"lineNum":"  247","line":"        // WASI timestamps are directly in nanoseconds"},
{"lineNum":"  248","line":"        if (builtin.os.tag == .wasi and !builtin.link_libc) {"},
{"lineNum":"  249","line":"            return self.timestamp - earlier.timestamp;"},
{"lineNum":"  250","line":"        }"},
{"lineNum":"  251","line":""},
{"lineNum":"  252","line":"        // Convert timespec diff to ns"},
{"lineNum":"  253","line":"        const seconds = @intCast(u64, self.timestamp.tv_sec - earlier.timestamp.tv_sec);","class":"lineCov","hits":"1","order":"551","possible_hits":"1",},
{"lineNum":"  254","line":"        const elapsed = (seconds * ns_per_s) + @intCast(u32, self.timestamp.tv_nsec);","class":"lineCov","hits":"1","order":"552","possible_hits":"1",},
{"lineNum":"  255","line":"        return elapsed - @intCast(u32, earlier.timestamp.tv_nsec);","class":"lineCov","hits":"1","order":"553","possible_hits":"1",},
{"lineNum":"  256","line":"    }"},
{"lineNum":"  257","line":"};"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"/// A monotonic, high performance timer."},
{"lineNum":"  260","line":"///"},
{"lineNum":"  261","line":"/// Timer.start() is used to initalize the timer"},
{"lineNum":"  262","line":"/// and gives the caller an opportunity to check for the existence of a supported clock."},
{"lineNum":"  263","line":"/// Once a supported clock is discovered,"},
{"lineNum":"  264","line":"/// it is assumed that it will be available for the duration of the Timer\'s use."},
{"lineNum":"  265","line":"///"},
{"lineNum":"  266","line":"/// Monotonicity is ensured by saturating on the most previous sample."},
{"lineNum":"  267","line":"/// This means that while timings reported are monotonic,"},
{"lineNum":"  268","line":"/// they\'re not guaranteed to tick at a steady rate as this is up to the underlying system."},
{"lineNum":"  269","line":"pub const Timer = struct {"},
{"lineNum":"  270","line":"    started: Instant,"},
{"lineNum":"  271","line":"    previous: Instant,"},
{"lineNum":"  272","line":""},
{"lineNum":"  273","line":"    pub const Error = error{TimerUnsupported};"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"    /// Initialize the timer by querying for a supported clock."},
{"lineNum":"  276","line":"    /// Returns `error.TimerUnsupported` when such a clock is unavailable."},
{"lineNum":"  277","line":"    /// This should only fail in hostile environments such as linux seccomp misuse."},
{"lineNum":"  278","line":"    pub fn start() Error!Timer {","class":"lineCov","hits":"1","order":"394","possible_hits":"1",},
{"lineNum":"  279","line":"        const current = Instant.now() catch return error.TimerUnsupported;","class":"lineCov","hits":"1","order":"395","possible_hits":"1",},
{"lineNum":"  280","line":"        return Timer{ .started = current, .previous = current };","class":"lineCov","hits":"1","order":"475","possible_hits":"1",},
{"lineNum":"  281","line":"    }"},
{"lineNum":"  282","line":""},
{"lineNum":"  283","line":"    /// Reads the timer value since start or the last reset in nanoseconds."},
{"lineNum":"  284","line":"    pub fn read(self: *Timer) u64 {","class":"lineCov","hits":"1","order":"531","possible_hits":"1",},
{"lineNum":"  285","line":"        const current = self.sample();","class":"lineCov","hits":"1","order":"532","possible_hits":"1",},
{"lineNum":"  286","line":"        return current.since(self.started);","class":"lineCov","hits":"1","order":"549","possible_hits":"1",},
{"lineNum":"  287","line":"    }"},
{"lineNum":"  288","line":""},
{"lineNum":"  289","line":"    /// Resets the timer value to 0/now."},
{"lineNum":"  290","line":"    pub fn reset(self: *Timer) void {"},
{"lineNum":"  291","line":"        const current = self.sample();"},
{"lineNum":"  292","line":"        self.started = current;"},
{"lineNum":"  293","line":"    }"},
{"lineNum":"  294","line":""},
{"lineNum":"  295","line":"    /// Returns the current value of the timer in nanoseconds, then resets it."},
{"lineNum":"  296","line":"    pub fn lap(self: *Timer) u64 {"},
{"lineNum":"  297","line":"        const current = self.sample();"},
{"lineNum":"  298","line":"        defer self.started = current;"},
{"lineNum":"  299","line":"        return current.since(self.started);"},
{"lineNum":"  300","line":"    }"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"    /// Returns an Instant sampled at the callsite that is"},
{"lineNum":"  303","line":"    /// guaranteed to be monotonic with respect to the timer\'s starting point."},
{"lineNum":"  304","line":"    fn sample(self: *Timer) Instant {","class":"lineCov","hits":"1","order":"533","possible_hits":"1",},
{"lineNum":"  305","line":"        const current = Instant.now() catch unreachable;","class":"lineCov","hits":"1","order":"534","possible_hits":"1",},
{"lineNum":"  306","line":"        if (current.order(self.previous) == .gt) {","class":"lineCov","hits":"1","order":"535","possible_hits":"1",},
{"lineNum":"  307","line":"            self.previous = current;","class":"lineCov","hits":"1","order":"547","possible_hits":"1",},
{"lineNum":"  308","line":"        }"},
{"lineNum":"  309","line":"        return self.previous;","class":"lineCov","hits":"1","order":"548","possible_hits":"1",},
{"lineNum":"  310","line":"    }"},
{"lineNum":"  311","line":"};"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"test \"Timer + Instant\" {"},
{"lineNum":"  314","line":"    const margin = ns_per_ms * 150;"},
{"lineNum":"  315","line":""},
{"lineNum":"  316","line":"    var timer = try Timer.start();"},
{"lineNum":"  317","line":"    sleep(10 * ns_per_ms);"},
{"lineNum":"  318","line":"    const time_0 = timer.read();"},
{"lineNum":"  319","line":"    try testing.expect(time_0 > 0);"},
{"lineNum":"  320","line":"    // Tests should not depend on timings: skip test if outside margin."},
{"lineNum":"  321","line":"    if (!(time_0 < margin)) return error.SkipZigTest;"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    const time_1 = timer.lap();"},
{"lineNum":"  324","line":"    try testing.expect(time_1 >= time_0);"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"    timer.reset();"},
{"lineNum":"  327","line":"    try testing.expect(timer.read() < time_1);"},
{"lineNum":"  328","line":"}"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"test {"},
{"lineNum":"  331","line":"    _ = epoch;"},
{"lineNum":"  332","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 24, "covered" : 24,};
var merged_data = [];
