var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"const tokens = @import(\"token.zig\");"},
{"lineNum":"    4","line":"const String = @import(\"zig-string/zig-string.zig\").String;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"const Token = tokens.Token;"},
{"lineNum":"    7","line":"const TokenKind = tokens.TokenKind;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"pub const SliceKind = union(enum) {"},
{"lineNum":"   10","line":"    SLICE, // data ptr and len"},
{"lineNum":"   11","line":"    MUT, // mutable data ptr and len"},
{"lineNum":"   12","line":"    MULTIPTR, // c-style `*` pointer, no len"},
{"lineNum":"   13","line":"    ARRAY, // static homogenous tuple, compile-time len"},
{"lineNum":"   14","line":"};"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"const Errors = error{ InvalidRange, OutOfMemory };"},
{"lineNum":"   17","line":""},
{"lineNum":"   18","line":"pub const AST = union(enum) {"},
{"lineNum":"   19","line":"    unit: struct { token: Token },"},
{"lineNum":"   20","line":"    int: struct { token: Token, data: i128 },"},
{"lineNum":"   21","line":"    char: struct { token: Token, data: u32 },"},
{"lineNum":"   22","line":"    float: struct { token: Token, data: f64 },"},
{"lineNum":"   23","line":"    _string: struct { token: Token },"},
{"lineNum":"   24","line":"    identifier: struct { token: Token },"},
{"lineNum":"   25","line":"    _unreachable: struct { token: Token },"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    unop: struct { token: Token, expr: *AST },"},
{"lineNum":"   28","line":"    binop: struct { token: Token, lhs: *AST, rhs: *AST },"},
{"lineNum":"   29","line":"    call: struct { token: Token, lhs: *AST, rhs: *AST },"},
{"lineNum":"   30","line":"    addrOf: struct { token: Token, expr: *AST, mut: bool },"},
{"lineNum":"   31","line":"    sliceOf: struct { token: Token, expr: *AST, len: ?*AST, kind: SliceKind },"},
{"lineNum":"   32","line":"    namedArg: struct { token: Token, ident: *AST, init: *AST },"},
{"lineNum":"   33","line":"    subSlice: struct { token: Token, super: *AST, lower: ?*AST, upper: ?*AST },"},
{"lineNum":"   34","line":"    annotation: struct { token: Token, pattern: *AST, type: *AST, predicate: ?*AST, init: ?*AST },"},
{"lineNum":"   35","line":"    inferredMember: struct { token: Token, ident: *AST, init: ?*AST },"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    _if: struct { token: Token, let: ?*AST, condition: *AST, bodyBlock: *AST, elseBlock: ?*AST },"},
{"lineNum":"   38","line":"    cond: struct { token: Token, let: ?*AST, mappings: std.ArrayList(*AST) },"},
{"lineNum":"   39","line":"    case: struct { token: Token, let: ?*AST, expr: *AST, mappings: std.ArrayList(*AST) },"},
{"lineNum":"   40","line":"    mapping: struct { token: Token, lhs: ?*AST, rhs: ?*AST },"},
{"lineNum":"   41","line":"    _while: struct { token: Token, let: ?*AST, condition: *AST, post: ?*AST, bodyBlock: *AST, elseBlock: ?*AST },"},
{"lineNum":"   42","line":"    _for: struct { token: Token, let: ?*AST, elem: *AST, iterable: *AST, bodyBlock: *AST, elseBlock: ?*AST },"},
{"lineNum":"   43","line":""},
{"lineNum":"   44","line":"    block: struct { token: Token, statements: std.ArrayList(*AST), final: ?*AST },"},
{"lineNum":"   45","line":"    _break: struct { token: Token },"},
{"lineNum":"   46","line":"    _continue: struct { token: Token },"},
{"lineNum":"   47","line":"    throw: struct { token: Token, expr: *AST },"},
{"lineNum":"   48","line":"    _return: struct { token: Token, expr: ?*AST },"},
{"lineNum":"   49","line":"    decl: struct { token: Token, pattern: *AST, type: ?*AST, init: ?*AST },"},
{"lineNum":"   50","line":"    fnDecl: struct { token: Token, name: ?*AST, params: std.ArrayList(*AST), retType: *AST, refinement: ?*AST, init: *AST },"},
{"lineNum":"   51","line":"    _defer: struct { token: Token, expr: *AST },"},
{"lineNum":"   52","line":"    assign: struct { token: Token, lhs: *AST, rhs: *AST },"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"    fn box(ast: AST, alloc: std.mem.Allocator) !*AST {","class":"lineCov","hits":"1","order":"1305","possible_hits":"1",},
{"lineNum":"   55","line":"        var retval = try alloc.create(AST);","class":"lineCov","hits":"1","order":"1306","possible_hits":"1",},
{"lineNum":"   56","line":"        retval.* = ast;","class":"lineCov","hits":"1","order":"1339","possible_hits":"1",},
{"lineNum":"   57","line":"        return retval;","class":"lineCov","hits":"1","order":"1340","possible_hits":"1",},
{"lineNum":"   58","line":"    }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    pub fn getToken(self: AST) Token {","class":"lineCov","hits":"1","order":"1691","possible_hits":"1",},
{"lineNum":"   61","line":"        switch (self) {","class":"lineCov","hits":"1","order":"1692","possible_hits":"1",},
{"lineNum":"   62","line":"            .unit => return self.unit.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"            .int => return self.int.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"            .char => return self.char.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   65","line":"            .float => return self.float.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"            ._string => return self._string.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"            .identifier => return self.identifier.token,","class":"lineCov","hits":"1","order":"1693","possible_hits":"1",},
{"lineNum":"   68","line":"            ._unreachable => return self._unreachable.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"            .unop => return self.unop.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"            .binop => return self.binop.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":"            .call => return self.call.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"            .addrOf => return self.addrOf.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"            .sliceOf => return self.sliceOf.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"            .namedArg => return self.namedArg.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"            .subSlice => return self.subSlice.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"            .annotation => return self.annotation.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"            .inferredMember => return self.inferredMember.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"            ._if => return self._if.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            .cond => return self.cond.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   82","line":"            .case => return self.case.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"            .mapping => return self.mapping.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"            ._while => return self._while.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   85","line":"            ._for => return self._for.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"            .block => return self.block.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   87","line":"            ._break => return self._break.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   88","line":"            ._continue => return self._continue.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"            .throw => return self.throw.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"            ._return => return self._return.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"            .decl => return self.decl.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   92","line":"            .fnDecl => return self.fnDecl.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"            ._defer => return self._defer.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"            .assign => return self.assign.token,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"        }"},
{"lineNum":"   96","line":"    }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"    pub fn createUnit(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"        return try AST.box(AST{ .unit = .{ .token = token } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"    }"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"    pub fn createInt(token: Token, data: i128, allocator: std.mem.Allocator) !*AST {","class":"lineCov","hits":"1","order":"1469","possible_hits":"1",},
{"lineNum":"  103","line":"        return try AST.box(AST{ .int = .{ .token = token, .data = data } }, allocator);","class":"lineCov","hits":"1","order":"1470","possible_hits":"1",},
{"lineNum":"  104","line":"    }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"    pub fn createChar(token: Token, data: u32, allocator: std.mem.Allocator) !*AST {"},
{"lineNum":"  107","line":"        return try AST.box(AST{ .char = .{ .token = token, .data = data } }, allocator);"},
{"lineNum":"  108","line":"    }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"    pub fn createFloat(token: Token, data: f64, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"        return try AST.box(AST{ .float = .{ .token = token, .data = data } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"    }"},
{"lineNum":"  113","line":""},
{"lineNum":"  114","line":"    pub fn createString(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"        return try AST.box(AST{ ._string = .{ .token = token } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  116","line":"    }"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    pub fn createIdentifier(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineCov","hits":"1","order":"1303","possible_hits":"1",},
{"lineNum":"  119","line":"        return try AST.box(AST{ .identifier = .{ .token = token } }, allocator);","class":"lineCov","hits":"1","order":"1304","possible_hits":"1",},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    pub fn createUnreachable(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"        return try AST.box(AST{ ._unreachable = .{ .token = token } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"    }"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    pub fn createUnop(token: Token, expr: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"        return try AST.box(AST{ .unop = .{ .token = token, .expr = expr } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"    }"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"    pub fn createBinop(token: Token, lhs: *AST, rhs: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  131","line":"        return try AST.box(AST{ .binop = .{ .token = token, .lhs = lhs, .rhs = rhs } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"    }"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    pub fn createCall(token: Token, lhs: *AST, rhs: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"        return try AST.box(AST{ .call = .{ .token = token, .lhs = lhs, .rhs = rhs } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"    pub fn createAddrOf(token: Token, expr: *AST, mut: bool, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"        return try AST.box(AST{ .addrOf = .{ .token = token, .expr = expr, .mut = mut } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"    }"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    pub fn createSliceOf(token: Token, expr: *AST, len: ?*AST, kind: SliceKind, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"        return try AST.box(AST{ .sliceOf = .{ .token = token, .expr = expr, .len = len, .kind = kind } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"    }"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    pub fn createNamedArg(token: Token, ident: *AST, init: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"        return try AST.box(AST{ .namedArg = .{ .token = token, .ident = ident, .init = init } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"    }"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"    pub fn createSubSlice(token: Token, super: *AST, lower: ?*AST, upper: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"        return try AST.box(AST{ .subSlice = .{ .token = token, .super = super, .lower = lower, .upper = upper } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    pub fn createAnnotation(token: Token, pattern: *AST, _type: *AST, predicate: ?*AST, init: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"        return try AST.box(AST{ .annotation = .{ .token = token, .pattern = pattern, .type = _type, .predicate = predicate, .init = init } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"    }"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"    pub fn createInferredMember(token: Token, ident: *AST, init: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"        return try AST.box(AST{ .inferredMember = .{ .token = token, .ident = ident, .init = init } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"    }"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"    pub fn createIf(token: Token, let: ?*AST, condition: *AST, bodyBlock: *AST, elseBlock: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  163","line":"        return try AST.box(AST{ ._if = .{ .token = token, .let = let, .condition = condition, .bodyBlock = bodyBlock, .elseBlock = elseBlock } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"    }"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"    pub fn createCond(token: Token, let: ?*AST, mappings: std.ArrayList(*AST), allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  167","line":"        return try AST.box(AST{ .cond = .{ .token = token, .let = let, .mappings = mappings } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"    }"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"    pub fn createCase(token: Token, let: ?*AST, expr: *AST, mappings: std.ArrayList(*AST), allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  171","line":"        return try AST.box(AST{ .case = .{ .token = token, .let = let, .expr = expr, .mappings = mappings } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"    }"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"    pub fn createMapping(token: Token, lhs: ?*AST, rhs: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"        return try AST.box(AST{ .mapping = .{ .token = token, .lhs = lhs, .rhs = rhs } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    pub fn createWhile(token: Token, let: ?*AST, condition: *AST, post: ?*AST, bodyBlock: *AST, elseBlock: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"        return try AST.box(AST{ ._while = .{ .token = token, .let = let, .condition = condition, .post = post, .bodyBlock = bodyBlock, .elseBlock = elseBlock } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"    }"},
{"lineNum":"  181","line":""},
{"lineNum":"  182","line":"    pub fn createFor(token: Token, let: ?*AST, elem: *AST, iterable: *AST, bodyBlock: *AST, elseBlock: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"        return try AST.box(AST{ ._for = .{ .token = token, .let = let, .elem = elem, .iterable = iterable, .bodyBlock = bodyBlock, .elseBlock = elseBlock } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":""},
{"lineNum":"  186","line":"    pub fn createBlock(token: Token, statements: std.ArrayList(*AST), final: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"        return try AST.box(AST{ .block = .{ .token = token, .statements = statements, .final = final } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"    }"},
{"lineNum":"  189","line":""},
{"lineNum":"  190","line":"    pub fn createBreak(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"        return try AST.box(AST{ ._break = .{ .token = token } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":""},
{"lineNum":"  194","line":"    pub fn createContinue(token: Token, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"        return try AST.box(AST{ ._break = .{ .token = token } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"    }"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"    pub fn createThrow(token: Token, expr: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"        return try AST.box(AST{ .throw = .{ .token = token, .expr = expr } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":""},
{"lineNum":"  202","line":"    pub fn createReturn(token: Token, expr: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  203","line":"        return try AST.box(AST{ ._return = .{ .token = token, .expr = expr } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":""},
{"lineNum":"  206","line":"    pub fn createDecl(token: Token, pattern: *AST, _type: ?*AST, init: ?*AST, allocator: std.mem.Allocator) !*AST {","class":"lineCov","hits":"1","order":"1481","possible_hits":"1",},
{"lineNum":"  207","line":"        return try AST.box(AST{ .decl = .{ .token = token, .pattern = pattern, .type = _type, .init = init } }, allocator);","class":"lineCov","hits":"1","order":"1482","possible_hits":"1",},
{"lineNum":"  208","line":"    }"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"    pub fn createFnDecl(token: Token, name: ?*AST, params: std.ArrayList(*AST), retType: *AST, refinement: ?*AST, init: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineCov","hits":"1","order":"1706","possible_hits":"1",},
{"lineNum":"  211","line":"        return try AST.box(AST{ .fnDecl = .{ .token = token, .name = name, .params = params, .retType = retType, .refinement = refinement, .init = init } }, allocator);","class":"lineCov","hits":"1","order":"1707","possible_hits":"1",},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    pub fn createDefer(token: Token, expr: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"        return try AST.box(AST{ ._defer = .{ .token = token, .expr = expr } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    pub fn createAssign(token: Token, lhs: *AST, rhs: *AST, allocator: std.mem.Allocator) !*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"        return try AST.box(AST{ .assign = .{ .token = token, .lhs = lhs, .rhs = rhs } }, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"    }"},
{"lineNum":"  221","line":""},
{"lineNum":"  222","line":"    pub fn serializeOptional(self: ?*AST, out: *String) Errors!void {","class":"lineCov","hits":"1","order":"1553","possible_hits":"1",},
{"lineNum":"  223","line":"        if (self) |s| {","class":"lineCov","hits":"1","order":"1554","possible_hits":"1",},
{"lineNum":"  224","line":"            try s.serialize(out);","class":"linePartCov","hits":"1","order":"1555","possible_hits":"2",},
{"lineNum":"  225","line":"        } else {"},
{"lineNum":"  226","line":"            try out.insert(\"null\", out.len());","class":"linePartCov","hits":"1","order":"1722","possible_hits":"2",},
{"lineNum":"  227","line":"        }"},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":""},
{"lineNum":"  230","line":"    pub fn serializeList(list: *const std.ArrayList(*AST), out: *String) Errors!void {","class":"lineCov","hits":"1","order":"1716","possible_hits":"1",},
{"lineNum":"  231","line":"        try out.insert(\"[\", out.len());","class":"lineCov","hits":"1","order":"1717","possible_hits":"1",},
{"lineNum":"  232","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"1718","possible_hits":"1",},
{"lineNum":"  233","line":"        while (i < list.items.len) : (i += 1) {","class":"lineCov","hits":"3","order":"1719","possible_hits":"3",},
{"lineNum":"  234","line":"            var ast = list.items[i];","class":"lineCov","hits":"2","order":"1720","possible_hits":"2",},
{"lineNum":"  235","line":"            try ast.serialize(out);","class":"lineCov","hits":"1","order":"1721","possible_hits":"1",},
{"lineNum":"  236","line":"            if (i < list.items.len - 1) {","class":"lineCov","hits":"1","order":"1723","possible_hits":"1",},
{"lineNum":"  237","line":"                try out.insert(\", \", out.len());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  238","line":"            } else {"},
{"lineNum":"  239","line":"                try out.insert(\"]\", out.len());","class":"linePartCov","hits":"1","order":"1724","possible_hits":"2",},
{"lineNum":"  240","line":"            }"},
{"lineNum":"  241","line":"        }"},
{"lineNum":"  242","line":"    }"},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"    pub fn serialize(self: AST, out: *String) !void {","class":"lineCov","hits":"1","order":"1490","possible_hits":"1",},
{"lineNum":"  245","line":"        switch (self) {","class":"lineCov","hits":"2","order":"1491","possible_hits":"2",},
{"lineNum":"  246","line":"            .unit => {}, //"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"            .int => {"},
{"lineNum":"  249","line":"                try out.insert(\"AST.int{token: \", out.len());","class":"lineCov","hits":"1","order":"1559","possible_hits":"1",},
{"lineNum":"  250","line":"                try self.int.token.serialize(out);","class":"lineCov","hits":"1","order":"1560","possible_hits":"1",},
{"lineNum":"  251","line":"                try out.insert(\", data: \", out.len());","class":"lineCov","hits":"1","order":"1561","possible_hits":"1",},
{"lineNum":"  252","line":"                try std.fmt.format(out.writer(), \"{}\", .{self.int.data});","class":"lineCov","hits":"1","order":"1562","possible_hits":"1",},
{"lineNum":"  253","line":"                try out.insert(\"}\", out.len());","class":"lineCov","hits":"1","order":"1574","possible_hits":"1",},
{"lineNum":"  254","line":"            },"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"            .char,"},
{"lineNum":"  257","line":"            .float,"},
{"lineNum":"  258","line":"            ._string,"},
{"lineNum":"  259","line":"            => {},"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"            .identifier => {"},
{"lineNum":"  262","line":"                try out.insert(\"AST.identifier{token: \", out.len());","class":"lineCov","hits":"1","order":"1548","possible_hits":"1",},
{"lineNum":"  263","line":"                try self.identifier.token.serialize(out);","class":"lineCov","hits":"1","order":"1549","possible_hits":"1",},
{"lineNum":"  264","line":"                try out.insert(\"}\", out.len());","class":"lineCov","hits":"1","order":"1550","possible_hits":"1",},
{"lineNum":"  265","line":"            },"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"            ._unreachable,"},
{"lineNum":"  268","line":"            .unop,"},
{"lineNum":"  269","line":"            .binop,"},
{"lineNum":"  270","line":"            .call,"},
{"lineNum":"  271","line":"            .addrOf,"},
{"lineNum":"  272","line":"            .sliceOf,"},
{"lineNum":"  273","line":"            .namedArg,"},
{"lineNum":"  274","line":"            .subSlice,"},
{"lineNum":"  275","line":"            .annotation,"},
{"lineNum":"  276","line":"            .inferredMember,"},
{"lineNum":"  277","line":"            ._if,"},
{"lineNum":"  278","line":"            .cond,"},
{"lineNum":"  279","line":"            .case,"},
{"lineNum":"  280","line":"            .mapping,"},
{"lineNum":"  281","line":"            ._while,"},
{"lineNum":"  282","line":"            ._for,"},
{"lineNum":"  283","line":"            .block,"},
{"lineNum":"  284","line":"            ._break,"},
{"lineNum":"  285","line":"            ._continue,"},
{"lineNum":"  286","line":"            .throw,"},
{"lineNum":"  287","line":"            ._return,"},
{"lineNum":"  288","line":"            => {},"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"            .decl => {"},
{"lineNum":"  291","line":"                try out.insert(\"AST.decl{token: \", out.len());","class":"lineCov","hits":"1","order":"1492","possible_hits":"1",},
{"lineNum":"  292","line":"                try self.decl.token.serialize(out);","class":"lineCov","hits":"1","order":"1515","possible_hits":"1",},
{"lineNum":"  293","line":"                try out.insert(\", pattern: \", out.len());","class":"lineCov","hits":"1","order":"1546","possible_hits":"1",},
{"lineNum":"  294","line":"                try self.decl.pattern.serialize(out);","class":"lineCov","hits":"1","order":"1547","possible_hits":"1",},
{"lineNum":"  295","line":"                try out.insert(\", type: \", out.len());","class":"lineCov","hits":"1","order":"1551","possible_hits":"1",},
{"lineNum":"  296","line":"                try serializeOptional(self.decl.type, out);","class":"lineCov","hits":"1","order":"1552","possible_hits":"1",},
{"lineNum":"  297","line":"                try out.insert(\", init: \", out.len());","class":"lineCov","hits":"1","order":"1556","possible_hits":"1",},
{"lineNum":"  298","line":"                try serializeOptional(self.decl.init, out);","class":"lineCov","hits":"1","order":"1558","possible_hits":"1",},
{"lineNum":"  299","line":"                try out.insert(\"}\", out.len());","class":"lineCov","hits":"1","order":"1575","possible_hits":"1",},
{"lineNum":"  300","line":"            },"},
{"lineNum":"  301","line":""},
{"lineNum":"  302","line":"            .fnDecl => {"},
{"lineNum":"  303","line":"                try out.insert(\"AST.fnDecl{token: \", out.len());","class":"lineCov","hits":"1","order":"1710","possible_hits":"1",},
{"lineNum":"  304","line":"                try self.fnDecl.token.serialize(out);","class":"lineCov","hits":"1","order":"1711","possible_hits":"1",},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"                try out.insert(\", name: \", out.len());","class":"lineCov","hits":"1","order":"1712","possible_hits":"1",},
{"lineNum":"  307","line":"                try serializeOptional(self.fnDecl.name, out);","class":"lineCov","hits":"1","order":"1713","possible_hits":"1",},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"                try out.insert(\", params: \", out.len());","class":"lineCov","hits":"1","order":"1714","possible_hits":"1",},
{"lineNum":"  310","line":"                try serializeList(&self.fnDecl.params, out);","class":"lineCov","hits":"1","order":"1715","possible_hits":"1",},
{"lineNum":"  311","line":""},
{"lineNum":"  312","line":"                try out.insert(\", retType: \", out.len());","class":"lineCov","hits":"1","order":"1725","possible_hits":"1",},
{"lineNum":"  313","line":"                try self.fnDecl.retType.serialize(out);","class":"lineCov","hits":"1","order":"1726","possible_hits":"1",},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"                try out.insert(\", refinement: \", out.len());","class":"lineCov","hits":"1","order":"1727","possible_hits":"1",},
{"lineNum":"  316","line":"                try serializeOptional(self.fnDecl.refinement, out);","class":"lineCov","hits":"1","order":"1728","possible_hits":"1",},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"                try out.insert(\", init: \", out.len());","class":"lineCov","hits":"1","order":"1729","possible_hits":"1",},
{"lineNum":"  319","line":"                try self.fnDecl.init.serialize(out);","class":"lineCov","hits":"1","order":"1730","possible_hits":"1",},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"                try out.insert(\"}\", out.len());","class":"lineCov","hits":"1","order":"1731","possible_hits":"1",},
{"lineNum":"  322","line":"            },"},
{"lineNum":"  323","line":""},
{"lineNum":"  324","line":"            ._defer,"},
{"lineNum":"  325","line":"            .assign,"},
{"lineNum":"  326","line":"            => {},"},
{"lineNum":"  327","line":"        }"},
{"lineNum":"  328","line":"    }"},
{"lineNum":"  329","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 142, "covered" : 59,};
var merged_data = [];
