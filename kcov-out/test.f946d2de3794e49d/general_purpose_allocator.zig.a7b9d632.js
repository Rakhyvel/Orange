var data = {lines:[
{"lineNum":"    1","line":"//! # General Purpose Allocator"},
{"lineNum":"    2","line":"//!"},
{"lineNum":"    3","line":"//! ## Design Priorities"},
{"lineNum":"    4","line":"//!"},
{"lineNum":"    5","line":"//! ### `OptimizationMode.debug` and `OptimizationMode.release_safe`:"},
{"lineNum":"    6","line":"//!"},
{"lineNum":"    7","line":"//!  * Detect double free, and emit stack trace of:"},
{"lineNum":"    8","line":"//!    - Where it was first allocated"},
{"lineNum":"    9","line":"//!    - Where it was freed the first time"},
{"lineNum":"   10","line":"//!    - Where it was freed the second time"},
{"lineNum":"   11","line":"//!"},
{"lineNum":"   12","line":"//!  * Detect leaks and emit stack trace of:"},
{"lineNum":"   13","line":"//!    - Where it was allocated"},
{"lineNum":"   14","line":"//!"},
{"lineNum":"   15","line":"//!  * When a page of memory is no longer needed, give it back to resident memory"},
{"lineNum":"   16","line":"//!    as soon as possible, so that it causes page faults when used."},
{"lineNum":"   17","line":"//!"},
{"lineNum":"   18","line":"//!  * Do not re-use memory slots, so that memory safety is upheld. For small"},
{"lineNum":"   19","line":"//!    allocations, this is handled here; for larger ones it is handled in the"},
{"lineNum":"   20","line":"//!    backing allocator (by default `std.heap.page_allocator`)."},
{"lineNum":"   21","line":"//!"},
{"lineNum":"   22","line":"//!  * Make pointer math errors unlikely to harm memory from"},
{"lineNum":"   23","line":"//!    unrelated allocations."},
{"lineNum":"   24","line":"//!"},
{"lineNum":"   25","line":"//!  * It\'s OK for these mechanisms to cost some extra overhead bytes."},
{"lineNum":"   26","line":"//!"},
{"lineNum":"   27","line":"//!  * It\'s OK for performance cost for these mechanisms."},
{"lineNum":"   28","line":"//!"},
{"lineNum":"   29","line":"//!  * Rogue memory writes should not harm the allocator\'s state."},
{"lineNum":"   30","line":"//!"},
{"lineNum":"   31","line":"//!  * Cross platform. Operates based on a backing allocator which makes it work"},
{"lineNum":"   32","line":"//!    everywhere, even freestanding."},
{"lineNum":"   33","line":"//!"},
{"lineNum":"   34","line":"//!  * Compile-time configuration."},
{"lineNum":"   35","line":"//!"},
{"lineNum":"   36","line":"//! ### `OptimizationMode.release_fast` (note: not much work has gone into this use case yet):"},
{"lineNum":"   37","line":"//!"},
{"lineNum":"   38","line":"//!  * Low fragmentation is primary concern"},
{"lineNum":"   39","line":"//!  * Performance of worst-case latency is secondary concern"},
{"lineNum":"   40","line":"//!  * Performance of average-case latency is next"},
{"lineNum":"   41","line":"//!  * Finally, having freed memory unmapped, and pointer math errors unlikely to"},
{"lineNum":"   42","line":"//!    harm memory from unrelated allocations are nice-to-haves."},
{"lineNum":"   43","line":"//!"},
{"lineNum":"   44","line":"//! ### `OptimizationMode.release_small` (note: not much work has gone into this use case yet):"},
{"lineNum":"   45","line":"//!"},
{"lineNum":"   46","line":"//!  * Small binary code size of the executable is the primary concern."},
{"lineNum":"   47","line":"//!  * Next, defer to the `.release_fast` priority list."},
{"lineNum":"   48","line":"//!"},
{"lineNum":"   49","line":"//! ## Basic Design:"},
{"lineNum":"   50","line":"//!"},
{"lineNum":"   51","line":"//! Small allocations are divided into buckets:"},
{"lineNum":"   52","line":"//!"},
{"lineNum":"   53","line":"//! ```"},
{"lineNum":"   54","line":"//! index obj_size"},
{"lineNum":"   55","line":"//! 0     1"},
{"lineNum":"   56","line":"//! 1     2"},
{"lineNum":"   57","line":"//! 2     4"},
{"lineNum":"   58","line":"//! 3     8"},
{"lineNum":"   59","line":"//! 4     16"},
{"lineNum":"   60","line":"//! 5     32"},
{"lineNum":"   61","line":"//! 6     64"},
{"lineNum":"   62","line":"//! 7     128"},
{"lineNum":"   63","line":"//! 8     256"},
{"lineNum":"   64","line":"//! 9     512"},
{"lineNum":"   65","line":"//! 10    1024"},
{"lineNum":"   66","line":"//! 11    2048"},
{"lineNum":"   67","line":"//! ```"},
{"lineNum":"   68","line":"//!"},
{"lineNum":"   69","line":"//! The main allocator state has an array of all the \"current\" buckets for each"},
{"lineNum":"   70","line":"//! size class. Each slot in the array can be null, meaning the bucket for that"},
{"lineNum":"   71","line":"//! size class is not allocated. When the first object is allocated for a given"},
{"lineNum":"   72","line":"//! size class, it allocates 1 page of memory from the OS. This page is"},
{"lineNum":"   73","line":"//! divided into \"slots\" - one per allocated object. Along with the page of memory"},
{"lineNum":"   74","line":"//! for object slots, as many pages as necessary are allocated to store the"},
{"lineNum":"   75","line":"//! BucketHeader, followed by \"used bits\", and two stack traces for each slot"},
{"lineNum":"   76","line":"//! (allocation trace and free trace)."},
{"lineNum":"   77","line":"//!"},
{"lineNum":"   78","line":"//! The \"used bits\" are 1 bit per slot representing whether the slot is used."},
{"lineNum":"   79","line":"//! Allocations use the data to iterate to find a free slot. Frees assert that the"},
{"lineNum":"   80","line":"//! corresponding bit is 1 and set it to 0."},
{"lineNum":"   81","line":"//!"},
{"lineNum":"   82","line":"//! Buckets have prev and next pointers. When there is only one bucket for a given"},
{"lineNum":"   83","line":"//! size class, both prev and next point to itself. When all slots of a bucket are"},
{"lineNum":"   84","line":"//! used, a new bucket is allocated, and enters the doubly linked list. The main"},
{"lineNum":"   85","line":"//! allocator state tracks the \"current\" bucket for each size class. Leak detection"},
{"lineNum":"   86","line":"//! currently only checks the current bucket."},
{"lineNum":"   87","line":"//!"},
{"lineNum":"   88","line":"//! Resizing detects if the size class is unchanged or smaller, in which case the same"},
{"lineNum":"   89","line":"//! pointer is returned unmodified. If a larger size class is required,"},
{"lineNum":"   90","line":"//! `error.OutOfMemory` is returned."},
{"lineNum":"   91","line":"//!"},
{"lineNum":"   92","line":"//! Large objects are allocated directly using the backing allocator and their metadata is stored"},
{"lineNum":"   93","line":"//! in a `std.HashMap` using the backing allocator."},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"const std = @import(\"std\");"},
{"lineNum":"   96","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"   97","line":"const log = std.log.scoped(.gpa);"},
{"lineNum":"   98","line":"const math = std.math;"},
{"lineNum":"   99","line":"const assert = std.debug.assert;"},
{"lineNum":"  100","line":"const mem = std.mem;"},
{"lineNum":"  101","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"  102","line":"const page_size = std.mem.page_size;"},
{"lineNum":"  103","line":"const StackTrace = std.builtin.StackTrace;"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"/// Integer type for pointing to slots in a small allocation"},
{"lineNum":"  106","line":"const SlotIndex = std.meta.Int(.unsigned, math.log2(page_size) + 1);"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"const default_test_stack_trace_frames: usize = if (builtin.is_test) 8 else 4;"},
{"lineNum":"  109","line":"const default_sys_stack_trace_frames: usize = if (std.debug.sys_can_stack_trace) default_test_stack_trace_frames else 0;"},
{"lineNum":"  110","line":"const default_stack_trace_frames: usize = switch (builtin.mode) {"},
{"lineNum":"  111","line":"    .Debug => default_sys_stack_trace_frames,"},
{"lineNum":"  112","line":"    else => 0,"},
{"lineNum":"  113","line":"};"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"pub const Config = struct {"},
{"lineNum":"  116","line":"    /// Number of stack frames to capture."},
{"lineNum":"  117","line":"    stack_trace_frames: usize = default_stack_trace_frames,"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    /// If true, the allocator will have two fields:"},
{"lineNum":"  120","line":"    ///  * `total_requested_bytes` which tracks the total allocated bytes of memory requested."},
{"lineNum":"  121","line":"    ///  * `requested_memory_limit` which causes allocations to return `error.OutOfMemory`"},
{"lineNum":"  122","line":"    ///    when the `total_requested_bytes` exceeds this limit."},
{"lineNum":"  123","line":"    /// If false, these fields will be `void`."},
{"lineNum":"  124","line":"    enable_memory_limit: bool = false,"},
{"lineNum":"  125","line":""},
{"lineNum":"  126","line":"    /// Whether to enable safety checks."},
{"lineNum":"  127","line":"    safety: bool = std.debug.runtime_safety,"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    /// Whether the allocator may be used simultaneously from multiple threads."},
{"lineNum":"  130","line":"    thread_safe: bool = !builtin.single_threaded,"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"    /// What type of mutex you\'d like to use, for thread safety."},
{"lineNum":"  133","line":"    /// when specfied, the mutex type must have the same shape as `std.Thread.Mutex` and"},
{"lineNum":"  134","line":"    /// `DummyMutex`, and have no required fields. Specifying this field causes"},
{"lineNum":"  135","line":"    /// the `thread_safe` field to be ignored."},
{"lineNum":"  136","line":"    ///"},
{"lineNum":"  137","line":"    /// when null (default):"},
{"lineNum":"  138","line":"    /// * the mutex type defaults to `std.Thread.Mutex` when thread_safe is enabled."},
{"lineNum":"  139","line":"    /// * the mutex type defaults to `DummyMutex` otherwise."},
{"lineNum":"  140","line":"    MutexType: ?type = null,"},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    /// This is a temporary debugging trick you can use to turn segfaults into more helpful"},
{"lineNum":"  143","line":"    /// logged error messages with stack trace details. The downside is that every allocation"},
{"lineNum":"  144","line":"    /// will be leaked, unless used with retain_metadata!"},
{"lineNum":"  145","line":"    never_unmap: bool = false,"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    /// This is a temporary debugging aid that retains metadata about allocations indefinitely."},
{"lineNum":"  148","line":"    /// This allows a greater range of double frees to be reported. All metadata is freed when"},
{"lineNum":"  149","line":"    /// deinit is called. When used with never_unmap, deliberately leaked memory is also freed"},
{"lineNum":"  150","line":"    /// during deinit. Currently should be used with never_unmap to avoid segfaults."},
{"lineNum":"  151","line":"    /// TODO https://github.com/ziglang/zig/issues/4298 will allow use without never_unmap"},
{"lineNum":"  152","line":"    retain_metadata: bool = false,"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"    /// Enables emitting info messages with the size and address of every allocation."},
{"lineNum":"  155","line":"    verbose_log: bool = false,"},
{"lineNum":"  156","line":"};"},
{"lineNum":"  157","line":""},
{"lineNum":"  158","line":"pub fn GeneralPurposeAllocator(comptime config: Config) type {"},
{"lineNum":"  159","line":"    return struct {"},
{"lineNum":"  160","line":"        backing_allocator: Allocator = std.heap.page_allocator,"},
{"lineNum":"  161","line":"        buckets: [small_bucket_count]?*BucketHeader = [1]?*BucketHeader{null} ** small_bucket_count,"},
{"lineNum":"  162","line":"        large_allocations: LargeAllocTable = .{},"},
{"lineNum":"  163","line":"        small_allocations: if (config.safety) SmallAllocTable else void = if (config.safety) .{} else {},"},
{"lineNum":"  164","line":"        empty_buckets: if (config.retain_metadata) ?*BucketHeader else void ="},
{"lineNum":"  165","line":"            if (config.retain_metadata) null else {},"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"        total_requested_bytes: @TypeOf(total_requested_bytes_init) = total_requested_bytes_init,"},
{"lineNum":"  168","line":"        requested_memory_limit: @TypeOf(requested_memory_limit_init) = requested_memory_limit_init,"},
{"lineNum":"  169","line":""},
{"lineNum":"  170","line":"        mutex: @TypeOf(mutex_init) = mutex_init,"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        const Self = @This();"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"        const total_requested_bytes_init = if (config.enable_memory_limit) @as(usize, 0) else {};"},
{"lineNum":"  175","line":"        const requested_memory_limit_init = if (config.enable_memory_limit) @as(usize, math.maxInt(usize)) else {};"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"        const mutex_init = if (config.MutexType) |T|"},
{"lineNum":"  178","line":"            T{}"},
{"lineNum":"  179","line":"        else if (config.thread_safe)"},
{"lineNum":"  180","line":"            std.Thread.Mutex{}"},
{"lineNum":"  181","line":"        else"},
{"lineNum":"  182","line":"            DummyMutex{};"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"        const DummyMutex = struct {"},
{"lineNum":"  185","line":"            fn lock(_: *DummyMutex) void {}"},
{"lineNum":"  186","line":"            fn unlock(_: *DummyMutex) void {}"},
{"lineNum":"  187","line":"        };"},
{"lineNum":"  188","line":""},
{"lineNum":"  189","line":"        const stack_n = config.stack_trace_frames;"},
{"lineNum":"  190","line":"        const one_trace_size = @sizeOf(usize) * stack_n;"},
{"lineNum":"  191","line":"        const traces_per_slot = 2;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"        pub const Error = mem.Allocator.Error;"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"        const small_bucket_count = math.log2(page_size);"},
{"lineNum":"  196","line":"        const largest_bucket_object_size = 1 << (small_bucket_count - 1);"},
{"lineNum":"  197","line":""},
{"lineNum":"  198","line":"        const SmallAlloc = struct {"},
{"lineNum":"  199","line":"            requested_size: usize,"},
{"lineNum":"  200","line":"            log2_ptr_align: u8,"},
{"lineNum":"  201","line":"        };"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"        const LargeAlloc = struct {"},
{"lineNum":"  204","line":"            bytes: []u8,"},
{"lineNum":"  205","line":"            requested_size: if (config.enable_memory_limit) usize else void,"},
{"lineNum":"  206","line":"            stack_addresses: [trace_n][stack_n]usize,"},
{"lineNum":"  207","line":"            freed: if (config.retain_metadata) bool else void,"},
{"lineNum":"  208","line":"            log2_ptr_align: if (config.never_unmap and config.retain_metadata) u8 else void,"},
{"lineNum":"  209","line":""},
{"lineNum":"  210","line":"            const trace_n = if (config.retain_metadata) traces_per_slot else 1;"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"            fn dumpStackTrace(self: *LargeAlloc, trace_kind: TraceKind) void {"},
{"lineNum":"  213","line":"                std.debug.dumpStackTrace(self.getStackTrace(trace_kind));"},
{"lineNum":"  214","line":"            }"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"            fn getStackTrace(self: *LargeAlloc, trace_kind: TraceKind) std.builtin.StackTrace {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                assert(@enumToInt(trace_kind) < trace_n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"                const stack_addresses = &self.stack_addresses[@enumToInt(trace_kind)];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"                var len: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"                while (len < stack_n and stack_addresses[len] != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"                    len += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"                }"},
{"lineNum":"  223","line":"                return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"                    .instruction_addresses = stack_addresses,"},
{"lineNum":"  225","line":"                    .index = len,"},
{"lineNum":"  226","line":"                };"},
{"lineNum":"  227","line":"            }"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"            fn captureStackTrace(self: *LargeAlloc, ret_addr: usize, trace_kind: TraceKind) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"                assert(@enumToInt(trace_kind) < trace_n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  231","line":"                const stack_addresses = &self.stack_addresses[@enumToInt(trace_kind)];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"                collectStackTrace(ret_addr, stack_addresses);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"            }"},
{"lineNum":"  234","line":"        };"},
{"lineNum":"  235","line":"        const LargeAllocTable = std.AutoHashMapUnmanaged(usize, LargeAlloc);"},
{"lineNum":"  236","line":"        const SmallAllocTable = std.AutoHashMapUnmanaged(usize, SmallAlloc);"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"        // Bucket: In memory, in order:"},
{"lineNum":"  239","line":"        // * BucketHeader"},
{"lineNum":"  240","line":"        // * bucket_used_bits: [N]u8, // 1 bit for every slot; 1 byte for every 8 slots"},
{"lineNum":"  241","line":"        // * stack_trace_addresses: [N]usize, // traces_per_slot for every allocation"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"        const BucketHeader = struct {"},
{"lineNum":"  244","line":"            prev: *BucketHeader,"},
{"lineNum":"  245","line":"            next: *BucketHeader,"},
{"lineNum":"  246","line":"            page: [*]align(page_size) u8,"},
{"lineNum":"  247","line":"            alloc_cursor: SlotIndex,"},
{"lineNum":"  248","line":"            used_count: SlotIndex,"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"            fn usedBits(bucket: *BucketHeader, index: usize) *u8 {","class":"lineCov","hits":"1","order":"896","possible_hits":"1",},
{"lineNum":"  251","line":"                return @intToPtr(*u8, @ptrToInt(bucket) + @sizeOf(BucketHeader) + index);","class":"lineCov","hits":"1","order":"897","possible_hits":"1",},
{"lineNum":"  252","line":"            }"},
{"lineNum":"  253","line":""},
{"lineNum":"  254","line":"            fn stackTracePtr("},
{"lineNum":"  255","line":"                bucket: *BucketHeader,"},
{"lineNum":"  256","line":"                size_class: usize,"},
{"lineNum":"  257","line":"                slot_index: SlotIndex,"},
{"lineNum":"  258","line":"                trace_kind: TraceKind,"},
{"lineNum":"  259","line":"            ) *[stack_n]usize {","class":"lineCov","hits":"1","order":"913","possible_hits":"1",},
{"lineNum":"  260","line":"                const start_ptr = @ptrCast([*]u8, bucket) + bucketStackFramesStart(size_class);","class":"lineCov","hits":"1","order":"914","possible_hits":"1",},
{"lineNum":"  261","line":"                const addr = start_ptr + one_trace_size * traces_per_slot * slot_index +","class":"lineCov","hits":"2","order":"915","possible_hits":"2",},
{"lineNum":"  262","line":"                    @enumToInt(trace_kind) * @as(usize, one_trace_size);","class":"lineCov","hits":"1","order":"916","possible_hits":"1",},
{"lineNum":"  263","line":"                return @ptrCast(*[stack_n]usize, @alignCast(@alignOf(usize), addr));","class":"lineCov","hits":"1","order":"917","possible_hits":"1",},
{"lineNum":"  264","line":"            }"},
{"lineNum":"  265","line":""},
{"lineNum":"  266","line":"            fn captureStackTrace("},
{"lineNum":"  267","line":"                bucket: *BucketHeader,"},
{"lineNum":"  268","line":"                ret_addr: usize,"},
{"lineNum":"  269","line":"                size_class: usize,"},
{"lineNum":"  270","line":"                slot_index: SlotIndex,"},
{"lineNum":"  271","line":"                trace_kind: TraceKind,"},
{"lineNum":"  272","line":"            ) void {","class":"lineCov","hits":"1","order":"911","possible_hits":"1",},
{"lineNum":"  273","line":"                // Initialize them to 0. When determining the count we must look"},
{"lineNum":"  274","line":"                // for non zero addresses."},
{"lineNum":"  275","line":"                const stack_addresses = bucket.stackTracePtr(size_class, slot_index, trace_kind);","class":"lineCov","hits":"1","order":"912","possible_hits":"1",},
{"lineNum":"  276","line":"                collectStackTrace(ret_addr, stack_addresses);","class":"lineCov","hits":"1","order":"918","possible_hits":"1",},
{"lineNum":"  277","line":"            }"},
{"lineNum":"  278","line":"        };"},
{"lineNum":"  279","line":""},
{"lineNum":"  280","line":"        pub fn allocator(self: *Self) Allocator {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  281","line":"            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"                .ptr = self,"},
{"lineNum":"  283","line":"                .vtable = &.{"},
{"lineNum":"  284","line":"                    .alloc = alloc,"},
{"lineNum":"  285","line":"                    .resize = resize,"},
{"lineNum":"  286","line":"                    .free = free,"},
{"lineNum":"  287","line":"                },"},
{"lineNum":"  288","line":"            };"},
{"lineNum":"  289","line":"        }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"        fn bucketStackTrace("},
{"lineNum":"  292","line":"            bucket: *BucketHeader,"},
{"lineNum":"  293","line":"            size_class: usize,"},
{"lineNum":"  294","line":"            slot_index: SlotIndex,"},
{"lineNum":"  295","line":"            trace_kind: TraceKind,"},
{"lineNum":"  296","line":"        ) StackTrace {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"            const stack_addresses = bucket.stackTracePtr(size_class, slot_index, trace_kind);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"            var len: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"            while (len < stack_n and stack_addresses[len] != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"                len += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"            }"},
{"lineNum":"  302","line":"            return StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"                .instruction_addresses = stack_addresses,"},
{"lineNum":"  304","line":"                .index = len,"},
{"lineNum":"  305","line":"            };"},
{"lineNum":"  306","line":"        }"},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"        fn bucketStackFramesStart(size_class: usize) usize {","class":"lineCov","hits":"1","order":"883","possible_hits":"1",},
{"lineNum":"  309","line":"            return mem.alignForward(","class":"lineCov","hits":"1","order":"889","possible_hits":"1",},
{"lineNum":"  310","line":"                @sizeOf(BucketHeader) + usedBitsCount(size_class),","class":"lineCov","hits":"1","order":"884","possible_hits":"1",},
{"lineNum":"  311","line":"                @alignOf(usize),"},
{"lineNum":"  312","line":"            );"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"        fn bucketSize(size_class: usize) usize {","class":"lineCov","hits":"1","order":"880","possible_hits":"1",},
{"lineNum":"  316","line":"            const slot_count = @divExact(page_size, size_class);","class":"lineCov","hits":"1","order":"881","possible_hits":"1",},
{"lineNum":"  317","line":"            return bucketStackFramesStart(size_class) + one_trace_size * traces_per_slot * slot_count;","class":"lineCov","hits":"1","order":"882","possible_hits":"1",},
{"lineNum":"  318","line":"        }"},
{"lineNum":"  319","line":""},
{"lineNum":"  320","line":"        fn usedBitsCount(size_class: usize) usize {","class":"lineCov","hits":"1","order":"885","possible_hits":"1",},
{"lineNum":"  321","line":"            const slot_count = @divExact(page_size, size_class);","class":"lineCov","hits":"1","order":"886","possible_hits":"1",},
{"lineNum":"  322","line":"            if (slot_count < 8) return 1;","class":"lineCov","hits":"1","order":"887","possible_hits":"1",},
{"lineNum":"  323","line":"            return @divExact(slot_count, 8);","class":"lineCov","hits":"1","order":"888","possible_hits":"1",},
{"lineNum":"  324","line":"        }"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"        fn detectLeaksInBucket("},
{"lineNum":"  327","line":"            bucket: *BucketHeader,"},
{"lineNum":"  328","line":"            size_class: usize,"},
{"lineNum":"  329","line":"            used_bits_count: usize,"},
{"lineNum":"  330","line":"        ) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"            var leaks = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  332","line":"            var used_bits_byte: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  333","line":"            while (used_bits_byte < used_bits_count) : (used_bits_byte += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  334","line":"                const used_byte = bucket.usedBits(used_bits_byte).*;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"                if (used_byte != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  336","line":"                    var bit_index: u3 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  337","line":"                    while (true) : (bit_index += 1) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  338","line":"                        const is_used = @truncate(u1, used_byte >> bit_index) != 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"                        if (is_used) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  340","line":"                            const slot_index = @intCast(SlotIndex, used_bits_byte * 8 + bit_index);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  341","line":"                            const stack_trace = bucketStackTrace(bucket, size_class, slot_index, .alloc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"                            const addr = bucket.page + slot_index * size_class;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  343","line":"                            log.err(\"memory address 0x{x} leaked: {}\", .{"},
{"lineNum":"  344","line":"                                @ptrToInt(addr), stack_trace,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  345","line":"                            });"},
{"lineNum":"  346","line":"                            leaks = true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  347","line":"                        }"},
{"lineNum":"  348","line":"                        if (bit_index == math.maxInt(u3))","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  349","line":"                            break;"},
{"lineNum":"  350","line":"                    }"},
{"lineNum":"  351","line":"                }"},
{"lineNum":"  352","line":"            }"},
{"lineNum":"  353","line":"            return leaks;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"        }"},
{"lineNum":"  355","line":""},
{"lineNum":"  356","line":"        /// Emits log messages for leaks and then returns whether there were any leaks."},
{"lineNum":"  357","line":"        pub fn detectLeaks(self: *Self) bool {","class":"lineCov","hits":"1","order":"1627","possible_hits":"1",},
{"lineNum":"  358","line":"            var leaks = false;","class":"lineCov","hits":"1","order":"1628","possible_hits":"1",},
{"lineNum":"  359","line":"            for (self.buckets, 0..) |optional_bucket, bucket_i| {","class":"lineCov","hits":"1","order":"1629","possible_hits":"1",},
{"lineNum":"  360","line":"                const first_bucket = optional_bucket orelse continue;","class":"linePartCov","hits":"1","order":"1630","possible_hits":"2",},
{"lineNum":"  361","line":"                const size_class = @as(usize, 1) << @intCast(math.Log2Int(usize), bucket_i);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"                const used_bits_count = usedBitsCount(size_class);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"                var bucket = first_bucket;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"                while (true) {"},
{"lineNum":"  365","line":"                    leaks = detectLeaksInBucket(bucket, size_class, used_bits_count) or leaks;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"                    bucket = bucket.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"                    if (bucket == first_bucket)","class":"linePartCov","hits":"1","order":"1631","possible_hits":"2",},
{"lineNum":"  368","line":"                        break;"},
{"lineNum":"  369","line":"                }"},
{"lineNum":"  370","line":"            }"},
{"lineNum":"  371","line":"            var it = self.large_allocations.valueIterator();","class":"lineCov","hits":"1","order":"1632","possible_hits":"1",},
{"lineNum":"  372","line":"            while (it.next()) |large_alloc| {","class":"lineCov","hits":"1","order":"1636","possible_hits":"1",},
{"lineNum":"  373","line":"                if (config.retain_metadata and large_alloc.freed) continue;"},
{"lineNum":"  374","line":"                const stack_trace = large_alloc.getStackTrace(.alloc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  375","line":"                log.err(\"memory address 0x{x} leaked: {}\", .{"},
{"lineNum":"  376","line":"                    @ptrToInt(large_alloc.bytes.ptr), stack_trace,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"                });"},
{"lineNum":"  378","line":"                leaks = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  379","line":"            }"},
{"lineNum":"  380","line":"            return leaks;","class":"lineCov","hits":"1","order":"1641","possible_hits":"1",},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"        fn freeBucket(self: *Self, bucket: *BucketHeader, size_class: usize) void {","class":"lineCov","hits":"1","order":"1197","possible_hits":"1",},
{"lineNum":"  384","line":"            const bucket_size = bucketSize(size_class);","class":"lineCov","hits":"1","order":"1198","possible_hits":"1",},
{"lineNum":"  385","line":"            const bucket_slice = @ptrCast([*]align(@alignOf(BucketHeader)) u8, bucket)[0..bucket_size];","class":"lineCov","hits":"1","order":"1199","possible_hits":"1",},
{"lineNum":"  386","line":"            self.backing_allocator.free(bucket_slice);","class":"lineCov","hits":"1","order":"1200","possible_hits":"1",},
{"lineNum":"  387","line":"        }"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"        fn freeRetainedMetadata(self: *Self) void {"},
{"lineNum":"  390","line":"            if (config.retain_metadata) {"},
{"lineNum":"  391","line":"                if (config.never_unmap) {"},
{"lineNum":"  392","line":"                    // free large allocations that were intentionally leaked by never_unmap"},
{"lineNum":"  393","line":"                    var it = self.large_allocations.iterator();"},
{"lineNum":"  394","line":"                    while (it.next()) |large| {"},
{"lineNum":"  395","line":"                        if (large.value_ptr.freed) {"},
{"lineNum":"  396","line":"                            self.backing_allocator.rawFree(large.value_ptr.bytes, large.value_ptr.log2_ptr_align, @returnAddress());"},
{"lineNum":"  397","line":"                        }"},
{"lineNum":"  398","line":"                    }"},
{"lineNum":"  399","line":"                }"},
{"lineNum":"  400","line":"                // free retained metadata for small allocations"},
{"lineNum":"  401","line":"                if (self.empty_buckets) |first_bucket| {"},
{"lineNum":"  402","line":"                    var bucket = first_bucket;"},
{"lineNum":"  403","line":"                    while (true) {"},
{"lineNum":"  404","line":"                        const prev = bucket.prev;"},
{"lineNum":"  405","line":"                        if (config.never_unmap) {"},
{"lineNum":"  406","line":"                            // free page that was intentionally leaked by never_unmap"},
{"lineNum":"  407","line":"                            self.backing_allocator.free(bucket.page[0..page_size]);"},
{"lineNum":"  408","line":"                        }"},
{"lineNum":"  409","line":"                        // alloc_cursor was set to slot count when bucket added to empty_buckets"},
{"lineNum":"  410","line":"                        self.freeBucket(bucket, @divExact(page_size, bucket.alloc_cursor));"},
{"lineNum":"  411","line":"                        bucket = prev;"},
{"lineNum":"  412","line":"                        if (bucket == first_bucket)"},
{"lineNum":"  413","line":"                            break;"},
{"lineNum":"  414","line":"                    }"},
{"lineNum":"  415","line":"                    self.empty_buckets = null;"},
{"lineNum":"  416","line":"                }"},
{"lineNum":"  417","line":"            }"},
{"lineNum":"  418","line":"        }"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"        pub usingnamespace if (config.retain_metadata) struct {"},
{"lineNum":"  421","line":"            pub fn flushRetainedMetadata(self: *Self) void {"},
{"lineNum":"  422","line":"                self.freeRetainedMetadata();"},
{"lineNum":"  423","line":"                // also remove entries from large_allocations"},
{"lineNum":"  424","line":"                var it = self.large_allocations.iterator();"},
{"lineNum":"  425","line":"                while (it.next()) |large| {"},
{"lineNum":"  426","line":"                    if (large.value_ptr.freed) {"},
{"lineNum":"  427","line":"                        _ = self.large_allocations.remove(@ptrToInt(large.value_ptr.bytes.ptr));"},
{"lineNum":"  428","line":"                    }"},
{"lineNum":"  429","line":"                }"},
{"lineNum":"  430","line":"            }"},
{"lineNum":"  431","line":"        } else struct {};"},
{"lineNum":"  432","line":""},
{"lineNum":"  433","line":"        /// Returns true if there were leaks; false otherwise."},
{"lineNum":"  434","line":"        pub fn deinit(self: *Self) bool {","class":"lineCov","hits":"1","order":"1625","possible_hits":"1",},
{"lineNum":"  435","line":"            const leaks = if (config.safety) self.detectLeaks() else false;","class":"lineCov","hits":"1","order":"1626","possible_hits":"1",},
{"lineNum":"  436","line":"            if (config.retain_metadata) {"},
{"lineNum":"  437","line":"                self.freeRetainedMetadata();"},
{"lineNum":"  438","line":"            }"},
{"lineNum":"  439","line":"            self.large_allocations.deinit(self.backing_allocator);","class":"lineCov","hits":"1","order":"1642","possible_hits":"1",},
{"lineNum":"  440","line":"            if (config.safety) {"},
{"lineNum":"  441","line":"                self.small_allocations.deinit(self.backing_allocator);","class":"lineCov","hits":"1","order":"1643","possible_hits":"1",},
{"lineNum":"  442","line":"            }"},
{"lineNum":"  443","line":"            self.* = undefined;","class":"lineCov","hits":"1","order":"1655","possible_hits":"1",},
{"lineNum":"  444","line":"            return leaks;","class":"lineCov","hits":"1","order":"1656","possible_hits":"1",},
{"lineNum":"  445","line":"        }"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"        fn collectStackTrace(first_trace_addr: usize, addresses: *[stack_n]usize) void {","class":"lineCov","hits":"1","order":"919","possible_hits":"1",},
{"lineNum":"  448","line":"            if (stack_n == 0) return;"},
{"lineNum":"  449","line":"            mem.set(usize, addresses, 0);","class":"lineCov","hits":"1","order":"920","possible_hits":"1",},
{"lineNum":"  450","line":"            var stack_trace = StackTrace{","class":"lineCov","hits":"1","order":"921","possible_hits":"1",},
{"lineNum":"  451","line":"                .instruction_addresses = addresses,"},
{"lineNum":"  452","line":"                .index = 0,"},
{"lineNum":"  453","line":"            };"},
{"lineNum":"  454","line":"            std.debug.captureStackTrace(first_trace_addr, &stack_trace);","class":"lineCov","hits":"1","order":"922","possible_hits":"1",},
{"lineNum":"  455","line":"        }"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"        fn reportDoubleFree(ret_addr: usize, alloc_stack_trace: StackTrace, free_stack_trace: StackTrace) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"            var addresses: [stack_n]usize = [1]usize{0} ** stack_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"            var second_free_stack_trace = StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"                .instruction_addresses = &addresses,"},
{"lineNum":"  461","line":"                .index = 0,"},
{"lineNum":"  462","line":"            };"},
{"lineNum":"  463","line":"            std.debug.captureStackTrace(ret_addr, &second_free_stack_trace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  464","line":"            log.err(\"Double free detected. Allocation: {} First free: {} Second free: {}\", .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  465","line":"                alloc_stack_trace, free_stack_trace, second_free_stack_trace,"},
{"lineNum":"  466","line":"            });"},
{"lineNum":"  467","line":"        }"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        fn allocSlot(self: *Self, size_class: usize, trace_addr: usize) Error![*]u8 {","class":"lineCov","hits":"1","order":"872","possible_hits":"1",},
{"lineNum":"  470","line":"            const bucket_index = math.log2(size_class);","class":"lineCov","hits":"1","order":"873","possible_hits":"1",},
{"lineNum":"  471","line":"            const first_bucket = self.buckets[bucket_index] orelse try self.createBucket(","class":"lineCov","hits":"1","order":"876","possible_hits":"1",},
{"lineNum":"  472","line":"                size_class,"},
{"lineNum":"  473","line":"                bucket_index,"},
{"lineNum":"  474","line":"            );"},
{"lineNum":"  475","line":"            var bucket = first_bucket;","class":"lineCov","hits":"1","order":"899","possible_hits":"1",},
{"lineNum":"  476","line":"            const slot_count = @divExact(page_size, size_class);","class":"lineCov","hits":"1","order":"900","possible_hits":"1",},
{"lineNum":"  477","line":"            while (bucket.alloc_cursor == slot_count) {","class":"lineCov","hits":"1","order":"901","possible_hits":"1",},
{"lineNum":"  478","line":"                const prev_bucket = bucket;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"                bucket = prev_bucket.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"                if (bucket == first_bucket) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  481","line":"                    // make a new one"},
{"lineNum":"  482","line":"                    bucket = try self.createBucket(size_class, bucket_index);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  483","line":"                    bucket.prev = prev_bucket;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"                    bucket.next = prev_bucket.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  485","line":"                    prev_bucket.next = bucket;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  486","line":"                    bucket.next.prev = bucket;","class":"linePartCov","hits":"1","order":"902","possible_hits":"3",},
{"lineNum":"  487","line":"                }"},
{"lineNum":"  488","line":"            }"},
{"lineNum":"  489","line":"            // change the allocator\'s current bucket to be this one"},
{"lineNum":"  490","line":"            self.buckets[bucket_index] = bucket;","class":"lineCov","hits":"1","order":"903","possible_hits":"1",},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"            const slot_index = bucket.alloc_cursor;","class":"lineCov","hits":"1","order":"904","possible_hits":"1",},
{"lineNum":"  493","line":"            bucket.alloc_cursor += 1;","class":"lineCov","hits":"1","order":"905","possible_hits":"1",},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"            var used_bits_byte = bucket.usedBits(slot_index / 8);","class":"lineCov","hits":"1","order":"906","possible_hits":"1",},
{"lineNum":"  496","line":"            const used_bit_index: u3 = @intCast(u3, slot_index % 8); // TODO cast should be unnecessary","class":"lineCov","hits":"1","order":"907","possible_hits":"1",},
{"lineNum":"  497","line":"            used_bits_byte.* |= (@as(u8, 1) << used_bit_index);","class":"lineCov","hits":"1","order":"908","possible_hits":"1",},
{"lineNum":"  498","line":"            bucket.used_count += 1;","class":"lineCov","hits":"1","order":"909","possible_hits":"1",},
{"lineNum":"  499","line":"            bucket.captureStackTrace(trace_addr, size_class, slot_index, .alloc);","class":"lineCov","hits":"1","order":"910","possible_hits":"1",},
{"lineNum":"  500","line":"            return bucket.page + slot_index * size_class;","class":"lineCov","hits":"1","order":"960","possible_hits":"1",},
{"lineNum":"  501","line":"        }"},
{"lineNum":"  502","line":""},
{"lineNum":"  503","line":"        fn searchBucket("},
{"lineNum":"  504","line":"            bucket_list: ?*BucketHeader,"},
{"lineNum":"  505","line":"            addr: usize,"},
{"lineNum":"  506","line":"        ) ?*BucketHeader {","class":"lineCov","hits":"1","order":"1105","possible_hits":"1",},
{"lineNum":"  507","line":"            const first_bucket = bucket_list orelse return null;","class":"lineCov","hits":"1","order":"1106","possible_hits":"1",},
{"lineNum":"  508","line":"            var bucket = first_bucket;","class":"lineCov","hits":"1","order":"1107","possible_hits":"1",},
{"lineNum":"  509","line":"            while (true) {"},
{"lineNum":"  510","line":"                const in_bucket_range = (addr >= @ptrToInt(bucket.page) and","class":"lineCov","hits":"1","order":"1108","possible_hits":"1",},
{"lineNum":"  511","line":"                    addr < @ptrToInt(bucket.page) + page_size);","class":"lineCov","hits":"1","order":"1109","possible_hits":"1",},
{"lineNum":"  512","line":"                if (in_bucket_range) return bucket;","class":"lineCov","hits":"1","order":"1110","possible_hits":"1",},
{"lineNum":"  513","line":"                bucket = bucket.prev;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  514","line":"                if (bucket == first_bucket) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"                    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"                }"},
{"lineNum":"  517","line":"            }"},
{"lineNum":"  518","line":"        }"},
{"lineNum":"  519","line":""},
{"lineNum":"  520","line":"        /// This function assumes the object is in the large object storage regardless"},
{"lineNum":"  521","line":"        /// of the parameters."},
{"lineNum":"  522","line":"        fn resizeLarge("},
{"lineNum":"  523","line":"            self: *Self,"},
{"lineNum":"  524","line":"            old_mem: []u8,"},
{"lineNum":"  525","line":"            log2_old_align: u8,"},
{"lineNum":"  526","line":"            new_size: usize,"},
{"lineNum":"  527","line":"            ret_addr: usize,"},
{"lineNum":"  528","line":"        ) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  529","line":"            const entry = self.large_allocations.getEntry(@ptrToInt(old_mem.ptr)) orelse {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  530","line":"                if (config.safety) {"},
{"lineNum":"  531","line":"                    @panic(\"Invalid free\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  532","line":"                } else {"},
{"lineNum":"  533","line":"                    unreachable;"},
{"lineNum":"  534","line":"                }"},
{"lineNum":"  535","line":"            };"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"            if (config.retain_metadata and entry.value_ptr.freed) {"},
{"lineNum":"  538","line":"                if (config.safety) {"},
{"lineNum":"  539","line":"                    reportDoubleFree(ret_addr, entry.value_ptr.getStackTrace(.alloc), entry.value_ptr.getStackTrace(.free));"},
{"lineNum":"  540","line":"                    @panic(\"Unrecoverable double free\");"},
{"lineNum":"  541","line":"                } else {"},
{"lineNum":"  542","line":"                    unreachable;"},
{"lineNum":"  543","line":"                }"},
{"lineNum":"  544","line":"            }"},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"            if (config.safety and old_mem.len != entry.value_ptr.bytes.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  547","line":"                var addresses: [stack_n]usize = [1]usize{0} ** stack_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  548","line":"                var free_stack_trace = StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  549","line":"                    .instruction_addresses = &addresses,"},
{"lineNum":"  550","line":"                    .index = 0,"},
{"lineNum":"  551","line":"                };"},
{"lineNum":"  552","line":"                std.debug.captureStackTrace(ret_addr, &free_stack_trace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"                log.err(\"Allocation size {d} bytes does not match free size {d}. Allocation: {} Free: {}\", .{"},
{"lineNum":"  554","line":"                    entry.value_ptr.bytes.len,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  555","line":"                    old_mem.len,"},
{"lineNum":"  556","line":"                    entry.value_ptr.getStackTrace(.alloc),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"                    free_stack_trace,"},
{"lineNum":"  558","line":"                });"},
{"lineNum":"  559","line":"            }"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"            // Do memory limit accounting with requested sizes rather than what"},
{"lineNum":"  562","line":"            // backing_allocator returns because if we want to return"},
{"lineNum":"  563","line":"            // error.OutOfMemory, we have to leave allocation untouched, and"},
{"lineNum":"  564","line":"            // that is impossible to guarantee after calling"},
{"lineNum":"  565","line":"            // backing_allocator.rawResize."},
{"lineNum":"  566","line":"            const prev_req_bytes = self.total_requested_bytes;"},
{"lineNum":"  567","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  568","line":"                const new_req_bytes = prev_req_bytes + new_size - entry.value_ptr.requested_size;"},
{"lineNum":"  569","line":"                if (new_req_bytes > prev_req_bytes and new_req_bytes > self.requested_memory_limit) {"},
{"lineNum":"  570","line":"                    return false;"},
{"lineNum":"  571","line":"                }"},
{"lineNum":"  572","line":"                self.total_requested_bytes = new_req_bytes;"},
{"lineNum":"  573","line":"            }"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"            if (!self.backing_allocator.rawResize(old_mem, log2_old_align, new_size, ret_addr)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  576","line":"                if (config.enable_memory_limit) {"},
{"lineNum":"  577","line":"                    self.total_requested_bytes = prev_req_bytes;"},
{"lineNum":"  578","line":"                }"},
{"lineNum":"  579","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":"            }"},
{"lineNum":"  581","line":""},
{"lineNum":"  582","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  583","line":"                entry.value_ptr.requested_size = new_size;"},
{"lineNum":"  584","line":"            }"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"            if (config.verbose_log) {"},
{"lineNum":"  587","line":"                log.info(\"large resize {d} bytes at {*} to {d}\", .{"},
{"lineNum":"  588","line":"                    old_mem.len, old_mem.ptr, new_size,"},
{"lineNum":"  589","line":"                });"},
{"lineNum":"  590","line":"            }"},
{"lineNum":"  591","line":"            entry.value_ptr.bytes = old_mem.ptr[0..new_size];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"            entry.value_ptr.captureStackTrace(ret_addr, .alloc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"            return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  594","line":"        }"},
{"lineNum":"  595","line":""},
{"lineNum":"  596","line":"        /// This function assumes the object is in the large object storage regardless"},
{"lineNum":"  597","line":"        /// of the parameters."},
{"lineNum":"  598","line":"        fn freeLarge("},
{"lineNum":"  599","line":"            self: *Self,"},
{"lineNum":"  600","line":"            old_mem: []u8,"},
{"lineNum":"  601","line":"            log2_old_align: u8,"},
{"lineNum":"  602","line":"            ret_addr: usize,"},
{"lineNum":"  603","line":"        ) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"            const entry = self.large_allocations.getEntry(@ptrToInt(old_mem.ptr)) orelse {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  605","line":"                if (config.safety) {"},
{"lineNum":"  606","line":"                    @panic(\"Invalid free\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  607","line":"                } else {"},
{"lineNum":"  608","line":"                    unreachable;"},
{"lineNum":"  609","line":"                }"},
{"lineNum":"  610","line":"            };"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"            if (config.retain_metadata and entry.value_ptr.freed) {"},
{"lineNum":"  613","line":"                if (config.safety) {"},
{"lineNum":"  614","line":"                    reportDoubleFree(ret_addr, entry.value_ptr.getStackTrace(.alloc), entry.value_ptr.getStackTrace(.free));"},
{"lineNum":"  615","line":"                    return;"},
{"lineNum":"  616","line":"                } else {"},
{"lineNum":"  617","line":"                    unreachable;"},
{"lineNum":"  618","line":"                }"},
{"lineNum":"  619","line":"            }"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"            if (config.safety and old_mem.len != entry.value_ptr.bytes.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  622","line":"                var addresses: [stack_n]usize = [1]usize{0} ** stack_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  623","line":"                var free_stack_trace = StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  624","line":"                    .instruction_addresses = &addresses,"},
{"lineNum":"  625","line":"                    .index = 0,"},
{"lineNum":"  626","line":"                };"},
{"lineNum":"  627","line":"                std.debug.captureStackTrace(ret_addr, &free_stack_trace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  628","line":"                log.err(\"Allocation size {d} bytes does not match free size {d}. Allocation: {} Free: {}\", .{"},
{"lineNum":"  629","line":"                    entry.value_ptr.bytes.len,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  630","line":"                    old_mem.len,"},
{"lineNum":"  631","line":"                    entry.value_ptr.getStackTrace(.alloc),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"                    free_stack_trace,"},
{"lineNum":"  633","line":"                });"},
{"lineNum":"  634","line":"            }"},
{"lineNum":"  635","line":""},
{"lineNum":"  636","line":"            if (!config.never_unmap) {"},
{"lineNum":"  637","line":"                self.backing_allocator.rawFree(old_mem, log2_old_align, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  638","line":"            }"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  641","line":"                self.total_requested_bytes -= entry.value_ptr.requested_size;"},
{"lineNum":"  642","line":"            }"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"            if (config.verbose_log) {"},
{"lineNum":"  645","line":"                log.info(\"large free {d} bytes at {*}\", .{ old_mem.len, old_mem.ptr });"},
{"lineNum":"  646","line":"            }"},
{"lineNum":"  647","line":""},
{"lineNum":"  648","line":"            if (!config.retain_metadata) {"},
{"lineNum":"  649","line":"                assert(self.large_allocations.remove(@ptrToInt(old_mem.ptr)));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  650","line":"            } else {"},
{"lineNum":"  651","line":"                entry.value_ptr.freed = true;"},
{"lineNum":"  652","line":"                entry.value_ptr.captureStackTrace(ret_addr, .free);"},
{"lineNum":"  653","line":"            }"},
{"lineNum":"  654","line":"        }"},
{"lineNum":"  655","line":""},
{"lineNum":"  656","line":"        pub fn setRequestedMemoryLimit(self: *Self, limit: usize) void {"},
{"lineNum":"  657","line":"            self.requested_memory_limit = limit;"},
{"lineNum":"  658","line":"        }"},
{"lineNum":"  659","line":""},
{"lineNum":"  660","line":"        fn resize("},
{"lineNum":"  661","line":"            ctx: *anyopaque,"},
{"lineNum":"  662","line":"            old_mem: []u8,"},
{"lineNum":"  663","line":"            log2_old_align_u8: u8,"},
{"lineNum":"  664","line":"            new_size: usize,"},
{"lineNum":"  665","line":"            ret_addr: usize,"},
{"lineNum":"  666","line":"        ) bool {","class":"lineCov","hits":"1","order":"1093","possible_hits":"1",},
{"lineNum":"  667","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));","class":"lineCov","hits":"1","order":"1094","possible_hits":"1",},
{"lineNum":"  668","line":"            const log2_old_align = @intCast(Allocator.Log2Align, log2_old_align_u8);","class":"lineCov","hits":"1","order":"1095","possible_hits":"1",},
{"lineNum":"  669","line":"            self.mutex.lock();","class":"lineCov","hits":"1","order":"1096","possible_hits":"1",},
{"lineNum":"  670","line":"            defer self.mutex.unlock();","class":"linePartCov","hits":"2","order":"1154","possible_hits":"4",},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"            assert(old_mem.len != 0);","class":"lineCov","hits":"1","order":"1097","possible_hits":"1",},
{"lineNum":"  673","line":""},
{"lineNum":"  674","line":"            const aligned_size = @max(old_mem.len, @as(usize, 1) << log2_old_align);","class":"lineCov","hits":"1","order":"1098","possible_hits":"1",},
{"lineNum":"  675","line":"            if (aligned_size > largest_bucket_object_size) {","class":"lineCov","hits":"1","order":"1099","possible_hits":"1",},
{"lineNum":"  676","line":"                return self.resizeLarge(old_mem, log2_old_align, new_size, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  677","line":"            }"},
{"lineNum":"  678","line":"            const size_class_hint = math.ceilPowerOfTwoAssert(usize, aligned_size);","class":"lineCov","hits":"1","order":"1100","possible_hits":"1",},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"            var bucket_index = math.log2(size_class_hint);","class":"lineCov","hits":"1","order":"1101","possible_hits":"1",},
{"lineNum":"  681","line":"            var size_class: usize = size_class_hint;","class":"lineCov","hits":"1","order":"1102","possible_hits":"1",},
{"lineNum":"  682","line":"            const bucket = while (bucket_index < small_bucket_count) : (bucket_index += 1) {","class":"linePartCov","hits":"1","order":"1103","possible_hits":"2",},
{"lineNum":"  683","line":"                if (searchBucket(self.buckets[bucket_index], @ptrToInt(old_mem.ptr))) |bucket| {","class":"lineCov","hits":"2","order":"1104","possible_hits":"2",},
{"lineNum":"  684","line":"                    // move bucket to head of list to optimize search for nearby allocations"},
{"lineNum":"  685","line":"                    self.buckets[bucket_index] = bucket;","class":"lineCov","hits":"2","order":"1111","possible_hits":"2",},
{"lineNum":"  686","line":"                    break bucket;","class":"linePartCov","hits":"1","order":"1112","possible_hits":"2",},
{"lineNum":"  687","line":"                }"},
{"lineNum":"  688","line":"                size_class *= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  689","line":"            } else blk: {"},
{"lineNum":"  690","line":"                if (config.retain_metadata) {"},
{"lineNum":"  691","line":"                    if (!self.large_allocations.contains(@ptrToInt(old_mem.ptr))) {"},
{"lineNum":"  692","line":"                        // object not in active buckets or a large allocation, so search empty buckets"},
{"lineNum":"  693","line":"                        if (searchBucket(self.empty_buckets, @ptrToInt(old_mem.ptr))) |bucket| {"},
{"lineNum":"  694","line":"                            // bucket is empty so is_used below will always be false and we exit there"},
{"lineNum":"  695","line":"                            break :blk bucket;"},
{"lineNum":"  696","line":"                        } else {"},
{"lineNum":"  697","line":"                            @panic(\"Invalid free\");"},
{"lineNum":"  698","line":"                        }"},
{"lineNum":"  699","line":"                    }"},
{"lineNum":"  700","line":"                }"},
{"lineNum":"  701","line":"                return self.resizeLarge(old_mem, log2_old_align, new_size, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  702","line":"            };"},
{"lineNum":"  703","line":"            const byte_offset = @ptrToInt(old_mem.ptr) - @ptrToInt(bucket.page);","class":"lineCov","hits":"1","order":"1113","possible_hits":"1",},
{"lineNum":"  704","line":"            const slot_index = @intCast(SlotIndex, byte_offset / size_class);","class":"lineCov","hits":"1","order":"1114","possible_hits":"1",},
{"lineNum":"  705","line":"            const used_byte_index = slot_index / 8;","class":"lineCov","hits":"1","order":"1115","possible_hits":"1",},
{"lineNum":"  706","line":"            const used_bit_index = @intCast(u3, slot_index % 8);","class":"lineCov","hits":"1","order":"1116","possible_hits":"1",},
{"lineNum":"  707","line":"            const used_byte = bucket.usedBits(used_byte_index);","class":"lineCov","hits":"1","order":"1117","possible_hits":"1",},
{"lineNum":"  708","line":"            const is_used = @truncate(u1, used_byte.* >> used_bit_index) != 0;","class":"lineCov","hits":"1","order":"1118","possible_hits":"1",},
{"lineNum":"  709","line":"            if (!is_used) {","class":"lineCov","hits":"1","order":"1119","possible_hits":"1",},
{"lineNum":"  710","line":"                if (config.safety) {"},
{"lineNum":"  711","line":"                    reportDoubleFree(ret_addr, bucketStackTrace(bucket, size_class, slot_index, .alloc), bucketStackTrace(bucket, size_class, slot_index, .free));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"                    @panic(\"Unrecoverable double free\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  713","line":"                } else {"},
{"lineNum":"  714","line":"                    unreachable;"},
{"lineNum":"  715","line":"                }"},
{"lineNum":"  716","line":"            }"},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"            // Definitely an in-use small alloc now."},
{"lineNum":"  719","line":"            if (config.safety) {"},
{"lineNum":"  720","line":"                const entry = self.small_allocations.getEntry(@ptrToInt(old_mem.ptr)) orelse","class":"lineCov","hits":"1","order":"1120","possible_hits":"1",},
{"lineNum":"  721","line":"                    @panic(\"Invalid free\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  722","line":"                if (old_mem.len != entry.value_ptr.requested_size or log2_old_align != entry.value_ptr.log2_ptr_align) {","class":"lineCov","hits":"1","order":"1148","possible_hits":"1",},
{"lineNum":"  723","line":"                    var addresses: [stack_n]usize = [1]usize{0} ** stack_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":"                    var free_stack_trace = StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"                        .instruction_addresses = &addresses,"},
{"lineNum":"  726","line":"                        .index = 0,"},
{"lineNum":"  727","line":"                    };"},
{"lineNum":"  728","line":"                    std.debug.captureStackTrace(ret_addr, &free_stack_trace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  729","line":"                    if (old_mem.len != entry.value_ptr.requested_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":"                        log.err(\"Allocation size {d} bytes does not match resize size {d}. Allocation: {} Resize: {}\", .{"},
{"lineNum":"  731","line":"                            entry.value_ptr.requested_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  732","line":"                            old_mem.len,"},
{"lineNum":"  733","line":"                            bucketStackTrace(bucket, size_class, slot_index, .alloc),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":"                            free_stack_trace,"},
{"lineNum":"  735","line":"                        });"},
{"lineNum":"  736","line":"                    }"},
{"lineNum":"  737","line":"                    if (log2_old_align != entry.value_ptr.log2_ptr_align) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"                        log.err(\"Allocation alignment {d} does not match resize alignment {d}. Allocation: {} Resize: {}\", .{"},
{"lineNum":"  739","line":"                            @as(usize, 1) << @intCast(math.Log2Int(usize), entry.value_ptr.log2_ptr_align),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  740","line":"                            @as(usize, 1) << @intCast(math.Log2Int(usize), log2_old_align),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  741","line":"                            bucketStackTrace(bucket, size_class, slot_index, .alloc),","class":"linePartCov","hits":"1","order":"1149","possible_hits":"3",},
{"lineNum":"  742","line":"                            free_stack_trace,"},
{"lineNum":"  743","line":"                        });"},
{"lineNum":"  744","line":"                    }"},
{"lineNum":"  745","line":"                }"},
{"lineNum":"  746","line":"            }"},
{"lineNum":"  747","line":"            const prev_req_bytes = self.total_requested_bytes;"},
{"lineNum":"  748","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  749","line":"                const new_req_bytes = prev_req_bytes + new_size - old_mem.len;"},
{"lineNum":"  750","line":"                if (new_req_bytes > prev_req_bytes and new_req_bytes > self.requested_memory_limit) {"},
{"lineNum":"  751","line":"                    return false;"},
{"lineNum":"  752","line":"                }"},
{"lineNum":"  753","line":"                self.total_requested_bytes = new_req_bytes;"},
{"lineNum":"  754","line":"            }"},
{"lineNum":"  755","line":""},
{"lineNum":"  756","line":"            const new_aligned_size = @max(new_size, @as(usize, 1) << log2_old_align);","class":"lineCov","hits":"1","order":"1150","possible_hits":"1",},
{"lineNum":"  757","line":"            const new_size_class = math.ceilPowerOfTwoAssert(usize, new_aligned_size);","class":"lineCov","hits":"1","order":"1151","possible_hits":"1",},
{"lineNum":"  758","line":"            if (new_size_class <= size_class) {","class":"lineCov","hits":"1","order":"1152","possible_hits":"1",},
{"lineNum":"  759","line":"                if (old_mem.len > new_size) {","class":"lineCov","hits":"1","order":"1382","possible_hits":"1",},
{"lineNum":"  760","line":"                    @memset(old_mem.ptr + new_size, undefined, old_mem.len - new_size);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":"                }"},
{"lineNum":"  762","line":"                if (config.verbose_log) {"},
{"lineNum":"  763","line":"                    log.info(\"small resize {d} bytes at {*} to {d}\", .{"},
{"lineNum":"  764","line":"                        old_mem.len, old_mem.ptr, new_size,"},
{"lineNum":"  765","line":"                    });"},
{"lineNum":"  766","line":"                }"},
{"lineNum":"  767","line":"                if (config.safety) {"},
{"lineNum":"  768","line":"                    const entry = self.small_allocations.getEntry(@ptrToInt(old_mem.ptr)).?;","class":"lineCov","hits":"1","order":"1383","possible_hits":"1",},
{"lineNum":"  769","line":"                    entry.value_ptr.requested_size = new_size;","class":"lineCov","hits":"1","order":"1384","possible_hits":"1",},
{"lineNum":"  770","line":"                }"},
{"lineNum":"  771","line":"                return true;","class":"lineCov","hits":"2","order":"1153","possible_hits":"2",},
{"lineNum":"  772","line":"            }"},
{"lineNum":"  773","line":""},
{"lineNum":"  774","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  775","line":"                self.total_requested_bytes = prev_req_bytes;"},
{"lineNum":"  776","line":"            }"},
{"lineNum":"  777","line":"            return false;","class":"lineCov","hits":"1","order":"1155","possible_hits":"1",},
{"lineNum":"  778","line":"        }"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"        fn free("},
{"lineNum":"  781","line":"            ctx: *anyopaque,"},
{"lineNum":"  782","line":"            old_mem: []u8,"},
{"lineNum":"  783","line":"            log2_old_align_u8: u8,"},
{"lineNum":"  784","line":"            ret_addr: usize,"},
{"lineNum":"  785","line":"        ) void {","class":"lineCov","hits":"1","order":"1156","possible_hits":"1",},
{"lineNum":"  786","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));","class":"lineCov","hits":"1","order":"1157","possible_hits":"1",},
{"lineNum":"  787","line":"            const log2_old_align = @intCast(Allocator.Log2Align, log2_old_align_u8);","class":"lineCov","hits":"1","order":"1158","possible_hits":"1",},
{"lineNum":"  788","line":"            self.mutex.lock();","class":"lineCov","hits":"1","order":"1159","possible_hits":"1",},
{"lineNum":"  789","line":"            defer self.mutex.unlock();","class":"linePartCov","hits":"1","order":"1219","possible_hits":"5",},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"            assert(old_mem.len != 0);","class":"lineCov","hits":"1","order":"1160","possible_hits":"1",},
{"lineNum":"  792","line":""},
{"lineNum":"  793","line":"            const aligned_size = @max(old_mem.len, @as(usize, 1) << log2_old_align);","class":"lineCov","hits":"1","order":"1161","possible_hits":"1",},
{"lineNum":"  794","line":"            if (aligned_size > largest_bucket_object_size) {","class":"lineCov","hits":"1","order":"1162","possible_hits":"1",},
{"lineNum":"  795","line":"                self.freeLarge(old_mem, log2_old_align, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  796","line":"                return;"},
{"lineNum":"  797","line":"            }"},
{"lineNum":"  798","line":"            const size_class_hint = math.ceilPowerOfTwoAssert(usize, aligned_size);","class":"lineCov","hits":"1","order":"1163","possible_hits":"1",},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"            var bucket_index = math.log2(size_class_hint);","class":"lineCov","hits":"1","order":"1164","possible_hits":"1",},
{"lineNum":"  801","line":"            var size_class: usize = size_class_hint;","class":"lineCov","hits":"1","order":"1165","possible_hits":"1",},
{"lineNum":"  802","line":"            const bucket = while (bucket_index < small_bucket_count) : (bucket_index += 1) {","class":"linePartCov","hits":"1","order":"1166","possible_hits":"2",},
{"lineNum":"  803","line":"                if (searchBucket(self.buckets[bucket_index], @ptrToInt(old_mem.ptr))) |bucket| {","class":"lineCov","hits":"2","order":"1167","possible_hits":"2",},
{"lineNum":"  804","line":"                    // move bucket to head of list to optimize search for nearby allocations"},
{"lineNum":"  805","line":"                    self.buckets[bucket_index] = bucket;","class":"lineCov","hits":"2","order":"1168","possible_hits":"2",},
{"lineNum":"  806","line":"                    break bucket;","class":"linePartCov","hits":"1","order":"1169","possible_hits":"2",},
{"lineNum":"  807","line":"                }"},
{"lineNum":"  808","line":"                size_class *= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  809","line":"            } else blk: {"},
{"lineNum":"  810","line":"                if (config.retain_metadata) {"},
{"lineNum":"  811","line":"                    if (!self.large_allocations.contains(@ptrToInt(old_mem.ptr))) {"},
{"lineNum":"  812","line":"                        // object not in active buckets or a large allocation, so search empty buckets"},
{"lineNum":"  813","line":"                        if (searchBucket(self.empty_buckets, @ptrToInt(old_mem.ptr))) |bucket| {"},
{"lineNum":"  814","line":"                            // bucket is empty so is_used below will always be false and we exit there"},
{"lineNum":"  815","line":"                            break :blk bucket;"},
{"lineNum":"  816","line":"                        } else {"},
{"lineNum":"  817","line":"                            @panic(\"Invalid free\");"},
{"lineNum":"  818","line":"                        }"},
{"lineNum":"  819","line":"                    }"},
{"lineNum":"  820","line":"                }"},
{"lineNum":"  821","line":"                self.freeLarge(old_mem, log2_old_align, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  822","line":"                return;"},
{"lineNum":"  823","line":"            };"},
{"lineNum":"  824","line":"            const byte_offset = @ptrToInt(old_mem.ptr) - @ptrToInt(bucket.page);","class":"lineCov","hits":"1","order":"1170","possible_hits":"1",},
{"lineNum":"  825","line":"            const slot_index = @intCast(SlotIndex, byte_offset / size_class);","class":"lineCov","hits":"1","order":"1171","possible_hits":"1",},
{"lineNum":"  826","line":"            const used_byte_index = slot_index / 8;","class":"lineCov","hits":"1","order":"1172","possible_hits":"1",},
{"lineNum":"  827","line":"            const used_bit_index = @intCast(u3, slot_index % 8);","class":"lineCov","hits":"1","order":"1173","possible_hits":"1",},
{"lineNum":"  828","line":"            const used_byte = bucket.usedBits(used_byte_index);","class":"lineCov","hits":"1","order":"1174","possible_hits":"1",},
{"lineNum":"  829","line":"            const is_used = @truncate(u1, used_byte.* >> used_bit_index) != 0;","class":"lineCov","hits":"1","order":"1175","possible_hits":"1",},
{"lineNum":"  830","line":"            if (!is_used) {","class":"lineCov","hits":"1","order":"1176","possible_hits":"1",},
{"lineNum":"  831","line":"                if (config.safety) {"},
{"lineNum":"  832","line":"                    reportDoubleFree(ret_addr, bucketStackTrace(bucket, size_class, slot_index, .alloc), bucketStackTrace(bucket, size_class, slot_index, .free));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  833","line":"                    // Recoverable if this is a free."},
{"lineNum":"  834","line":"                    return;"},
{"lineNum":"  835","line":"                } else {"},
{"lineNum":"  836","line":"                    unreachable;"},
{"lineNum":"  837","line":"                }"},
{"lineNum":"  838","line":"            }"},
{"lineNum":"  839","line":""},
{"lineNum":"  840","line":"            // Definitely an in-use small alloc now."},
{"lineNum":"  841","line":"            if (config.safety) {"},
{"lineNum":"  842","line":"                const entry = self.small_allocations.getEntry(@ptrToInt(old_mem.ptr)) orelse","class":"lineCov","hits":"1","order":"1177","possible_hits":"1",},
{"lineNum":"  843","line":"                    @panic(\"Invalid free\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  844","line":"                if (old_mem.len != entry.value_ptr.requested_size or log2_old_align != entry.value_ptr.log2_ptr_align) {","class":"lineCov","hits":"1","order":"1178","possible_hits":"1",},
{"lineNum":"  845","line":"                    var addresses: [stack_n]usize = [1]usize{0} ** stack_n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  846","line":"                    var free_stack_trace = StackTrace{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  847","line":"                        .instruction_addresses = &addresses,"},
{"lineNum":"  848","line":"                        .index = 0,"},
{"lineNum":"  849","line":"                    };"},
{"lineNum":"  850","line":"                    std.debug.captureStackTrace(ret_addr, &free_stack_trace);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  851","line":"                    if (old_mem.len != entry.value_ptr.requested_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  852","line":"                        log.err(\"Allocation size {d} bytes does not match free size {d}. Allocation: {} Free: {}\", .{"},
{"lineNum":"  853","line":"                            entry.value_ptr.requested_size,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  854","line":"                            old_mem.len,"},
{"lineNum":"  855","line":"                            bucketStackTrace(bucket, size_class, slot_index, .alloc),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  856","line":"                            free_stack_trace,"},
{"lineNum":"  857","line":"                        });"},
{"lineNum":"  858","line":"                    }"},
{"lineNum":"  859","line":"                    if (log2_old_align != entry.value_ptr.log2_ptr_align) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  860","line":"                        log.err(\"Allocation alignment {d} does not match free alignment {d}. Allocation: {} Free: {}\", .{"},
{"lineNum":"  861","line":"                            @as(usize, 1) << @intCast(math.Log2Int(usize), entry.value_ptr.log2_ptr_align),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  862","line":"                            @as(usize, 1) << @intCast(math.Log2Int(usize), log2_old_align),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  863","line":"                            bucketStackTrace(bucket, size_class, slot_index, .alloc),","class":"linePartCov","hits":"1","order":"1179","possible_hits":"3",},
{"lineNum":"  864","line":"                            free_stack_trace,"},
{"lineNum":"  865","line":"                        });"},
{"lineNum":"  866","line":"                    }"},
{"lineNum":"  867","line":"                }"},
{"lineNum":"  868","line":"            }"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  871","line":"                self.total_requested_bytes -= old_mem.len;"},
{"lineNum":"  872","line":"            }"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"            // Capture stack trace to be the \"first free\", in case a double free happens."},
{"lineNum":"  875","line":"            bucket.captureStackTrace(ret_addr, size_class, slot_index, .free);","class":"lineCov","hits":"1","order":"1180","possible_hits":"1",},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"            used_byte.* &= ~(@as(u8, 1) << used_bit_index);","class":"lineCov","hits":"1","order":"1181","possible_hits":"1",},
{"lineNum":"  878","line":"            bucket.used_count -= 1;","class":"lineCov","hits":"1","order":"1182","possible_hits":"1",},
{"lineNum":"  879","line":"            if (bucket.used_count == 0) {","class":"lineCov","hits":"1","order":"1183","possible_hits":"1",},
{"lineNum":"  880","line":"                if (bucket.next == bucket) {","class":"lineCov","hits":"1","order":"1184","possible_hits":"1",},
{"lineNum":"  881","line":"                    // it\'s the only bucket and therefore the current one"},
{"lineNum":"  882","line":"                    self.buckets[bucket_index] = null;","class":"lineCov","hits":"2","order":"1185","possible_hits":"2",},
{"lineNum":"  883","line":"                } else {"},
{"lineNum":"  884","line":"                    bucket.next.prev = bucket.prev;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  885","line":"                    bucket.prev.next = bucket.next;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  886","line":"                    self.buckets[bucket_index] = bucket.prev;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  887","line":"                }"},
{"lineNum":"  888","line":"                if (!config.never_unmap) {"},
{"lineNum":"  889","line":"                    self.backing_allocator.free(bucket.page[0..page_size]);","class":"lineCov","hits":"1","order":"1186","possible_hits":"1",},
{"lineNum":"  890","line":"                }"},
{"lineNum":"  891","line":"                if (!config.retain_metadata) {"},
{"lineNum":"  892","line":"                    self.freeBucket(bucket, size_class);","class":"lineCov","hits":"1","order":"1196","possible_hits":"1",},
{"lineNum":"  893","line":"                } else {"},
{"lineNum":"  894","line":"                    // move alloc_cursor to end so we can tell size_class later"},
{"lineNum":"  895","line":"                    const slot_count = @divExact(page_size, size_class);"},
{"lineNum":"  896","line":"                    bucket.alloc_cursor = @truncate(SlotIndex, slot_count);"},
{"lineNum":"  897","line":"                    if (self.empty_buckets) |prev_bucket| {"},
{"lineNum":"  898","line":"                        // empty_buckets is ordered newest to oldest through prev so that if"},
{"lineNum":"  899","line":"                        // config.never_unmap is false and backing_allocator reuses freed memory"},
{"lineNum":"  900","line":"                        // then searchBuckets will always return the newer, relevant bucket"},
{"lineNum":"  901","line":"                        bucket.prev = prev_bucket;"},
{"lineNum":"  902","line":"                        bucket.next = prev_bucket.next;"},
{"lineNum":"  903","line":"                        prev_bucket.next = bucket;"},
{"lineNum":"  904","line":"                        bucket.next.prev = bucket;"},
{"lineNum":"  905","line":"                    } else {"},
{"lineNum":"  906","line":"                        bucket.prev = bucket;"},
{"lineNum":"  907","line":"                        bucket.next = bucket;"},
{"lineNum":"  908","line":"                    }"},
{"lineNum":"  909","line":"                    self.empty_buckets = bucket;"},
{"lineNum":"  910","line":"                }"},
{"lineNum":"  911","line":"            } else {"},
{"lineNum":"  912","line":"                @memset(old_mem.ptr, undefined, old_mem.len);","class":"lineCov","hits":"1","order":"1557","possible_hits":"1",},
{"lineNum":"  913","line":"            }"},
{"lineNum":"  914","line":"            if (config.safety) {"},
{"lineNum":"  915","line":"                assert(self.small_allocations.remove(@ptrToInt(old_mem.ptr)));","class":"lineCov","hits":"1","order":"1201","possible_hits":"1",},
{"lineNum":"  916","line":"            }"},
{"lineNum":"  917","line":"            if (config.verbose_log) {"},
{"lineNum":"  918","line":"                log.info(\"small free {d} bytes at {*}\", .{ old_mem.len, old_mem.ptr });"},
{"lineNum":"  919","line":"            }"},
{"lineNum":"  920","line":"        }"},
{"lineNum":"  921","line":""},
{"lineNum":"  922","line":"        // Returns true if an allocation of `size` bytes is within the specified"},
{"lineNum":"  923","line":"        // limits if enable_memory_limit is true"},
{"lineNum":"  924","line":"        fn isAllocationAllowed(self: *Self, size: usize) bool {","class":"lineCov","hits":"1","order":"762","possible_hits":"1",},
{"lineNum":"  925","line":"            if (config.enable_memory_limit) {"},
{"lineNum":"  926","line":"                const new_req_bytes = self.total_requested_bytes + size;"},
{"lineNum":"  927","line":"                if (new_req_bytes > self.requested_memory_limit)"},
{"lineNum":"  928","line":"                    return false;"},
{"lineNum":"  929","line":"                self.total_requested_bytes = new_req_bytes;"},
{"lineNum":"  930","line":"            }"},
{"lineNum":"  931","line":""},
{"lineNum":"  932","line":"            return true;","class":"lineCov","hits":"1","order":"763","possible_hits":"1",},
{"lineNum":"  933","line":"        }"},
{"lineNum":"  934","line":""},
{"lineNum":"  935","line":"        fn alloc(ctx: *anyopaque, len: usize, log2_ptr_align: u8, ret_addr: usize) ?[*]u8 {","class":"lineCov","hits":"1","order":"750","possible_hits":"1",},
{"lineNum":"  936","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));","class":"lineCov","hits":"1","order":"751","possible_hits":"1",},
{"lineNum":"  937","line":"            self.mutex.lock();","class":"lineCov","hits":"1","order":"752","possible_hits":"1",},
{"lineNum":"  938","line":"            defer self.mutex.unlock();","class":"linePartCov","hits":"1","order":"1043","possible_hits":"3",},
{"lineNum":"  939","line":"            if (!self.isAllocationAllowed(len)) return null;","class":"linePartCov","hits":"1","order":"761","possible_hits":"2",},
{"lineNum":"  940","line":"            return allocInner(self, len, @intCast(Allocator.Log2Align, log2_ptr_align), ret_addr) catch return null;","class":"linePartCov","hits":"2","order":"764","possible_hits":"3",},
{"lineNum":"  941","line":"        }"},
{"lineNum":"  942","line":""},
{"lineNum":"  943","line":"        fn allocInner("},
{"lineNum":"  944","line":"            self: *Self,"},
{"lineNum":"  945","line":"            len: usize,"},
{"lineNum":"  946","line":"            log2_ptr_align: Allocator.Log2Align,"},
{"lineNum":"  947","line":"            ret_addr: usize,"},
{"lineNum":"  948","line":"        ) Allocator.Error![*]u8 {","class":"lineCov","hits":"1","order":"765","possible_hits":"1",},
{"lineNum":"  949","line":"            const new_aligned_size = @max(len, @as(usize, 1) << @intCast(Allocator.Log2Align, log2_ptr_align));","class":"lineCov","hits":"1","order":"766","possible_hits":"1",},
{"lineNum":"  950","line":"            if (new_aligned_size > largest_bucket_object_size) {","class":"lineCov","hits":"1","order":"767","possible_hits":"1",},
{"lineNum":"  951","line":"                try self.large_allocations.ensureUnusedCapacity(self.backing_allocator, 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  952","line":"                const ptr = self.backing_allocator.rawAlloc(len, log2_ptr_align, ret_addr) orelse","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  953","line":"                    return error.OutOfMemory;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  954","line":"                const slice = ptr[0..len];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  955","line":""},
{"lineNum":"  956","line":"                const gop = self.large_allocations.getOrPutAssumeCapacity(@ptrToInt(slice.ptr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  957","line":"                if (config.retain_metadata and !config.never_unmap) {"},
{"lineNum":"  958","line":"                    // Backing allocator may be reusing memory that we\'re retaining metadata for"},
{"lineNum":"  959","line":"                    assert(!gop.found_existing or gop.value_ptr.freed);"},
{"lineNum":"  960","line":"                } else {"},
{"lineNum":"  961","line":"                    assert(!gop.found_existing); // This would mean the kernel double-mapped pages.","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  962","line":"                }"},
{"lineNum":"  963","line":"                gop.value_ptr.bytes = slice;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  964","line":"                if (config.enable_memory_limit)"},
{"lineNum":"  965","line":"                    gop.value_ptr.requested_size = len;"},
{"lineNum":"  966","line":"                gop.value_ptr.captureStackTrace(ret_addr, .alloc);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  967","line":"                if (config.retain_metadata) {"},
{"lineNum":"  968","line":"                    gop.value_ptr.freed = false;"},
{"lineNum":"  969","line":"                    if (config.never_unmap) {"},
{"lineNum":"  970","line":"                        gop.value_ptr.log2_ptr_align = log2_ptr_align;"},
{"lineNum":"  971","line":"                    }"},
{"lineNum":"  972","line":"                }"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"                if (config.verbose_log) {"},
{"lineNum":"  975","line":"                    log.info(\"large alloc {d} bytes at {*}\", .{ slice.len, slice.ptr });"},
{"lineNum":"  976","line":"                }"},
{"lineNum":"  977","line":"                return slice.ptr;","class":"linePartCov","hits":"1","order":"768","possible_hits":"2",},
{"lineNum":"  978","line":"            }"},
{"lineNum":"  979","line":""},
{"lineNum":"  980","line":"            if (config.safety) {"},
{"lineNum":"  981","line":"                try self.small_allocations.ensureUnusedCapacity(self.backing_allocator, 1);","class":"lineCov","hits":"1","order":"769","possible_hits":"1",},
{"lineNum":"  982","line":"            }"},
{"lineNum":"  983","line":"            const new_size_class = math.ceilPowerOfTwoAssert(usize, new_aligned_size);","class":"lineCov","hits":"1","order":"868","possible_hits":"1",},
{"lineNum":"  984","line":"            const ptr = try self.allocSlot(new_size_class, ret_addr);","class":"lineCov","hits":"1","order":"871","possible_hits":"1",},
{"lineNum":"  985","line":"            if (config.safety) {"},
{"lineNum":"  986","line":"                const gop = self.small_allocations.getOrPutAssumeCapacity(@ptrToInt(ptr));","class":"lineCov","hits":"1","order":"961","possible_hits":"1",},
{"lineNum":"  987","line":"                gop.value_ptr.requested_size = len;","class":"lineCov","hits":"1","order":"1040","possible_hits":"1",},
{"lineNum":"  988","line":"                gop.value_ptr.log2_ptr_align = log2_ptr_align;","class":"lineCov","hits":"1","order":"1041","possible_hits":"1",},
{"lineNum":"  989","line":"            }"},
{"lineNum":"  990","line":"            if (config.verbose_log) {"},
{"lineNum":"  991","line":"                log.info(\"small alloc {d} bytes at {*}\", .{ len, ptr });"},
{"lineNum":"  992","line":"            }"},
{"lineNum":"  993","line":"            return ptr;","class":"lineCov","hits":"1","order":"1042","possible_hits":"1",},
{"lineNum":"  994","line":"        }"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"        fn createBucket(self: *Self, size_class: usize, bucket_index: usize) Error!*BucketHeader {","class":"lineCov","hits":"1","order":"877","possible_hits":"1",},
{"lineNum":"  997","line":"            const page = try self.backing_allocator.alignedAlloc(u8, page_size, page_size);","class":"lineCov","hits":"1","order":"878","possible_hits":"1",},
{"lineNum":"  998","line":"            errdefer self.backing_allocator.free(page);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  999","line":""},
{"lineNum":" 1000","line":"            const bucket_size = bucketSize(size_class);","class":"lineCov","hits":"1","order":"879","possible_hits":"1",},
{"lineNum":" 1001","line":"            const bucket_bytes = try self.backing_allocator.alignedAlloc(u8, @alignOf(BucketHeader), bucket_size);","class":"linePartCov","hits":"1","order":"890","possible_hits":"2",},
{"lineNum":" 1002","line":"            const ptr = @ptrCast(*BucketHeader, bucket_bytes.ptr);","class":"lineCov","hits":"1","order":"891","possible_hits":"1",},
{"lineNum":" 1003","line":"            ptr.* = BucketHeader{","class":"lineCov","hits":"1","order":"892","possible_hits":"1",},
{"lineNum":" 1004","line":"                .prev = ptr,"},
{"lineNum":" 1005","line":"                .next = ptr,"},
{"lineNum":" 1006","line":"                .page = page.ptr,","class":"lineCov","hits":"1","order":"893","possible_hits":"1",},
{"lineNum":" 1007","line":"                .alloc_cursor = 0,"},
{"lineNum":" 1008","line":"                .used_count = 0,"},
{"lineNum":" 1009","line":"            };"},
{"lineNum":" 1010","line":"            self.buckets[bucket_index] = ptr;","class":"lineCov","hits":"1","order":"894","possible_hits":"1",},
{"lineNum":" 1011","line":"            // Set the used bits to all zeroes"},
{"lineNum":" 1012","line":"            @memset(@as(*[1]u8, ptr.usedBits(0)), 0, usedBitsCount(size_class));","class":"lineCov","hits":"1","order":"895","possible_hits":"1",},
{"lineNum":" 1013","line":"            return ptr;","class":"lineCov","hits":"1","order":"898","possible_hits":"1",},
{"lineNum":" 1014","line":"        }"},
{"lineNum":" 1015","line":"    };"},
{"lineNum":" 1016","line":"}"},
{"lineNum":" 1017","line":""},
{"lineNum":" 1018","line":"const TraceKind = enum {"},
{"lineNum":" 1019","line":"    alloc,"},
{"lineNum":" 1020","line":"    free,"},
{"lineNum":" 1021","line":"};"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"const test_config = Config{};"},
{"lineNum":" 1024","line":""},
{"lineNum":" 1025","line":"test \"small allocations - free in same order\" {"},
{"lineNum":" 1026","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1027","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1028","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1029","line":""},
{"lineNum":" 1030","line":"    var list = std.ArrayList(*u64).init(std.testing.allocator);"},
{"lineNum":" 1031","line":"    defer list.deinit();"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"    var i: usize = 0;"},
{"lineNum":" 1034","line":"    while (i < 513) : (i += 1) {"},
{"lineNum":" 1035","line":"        const ptr = try allocator.create(u64);"},
{"lineNum":" 1036","line":"        try list.append(ptr);"},
{"lineNum":" 1037","line":"    }"},
{"lineNum":" 1038","line":""},
{"lineNum":" 1039","line":"    for (list.items) |ptr| {"},
{"lineNum":" 1040","line":"        allocator.destroy(ptr);"},
{"lineNum":" 1041","line":"    }"},
{"lineNum":" 1042","line":"}"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"test \"small allocations - free in reverse order\" {"},
{"lineNum":" 1045","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1046","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1047","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    var list = std.ArrayList(*u64).init(std.testing.allocator);"},
{"lineNum":" 1050","line":"    defer list.deinit();"},
{"lineNum":" 1051","line":""},
{"lineNum":" 1052","line":"    var i: usize = 0;"},
{"lineNum":" 1053","line":"    while (i < 513) : (i += 1) {"},
{"lineNum":" 1054","line":"        const ptr = try allocator.create(u64);"},
{"lineNum":" 1055","line":"        try list.append(ptr);"},
{"lineNum":" 1056","line":"    }"},
{"lineNum":" 1057","line":""},
{"lineNum":" 1058","line":"    while (list.popOrNull()) |ptr| {"},
{"lineNum":" 1059","line":"        allocator.destroy(ptr);"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":"}"},
{"lineNum":" 1062","line":""},
{"lineNum":" 1063","line":"test \"large allocations\" {"},
{"lineNum":" 1064","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1065","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1066","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1067","line":""},
{"lineNum":" 1068","line":"    const ptr1 = try allocator.alloc(u64, 42768);"},
{"lineNum":" 1069","line":"    const ptr2 = try allocator.alloc(u64, 52768);"},
{"lineNum":" 1070","line":"    allocator.free(ptr1);"},
{"lineNum":" 1071","line":"    const ptr3 = try allocator.alloc(u64, 62768);"},
{"lineNum":" 1072","line":"    allocator.free(ptr3);"},
{"lineNum":" 1073","line":"    allocator.free(ptr2);"},
{"lineNum":" 1074","line":"}"},
{"lineNum":" 1075","line":""},
{"lineNum":" 1076","line":"test \"very large allocation\" {"},
{"lineNum":" 1077","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1078","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1079","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"    try std.testing.expectError(error.OutOfMemory, allocator.alloc(u8, math.maxInt(usize)));"},
{"lineNum":" 1082","line":"}"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"test \"realloc\" {"},
{"lineNum":" 1085","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1086","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1087","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1088","line":""},
{"lineNum":" 1089","line":"    var slice = try allocator.alignedAlloc(u8, @alignOf(u32), 1);"},
{"lineNum":" 1090","line":"    defer allocator.free(slice);"},
{"lineNum":" 1091","line":"    slice[0] = 0x12;"},
{"lineNum":" 1092","line":""},
{"lineNum":" 1093","line":"    // This reallocation should keep its pointer address."},
{"lineNum":" 1094","line":"    const old_slice = slice;"},
{"lineNum":" 1095","line":"    slice = try allocator.realloc(slice, 2);"},
{"lineNum":" 1096","line":"    try std.testing.expect(old_slice.ptr == slice.ptr);"},
{"lineNum":" 1097","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1098","line":"    slice[1] = 0x34;"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"    // This requires upgrading to a larger size class"},
{"lineNum":" 1101","line":"    slice = try allocator.realloc(slice, 17);"},
{"lineNum":" 1102","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1103","line":"    try std.testing.expect(slice[1] == 0x34);"},
{"lineNum":" 1104","line":"}"},
{"lineNum":" 1105","line":""},
{"lineNum":" 1106","line":"test \"shrink\" {"},
{"lineNum":" 1107","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1108","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1109","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"    var slice = try allocator.alloc(u8, 20);"},
{"lineNum":" 1112","line":"    defer allocator.free(slice);"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"    mem.set(u8, slice, 0x11);"},
{"lineNum":" 1115","line":""},
{"lineNum":" 1116","line":"    try std.testing.expect(allocator.resize(slice, 17));"},
{"lineNum":" 1117","line":"    slice = slice[0..17];"},
{"lineNum":" 1118","line":""},
{"lineNum":" 1119","line":"    for (slice) |b| {"},
{"lineNum":" 1120","line":"        try std.testing.expect(b == 0x11);"},
{"lineNum":" 1121","line":"    }"},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"    try std.testing.expect(allocator.resize(slice, 16));"},
{"lineNum":" 1124","line":"    slice = slice[0..16];"},
{"lineNum":" 1125","line":""},
{"lineNum":" 1126","line":"    for (slice) |b| {"},
{"lineNum":" 1127","line":"        try std.testing.expect(b == 0x11);"},
{"lineNum":" 1128","line":"    }"},
{"lineNum":" 1129","line":"}"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"test \"large object - grow\" {"},
{"lineNum":" 1132","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1133","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1134","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"    var slice1 = try allocator.alloc(u8, page_size * 2 - 20);"},
{"lineNum":" 1137","line":"    defer allocator.free(slice1);"},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"    const old = slice1;"},
{"lineNum":" 1140","line":"    slice1 = try allocator.realloc(slice1, page_size * 2 - 10);"},
{"lineNum":" 1141","line":"    try std.testing.expect(slice1.ptr == old.ptr);"},
{"lineNum":" 1142","line":""},
{"lineNum":" 1143","line":"    slice1 = try allocator.realloc(slice1, page_size * 2);"},
{"lineNum":" 1144","line":"    try std.testing.expect(slice1.ptr == old.ptr);"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"    slice1 = try allocator.realloc(slice1, page_size * 2 + 1);"},
{"lineNum":" 1147","line":"}"},
{"lineNum":" 1148","line":""},
{"lineNum":" 1149","line":"test \"realloc small object to large object\" {"},
{"lineNum":" 1150","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1151","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1152","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1153","line":""},
{"lineNum":" 1154","line":"    var slice = try allocator.alloc(u8, 70);"},
{"lineNum":" 1155","line":"    defer allocator.free(slice);"},
{"lineNum":" 1156","line":"    slice[0] = 0x12;"},
{"lineNum":" 1157","line":"    slice[60] = 0x34;"},
{"lineNum":" 1158","line":""},
{"lineNum":" 1159","line":"    // This requires upgrading to a large object"},
{"lineNum":" 1160","line":"    const large_object_size = page_size * 2 + 50;"},
{"lineNum":" 1161","line":"    slice = try allocator.realloc(slice, large_object_size);"},
{"lineNum":" 1162","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1163","line":"    try std.testing.expect(slice[60] == 0x34);"},
{"lineNum":" 1164","line":"}"},
{"lineNum":" 1165","line":""},
{"lineNum":" 1166","line":"test \"shrink large object to large object\" {"},
{"lineNum":" 1167","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1168","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1169","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1170","line":""},
{"lineNum":" 1171","line":"    var slice = try allocator.alloc(u8, page_size * 2 + 50);"},
{"lineNum":" 1172","line":"    defer allocator.free(slice);"},
{"lineNum":" 1173","line":"    slice[0] = 0x12;"},
{"lineNum":" 1174","line":"    slice[60] = 0x34;"},
{"lineNum":" 1175","line":""},
{"lineNum":" 1176","line":"    if (!allocator.resize(slice, page_size * 2 + 1)) return;"},
{"lineNum":" 1177","line":"    slice = slice.ptr[0 .. page_size * 2 + 1];"},
{"lineNum":" 1178","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1179","line":"    try std.testing.expect(slice[60] == 0x34);"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"    try std.testing.expect(allocator.resize(slice, page_size * 2 + 1));"},
{"lineNum":" 1182","line":"    slice = slice[0 .. page_size * 2 + 1];"},
{"lineNum":" 1183","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1184","line":"    try std.testing.expect(slice[60] == 0x34);"},
{"lineNum":" 1185","line":""},
{"lineNum":" 1186","line":"    slice = try allocator.realloc(slice, page_size * 2);"},
{"lineNum":" 1187","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1188","line":"    try std.testing.expect(slice[60] == 0x34);"},
{"lineNum":" 1189","line":"}"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"test \"shrink large object to large object with larger alignment\" {"},
{"lineNum":" 1192","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1193","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1194","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1195","line":""},
{"lineNum":" 1196","line":"    var debug_buffer: [1000]u8 = undefined;"},
{"lineNum":" 1197","line":"    var fba = std.heap.FixedBufferAllocator.init(&debug_buffer);"},
{"lineNum":" 1198","line":"    const debug_allocator = fba.allocator();"},
{"lineNum":" 1199","line":""},
{"lineNum":" 1200","line":"    const alloc_size = page_size * 2 + 50;"},
{"lineNum":" 1201","line":"    var slice = try allocator.alignedAlloc(u8, 16, alloc_size);"},
{"lineNum":" 1202","line":"    defer allocator.free(slice);"},
{"lineNum":" 1203","line":""},
{"lineNum":" 1204","line":"    const big_alignment: usize = switch (builtin.os.tag) {"},
{"lineNum":" 1205","line":"        .windows => page_size * 32, // Windows aligns to 64K."},
{"lineNum":" 1206","line":"        else => page_size * 2,"},
{"lineNum":" 1207","line":"    };"},
{"lineNum":" 1208","line":"    // This loop allocates until we find a page that is not aligned to the big"},
{"lineNum":" 1209","line":"    // alignment. Then we shrink the allocation after the loop, but increase the"},
{"lineNum":" 1210","line":"    // alignment to the higher one, that we know will force it to realloc."},
{"lineNum":" 1211","line":"    var stuff_to_free = std.ArrayList([]align(16) u8).init(debug_allocator);"},
{"lineNum":" 1212","line":"    while (mem.isAligned(@ptrToInt(slice.ptr), big_alignment)) {"},
{"lineNum":" 1213","line":"        try stuff_to_free.append(slice);"},
{"lineNum":" 1214","line":"        slice = try allocator.alignedAlloc(u8, 16, alloc_size);"},
{"lineNum":" 1215","line":"    }"},
{"lineNum":" 1216","line":"    while (stuff_to_free.popOrNull()) |item| {"},
{"lineNum":" 1217","line":"        allocator.free(item);"},
{"lineNum":" 1218","line":"    }"},
{"lineNum":" 1219","line":"    slice[0] = 0x12;"},
{"lineNum":" 1220","line":"    slice[60] = 0x34;"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"    slice = try allocator.reallocAdvanced(slice, big_alignment, alloc_size / 2);"},
{"lineNum":" 1223","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1224","line":"    try std.testing.expect(slice[60] == 0x34);"},
{"lineNum":" 1225","line":"}"},
{"lineNum":" 1226","line":""},
{"lineNum":" 1227","line":"test \"realloc large object to small object\" {"},
{"lineNum":" 1228","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1229","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1230","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1231","line":""},
{"lineNum":" 1232","line":"    var slice = try allocator.alloc(u8, page_size * 2 + 50);"},
{"lineNum":" 1233","line":"    defer allocator.free(slice);"},
{"lineNum":" 1234","line":"    slice[0] = 0x12;"},
{"lineNum":" 1235","line":"    slice[16] = 0x34;"},
{"lineNum":" 1236","line":""},
{"lineNum":" 1237","line":"    slice = try allocator.realloc(slice, 19);"},
{"lineNum":" 1238","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1239","line":"    try std.testing.expect(slice[16] == 0x34);"},
{"lineNum":" 1240","line":"}"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"test \"overrideable mutexes\" {"},
{"lineNum":" 1243","line":"    var gpa = GeneralPurposeAllocator(.{ .MutexType = std.Thread.Mutex }){"},
{"lineNum":" 1244","line":"        .backing_allocator = std.testing.allocator,"},
{"lineNum":" 1245","line":"        .mutex = std.Thread.Mutex{},"},
{"lineNum":" 1246","line":"    };"},
{"lineNum":" 1247","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1248","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    const ptr = try allocator.create(i32);"},
{"lineNum":" 1251","line":"    defer allocator.destroy(ptr);"},
{"lineNum":" 1252","line":"}"},
{"lineNum":" 1253","line":""},
{"lineNum":" 1254","line":"test \"non-page-allocator backing allocator\" {"},
{"lineNum":" 1255","line":"    var gpa = GeneralPurposeAllocator(.{}){ .backing_allocator = std.testing.allocator };"},
{"lineNum":" 1256","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1257","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1258","line":""},
{"lineNum":" 1259","line":"    const ptr = try allocator.create(i32);"},
{"lineNum":" 1260","line":"    defer allocator.destroy(ptr);"},
{"lineNum":" 1261","line":"}"},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"test \"realloc large object to larger alignment\" {"},
{"lineNum":" 1264","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1265","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1266","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"    var debug_buffer: [1000]u8 = undefined;"},
{"lineNum":" 1269","line":"    var fba = std.heap.FixedBufferAllocator.init(&debug_buffer);"},
{"lineNum":" 1270","line":"    const debug_allocator = fba.allocator();"},
{"lineNum":" 1271","line":""},
{"lineNum":" 1272","line":"    var slice = try allocator.alignedAlloc(u8, 16, page_size * 2 + 50);"},
{"lineNum":" 1273","line":"    defer allocator.free(slice);"},
{"lineNum":" 1274","line":""},
{"lineNum":" 1275","line":"    const big_alignment: usize = switch (builtin.os.tag) {"},
{"lineNum":" 1276","line":"        .windows => page_size * 32, // Windows aligns to 64K."},
{"lineNum":" 1277","line":"        else => page_size * 2,"},
{"lineNum":" 1278","line":"    };"},
{"lineNum":" 1279","line":"    // This loop allocates until we find a page that is not aligned to the big alignment."},
{"lineNum":" 1280","line":"    var stuff_to_free = std.ArrayList([]align(16) u8).init(debug_allocator);"},
{"lineNum":" 1281","line":"    while (mem.isAligned(@ptrToInt(slice.ptr), big_alignment)) {"},
{"lineNum":" 1282","line":"        try stuff_to_free.append(slice);"},
{"lineNum":" 1283","line":"        slice = try allocator.alignedAlloc(u8, 16, page_size * 2 + 50);"},
{"lineNum":" 1284","line":"    }"},
{"lineNum":" 1285","line":"    while (stuff_to_free.popOrNull()) |item| {"},
{"lineNum":" 1286","line":"        allocator.free(item);"},
{"lineNum":" 1287","line":"    }"},
{"lineNum":" 1288","line":"    slice[0] = 0x12;"},
{"lineNum":" 1289","line":"    slice[16] = 0x34;"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"    slice = try allocator.reallocAdvanced(slice, 32, page_size * 2 + 100);"},
{"lineNum":" 1292","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1293","line":"    try std.testing.expect(slice[16] == 0x34);"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"    slice = try allocator.reallocAdvanced(slice, 32, page_size * 2 + 25);"},
{"lineNum":" 1296","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1297","line":"    try std.testing.expect(slice[16] == 0x34);"},
{"lineNum":" 1298","line":""},
{"lineNum":" 1299","line":"    slice = try allocator.reallocAdvanced(slice, big_alignment, page_size * 2 + 100);"},
{"lineNum":" 1300","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1301","line":"    try std.testing.expect(slice[16] == 0x34);"},
{"lineNum":" 1302","line":"}"},
{"lineNum":" 1303","line":""},
{"lineNum":" 1304","line":"test \"large object shrinks to small but allocation fails during shrink\" {"},
{"lineNum":" 1305","line":"    var failing_allocator = std.testing.FailingAllocator.init(std.heap.page_allocator, 3);"},
{"lineNum":" 1306","line":"    var gpa = GeneralPurposeAllocator(.{}){ .backing_allocator = failing_allocator.allocator() };"},
{"lineNum":" 1307","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1308","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1309","line":""},
{"lineNum":" 1310","line":"    var slice = try allocator.alloc(u8, page_size * 2 + 50);"},
{"lineNum":" 1311","line":"    defer allocator.free(slice);"},
{"lineNum":" 1312","line":"    slice[0] = 0x12;"},
{"lineNum":" 1313","line":"    slice[3] = 0x34;"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"    // Next allocation will fail in the backing allocator of the GeneralPurposeAllocator"},
{"lineNum":" 1316","line":""},
{"lineNum":" 1317","line":"    try std.testing.expect(allocator.resize(slice, 4));"},
{"lineNum":" 1318","line":"    slice = slice[0..4];"},
{"lineNum":" 1319","line":"    try std.testing.expect(slice[0] == 0x12);"},
{"lineNum":" 1320","line":"    try std.testing.expect(slice[3] == 0x34);"},
{"lineNum":" 1321","line":"}"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"test \"objects of size 1024 and 2048\" {"},
{"lineNum":" 1324","line":"    var gpa = GeneralPurposeAllocator(test_config){};"},
{"lineNum":" 1325","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1326","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1327","line":""},
{"lineNum":" 1328","line":"    const slice = try allocator.alloc(u8, 1025);"},
{"lineNum":" 1329","line":"    const slice2 = try allocator.alloc(u8, 3000);"},
{"lineNum":" 1330","line":""},
{"lineNum":" 1331","line":"    allocator.free(slice);"},
{"lineNum":" 1332","line":"    allocator.free(slice2);"},
{"lineNum":" 1333","line":"}"},
{"lineNum":" 1334","line":""},
{"lineNum":" 1335","line":"test \"setting a memory cap\" {"},
{"lineNum":" 1336","line":"    var gpa = GeneralPurposeAllocator(.{ .enable_memory_limit = true }){};"},
{"lineNum":" 1337","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1338","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1339","line":""},
{"lineNum":" 1340","line":"    gpa.setRequestedMemoryLimit(1010);"},
{"lineNum":" 1341","line":""},
{"lineNum":" 1342","line":"    const small = try allocator.create(i32);"},
{"lineNum":" 1343","line":"    try std.testing.expect(gpa.total_requested_bytes == 4);"},
{"lineNum":" 1344","line":""},
{"lineNum":" 1345","line":"    const big = try allocator.alloc(u8, 1000);"},
{"lineNum":" 1346","line":"    try std.testing.expect(gpa.total_requested_bytes == 1004);"},
{"lineNum":" 1347","line":""},
{"lineNum":" 1348","line":"    try std.testing.expectError(error.OutOfMemory, allocator.create(u64));"},
{"lineNum":" 1349","line":""},
{"lineNum":" 1350","line":"    allocator.destroy(small);"},
{"lineNum":" 1351","line":"    try std.testing.expect(gpa.total_requested_bytes == 1000);"},
{"lineNum":" 1352","line":""},
{"lineNum":" 1353","line":"    allocator.free(big);"},
{"lineNum":" 1354","line":"    try std.testing.expect(gpa.total_requested_bytes == 0);"},
{"lineNum":" 1355","line":""},
{"lineNum":" 1356","line":"    const exact = try allocator.alloc(u8, 1010);"},
{"lineNum":" 1357","line":"    try std.testing.expect(gpa.total_requested_bytes == 1010);"},
{"lineNum":" 1358","line":"    allocator.free(exact);"},
{"lineNum":" 1359","line":"}"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"test \"double frees\" {"},
{"lineNum":" 1362","line":"    // use a GPA to back a GPA to check for leaks of the latter\'s metadata"},
{"lineNum":" 1363","line":"    var backing_gpa = GeneralPurposeAllocator(.{ .safety = true }){};"},
{"lineNum":" 1364","line":"    defer std.testing.expect(!backing_gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1365","line":""},
{"lineNum":" 1366","line":"    const GPA = GeneralPurposeAllocator(.{ .safety = true, .never_unmap = true, .retain_metadata = true });"},
{"lineNum":" 1367","line":"    var gpa = GPA{ .backing_allocator = backing_gpa.allocator() };"},
{"lineNum":" 1368","line":"    defer std.testing.expect(!gpa.deinit()) catch @panic(\"leak\");"},
{"lineNum":" 1369","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1370","line":""},
{"lineNum":" 1371","line":"    // detect a small allocation double free, even though bucket is emptied"},
{"lineNum":" 1372","line":"    const index: usize = 6;"},
{"lineNum":" 1373","line":"    const size_class: usize = @as(usize, 1) << 6;"},
{"lineNum":" 1374","line":"    const small = try allocator.alloc(u8, size_class);"},
{"lineNum":" 1375","line":"    try std.testing.expect(GPA.searchBucket(gpa.buckets[index], @ptrToInt(small.ptr)) != null);"},
{"lineNum":" 1376","line":"    allocator.free(small);"},
{"lineNum":" 1377","line":"    try std.testing.expect(GPA.searchBucket(gpa.buckets[index], @ptrToInt(small.ptr)) == null);"},
{"lineNum":" 1378","line":"    try std.testing.expect(GPA.searchBucket(gpa.empty_buckets, @ptrToInt(small.ptr)) != null);"},
{"lineNum":" 1379","line":""},
{"lineNum":" 1380","line":"    // detect a large allocation double free"},
{"lineNum":" 1381","line":"    const large = try allocator.alloc(u8, 2 * page_size);"},
{"lineNum":" 1382","line":"    try std.testing.expect(gpa.large_allocations.contains(@ptrToInt(large.ptr)));"},
{"lineNum":" 1383","line":"    try std.testing.expectEqual(gpa.large_allocations.getEntry(@ptrToInt(large.ptr)).?.value_ptr.bytes, large);"},
{"lineNum":" 1384","line":"    allocator.free(large);"},
{"lineNum":" 1385","line":"    try std.testing.expect(gpa.large_allocations.contains(@ptrToInt(large.ptr)));"},
{"lineNum":" 1386","line":"    try std.testing.expect(gpa.large_allocations.getEntry(@ptrToInt(large.ptr)).?.value_ptr.freed);"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"    const normal_small = try allocator.alloc(u8, size_class);"},
{"lineNum":" 1389","line":"    defer allocator.free(normal_small);"},
{"lineNum":" 1390","line":"    const normal_large = try allocator.alloc(u8, 2 * page_size);"},
{"lineNum":" 1391","line":"    defer allocator.free(normal_large);"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"    // check that flushing retained metadata doesn\'t disturb live allocations"},
{"lineNum":" 1394","line":"    gpa.flushRetainedMetadata();"},
{"lineNum":" 1395","line":"    try std.testing.expect(gpa.empty_buckets == null);"},
{"lineNum":" 1396","line":"    try std.testing.expect(GPA.searchBucket(gpa.buckets[index], @ptrToInt(normal_small.ptr)) != null);"},
{"lineNum":" 1397","line":"    try std.testing.expect(gpa.large_allocations.contains(@ptrToInt(normal_large.ptr)));"},
{"lineNum":" 1398","line":"    try std.testing.expect(!gpa.large_allocations.contains(@ptrToInt(large.ptr)));"},
{"lineNum":" 1399","line":"}"},
{"lineNum":" 1400","line":""},
{"lineNum":" 1401","line":"test \"bug 9995 fix, large allocs count requested size not backing size\" {"},
{"lineNum":" 1402","line":"    // with AtLeast, buffer likely to be larger than requested, especially when shrinking"},
{"lineNum":" 1403","line":"    var gpa = GeneralPurposeAllocator(.{ .enable_memory_limit = true }){};"},
{"lineNum":" 1404","line":"    const allocator = gpa.allocator();"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"    var buf = try allocator.alignedAlloc(u8, 1, page_size + 1);"},
{"lineNum":" 1407","line":"    try std.testing.expect(gpa.total_requested_bytes == page_size + 1);"},
{"lineNum":" 1408","line":"    buf = try allocator.realloc(buf, 1);"},
{"lineNum":" 1409","line":"    try std.testing.expect(gpa.total_requested_bytes == 1);"},
{"lineNum":" 1410","line":"    buf = try allocator.realloc(buf, 2);"},
{"lineNum":" 1411","line":"    try std.testing.expect(gpa.total_requested_bytes == 2);"},
{"lineNum":" 1412","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 287, "covered" : 161,};
var merged_data = [];
