var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../std.zig\");"},
{"lineNum":"    2","line":"const math = std.math;"},
{"lineNum":"    3","line":"const assert = std.debug.assert;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const testing = std.testing;"},
{"lineNum":"    6","line":"const native_endian = @import(\"builtin\").target.cpu.arch.endian();"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"pub fn Reader("},
{"lineNum":"    9","line":"    comptime Context: type,"},
{"lineNum":"   10","line":"    comptime ReadError: type,"},
{"lineNum":"   11","line":"    /// Returns the number of bytes read. It may be less than buffer.len."},
{"lineNum":"   12","line":"    /// If the number of bytes read is 0, it means end of stream."},
{"lineNum":"   13","line":"    /// End of stream is not an error condition."},
{"lineNum":"   14","line":"    comptime readFn: fn (context: Context, buffer: []u8) ReadError!usize,"},
{"lineNum":"   15","line":") type {"},
{"lineNum":"   16","line":"    return struct {"},
{"lineNum":"   17","line":"        pub const Error = ReadError;"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"        context: Context,"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"        const Self = @This();"},
{"lineNum":"   22","line":""},
{"lineNum":"   23","line":"        /// Returns the number of bytes read. It may be less than buffer.len."},
{"lineNum":"   24","line":"        /// If the number of bytes read is 0, it means end of stream."},
{"lineNum":"   25","line":"        /// End of stream is not an error condition."},
{"lineNum":"   26","line":"        pub fn read(self: Self, buffer: []u8) Error!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   27","line":"            return readFn(self.context, buffer);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   28","line":"        }"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"        /// Returns the number of bytes read. If the number read is smaller than `buffer.len`, it"},
{"lineNum":"   31","line":"        /// means the stream reached the end. Reaching the end of a stream is not an error"},
{"lineNum":"   32","line":"        /// condition."},
{"lineNum":"   33","line":"        pub fn readAll(self: Self, buffer: []u8) Error!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"            return readAtLeast(self, buffer, buffer.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"        }"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"        /// Returns the number of bytes read, calling the underlying read"},
{"lineNum":"   38","line":"        /// function the minimal number of times until the buffer has at least"},
{"lineNum":"   39","line":"        /// `len` bytes filled. If the number read is less than `len` it means"},
{"lineNum":"   40","line":"        /// the stream reached the end. Reaching the end of the stream is not"},
{"lineNum":"   41","line":"        /// an error condition."},
{"lineNum":"   42","line":"        pub fn readAtLeast(self: Self, buffer: []u8, len: usize) Error!usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"            assert(len <= buffer.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"            var index: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"            while (index < len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"                const amt = try self.read(buffer[index..]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   47","line":"                if (amt == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"                index += amt;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   49","line":"            }"},
{"lineNum":"   50","line":"            return index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"        }"},
{"lineNum":"   52","line":""},
{"lineNum":"   53","line":"        /// If the number read would be smaller than `buf.len`, `error.EndOfStream` is returned instead."},
{"lineNum":"   54","line":"        pub fn readNoEof(self: Self, buf: []u8) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   55","line":"            const amt_read = try self.readAll(buf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"            if (amt_read < buf.len) return error.EndOfStream;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"        }"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"        /// Appends to the `std.ArrayList` contents by reading from the stream"},
{"lineNum":"   60","line":"        /// until end of stream is found."},
{"lineNum":"   61","line":"        /// If the number of bytes appended would exceed `max_append_size`,"},
{"lineNum":"   62","line":"        /// `error.StreamTooLong` is returned"},
{"lineNum":"   63","line":"        /// and the `std.ArrayList` has exactly `max_append_size` bytes appended."},
{"lineNum":"   64","line":"        pub fn readAllArrayList(self: Self, array_list: *std.ArrayList(u8), max_append_size: usize) !void {"},
{"lineNum":"   65","line":"            return self.readAllArrayListAligned(null, array_list, max_append_size);"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        pub fn readAllArrayListAligned("},
{"lineNum":"   69","line":"            self: Self,"},
{"lineNum":"   70","line":"            comptime alignment: ?u29,"},
{"lineNum":"   71","line":"            array_list: *std.ArrayListAligned(u8, alignment),"},
{"lineNum":"   72","line":"            max_append_size: usize,"},
{"lineNum":"   73","line":"        ) !void {"},
{"lineNum":"   74","line":"            try array_list.ensureTotalCapacity(math.min(max_append_size, 4096));"},
{"lineNum":"   75","line":"            const original_len = array_list.items.len;"},
{"lineNum":"   76","line":"            var start_index: usize = original_len;"},
{"lineNum":"   77","line":"            while (true) {"},
{"lineNum":"   78","line":"                array_list.expandToCapacity();"},
{"lineNum":"   79","line":"                const dest_slice = array_list.items[start_index..];"},
{"lineNum":"   80","line":"                const bytes_read = try self.readAll(dest_slice);"},
{"lineNum":"   81","line":"                start_index += bytes_read;"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"                if (start_index - original_len > max_append_size) {"},
{"lineNum":"   84","line":"                    array_list.shrinkAndFree(original_len + max_append_size);"},
{"lineNum":"   85","line":"                    return error.StreamTooLong;"},
{"lineNum":"   86","line":"                }"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"                if (bytes_read != dest_slice.len) {"},
{"lineNum":"   89","line":"                    array_list.shrinkAndFree(start_index);"},
{"lineNum":"   90","line":"                    return;"},
{"lineNum":"   91","line":"                }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"                // This will trigger ArrayList to expand superlinearly at whatever its growth rate is."},
{"lineNum":"   94","line":"                try array_list.ensureTotalCapacity(start_index + 1);"},
{"lineNum":"   95","line":"            }"},
{"lineNum":"   96","line":"        }"},
{"lineNum":"   97","line":""},
{"lineNum":"   98","line":"        /// Allocates enough memory to hold all the contents of the stream. If the allocated"},
{"lineNum":"   99","line":"        /// memory would be greater than `max_size`, returns `error.StreamTooLong`."},
{"lineNum":"  100","line":"        /// Caller owns returned memory."},
{"lineNum":"  101","line":"        /// If this function returns an error, the contents from the stream read so far are lost."},
{"lineNum":"  102","line":"        pub fn readAllAlloc(self: Self, allocator: mem.Allocator, max_size: usize) ![]u8 {"},
{"lineNum":"  103","line":"            var array_list = std.ArrayList(u8).init(allocator);"},
{"lineNum":"  104","line":"            defer array_list.deinit();"},
{"lineNum":"  105","line":"            try self.readAllArrayList(&array_list, max_size);"},
{"lineNum":"  106","line":"            return array_list.toOwnedSlice();"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"        /// Replaces the `std.ArrayList` contents by reading from the stream until `delimiter` is found."},
{"lineNum":"  110","line":"        /// Does not include the delimiter in the result."},
{"lineNum":"  111","line":"        /// If the `std.ArrayList` length would exceed `max_size`, `error.StreamTooLong` is returned and the"},
{"lineNum":"  112","line":"        /// `std.ArrayList` is populated with `max_size` bytes from the stream."},
{"lineNum":"  113","line":"        pub fn readUntilDelimiterArrayList("},
{"lineNum":"  114","line":"            self: Self,"},
{"lineNum":"  115","line":"            array_list: *std.ArrayList(u8),"},
{"lineNum":"  116","line":"            delimiter: u8,"},
{"lineNum":"  117","line":"            max_size: usize,"},
{"lineNum":"  118","line":"        ) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"            array_list.shrinkRetainingCapacity(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"            while (true) {"},
{"lineNum":"  121","line":"                if (array_list.items.len == max_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"                    return error.StreamTooLong;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"                }"},
{"lineNum":"  124","line":""},
{"lineNum":"  125","line":"                var byte: u8 = try self.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"                if (byte == delimiter) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                    return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":""},
{"lineNum":"  131","line":"                try array_list.append(byte);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"            }"},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"        /// Allocates enough memory to read until `delimiter`. If the allocated"},
{"lineNum":"  136","line":"        /// memory would be greater than `max_size`, returns `error.StreamTooLong`."},
{"lineNum":"  137","line":"        /// Caller owns returned memory."},
{"lineNum":"  138","line":"        /// If this function returns an error, the contents from the stream read so far are lost."},
{"lineNum":"  139","line":"        pub fn readUntilDelimiterAlloc("},
{"lineNum":"  140","line":"            self: Self,"},
{"lineNum":"  141","line":"            allocator: mem.Allocator,"},
{"lineNum":"  142","line":"            delimiter: u8,"},
{"lineNum":"  143","line":"            max_size: usize,"},
{"lineNum":"  144","line":"        ) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            var array_list = std.ArrayList(u8).init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  146","line":"            defer array_list.deinit();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  147","line":"            try self.readUntilDelimiterArrayList(&array_list, delimiter, max_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  148","line":"            return array_list.toOwnedSlice();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  149","line":"        }"},
{"lineNum":"  150","line":""},
{"lineNum":"  151","line":"        /// Reads from the stream until specified byte is found. If the buffer is not"},
{"lineNum":"  152","line":"        /// large enough to hold the entire contents, `error.StreamTooLong` is returned."},
{"lineNum":"  153","line":"        /// If end-of-stream is found, `error.EndOfStream` is returned."},
{"lineNum":"  154","line":"        /// Returns a slice of the stream data, with ptr equal to `buf.ptr`. The"},
{"lineNum":"  155","line":"        /// delimiter byte is written to the output buffer but is not included"},
{"lineNum":"  156","line":"        /// in the returned slice."},
{"lineNum":"  157","line":"        pub fn readUntilDelimiter(self: Self, buf: []u8, delimiter: u8) ![]u8 {"},
{"lineNum":"  158","line":"            var index: usize = 0;"},
{"lineNum":"  159","line":"            while (true) {"},
{"lineNum":"  160","line":"                if (index >= buf.len) return error.StreamTooLong;"},
{"lineNum":"  161","line":""},
{"lineNum":"  162","line":"                const byte = try self.readByte();"},
{"lineNum":"  163","line":"                buf[index] = byte;"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"                if (byte == delimiter) return buf[0..index];"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"                index += 1;"},
{"lineNum":"  168","line":"            }"},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        /// Allocates enough memory to read until `delimiter` or end-of-stream."},
{"lineNum":"  172","line":"        /// If the allocated memory would be greater than `max_size`, returns"},
{"lineNum":"  173","line":"        /// `error.StreamTooLong`. If end-of-stream is found, returns the rest"},
{"lineNum":"  174","line":"        /// of the stream. If this function is called again after that, returns"},
{"lineNum":"  175","line":"        /// null."},
{"lineNum":"  176","line":"        /// Caller owns returned memory."},
{"lineNum":"  177","line":"        /// If this function returns an error, the contents from the stream read so far are lost."},
{"lineNum":"  178","line":"        pub fn readUntilDelimiterOrEofAlloc("},
{"lineNum":"  179","line":"            self: Self,"},
{"lineNum":"  180","line":"            allocator: mem.Allocator,"},
{"lineNum":"  181","line":"            delimiter: u8,"},
{"lineNum":"  182","line":"            max_size: usize,"},
{"lineNum":"  183","line":"        ) !?[]u8 {"},
{"lineNum":"  184","line":"            var array_list = std.ArrayList(u8).init(allocator);"},
{"lineNum":"  185","line":"            defer array_list.deinit();"},
{"lineNum":"  186","line":"            self.readUntilDelimiterArrayList(&array_list, delimiter, max_size) catch |err| switch (err) {"},
{"lineNum":"  187","line":"                error.EndOfStream => if (array_list.items.len == 0) {"},
{"lineNum":"  188","line":"                    return null;"},
{"lineNum":"  189","line":"                } else {"},
{"lineNum":"  190","line":"                    return try array_list.toOwnedSlice();"},
{"lineNum":"  191","line":"                },"},
{"lineNum":"  192","line":"                else => |e| return e,"},
{"lineNum":"  193","line":"            };"},
{"lineNum":"  194","line":"            return try array_list.toOwnedSlice();"},
{"lineNum":"  195","line":"        }"},
{"lineNum":"  196","line":""},
{"lineNum":"  197","line":"        /// Reads from the stream until specified byte is found. If the buffer is not"},
{"lineNum":"  198","line":"        /// large enough to hold the entire contents, `error.StreamTooLong` is returned."},
{"lineNum":"  199","line":"        /// If end-of-stream is found, returns the rest of the stream. If this"},
{"lineNum":"  200","line":"        /// function is called again after that, returns null."},
{"lineNum":"  201","line":"        /// Returns a slice of the stream data, with ptr equal to `buf.ptr`. The"},
{"lineNum":"  202","line":"        /// delimiter byte is written to the output buffer but is not included"},
{"lineNum":"  203","line":"        /// in the returned slice."},
{"lineNum":"  204","line":"        pub fn readUntilDelimiterOrEof(self: Self, buf: []u8, delimiter: u8) !?[]u8 {"},
{"lineNum":"  205","line":"            var index: usize = 0;"},
{"lineNum":"  206","line":"            while (true) {"},
{"lineNum":"  207","line":"                if (index >= buf.len) return error.StreamTooLong;"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"                const byte = self.readByte() catch |err| switch (err) {"},
{"lineNum":"  210","line":"                    error.EndOfStream => {"},
{"lineNum":"  211","line":"                        if (index == 0) {"},
{"lineNum":"  212","line":"                            return null;"},
{"lineNum":"  213","line":"                        } else {"},
{"lineNum":"  214","line":"                            return buf[0..index];"},
{"lineNum":"  215","line":"                        }"},
{"lineNum":"  216","line":"                    },"},
{"lineNum":"  217","line":"                    else => |e| return e,"},
{"lineNum":"  218","line":"                };"},
{"lineNum":"  219","line":"                buf[index] = byte;"},
{"lineNum":"  220","line":""},
{"lineNum":"  221","line":"                if (byte == delimiter) return buf[0..index];"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"                index += 1;"},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        /// Reads from the stream until specified byte is found, discarding all data,"},
{"lineNum":"  228","line":"        /// including the delimiter."},
{"lineNum":"  229","line":"        /// If end-of-stream is found, this function succeeds."},
{"lineNum":"  230","line":"        pub fn skipUntilDelimiterOrEof(self: Self, delimiter: u8) !void {"},
{"lineNum":"  231","line":"            while (true) {"},
{"lineNum":"  232","line":"                const byte = self.readByte() catch |err| switch (err) {"},
{"lineNum":"  233","line":"                    error.EndOfStream => return,"},
{"lineNum":"  234","line":"                    else => |e| return e,"},
{"lineNum":"  235","line":"                };"},
{"lineNum":"  236","line":"                if (byte == delimiter) return;"},
{"lineNum":"  237","line":"            }"},
{"lineNum":"  238","line":"        }"},
{"lineNum":"  239","line":""},
{"lineNum":"  240","line":"        /// Reads 1 byte from the stream or returns `error.EndOfStream`."},
{"lineNum":"  241","line":"        pub fn readByte(self: Self) !u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            var result: [1]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"            const amt_read = try self.read(result[0..]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  244","line":"            if (amt_read < 1) return error.EndOfStream;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"            return result[0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"        /// Same as `readByte` except the returned byte is signed."},
{"lineNum":"  249","line":"        pub fn readByteSigned(self: Self) !i8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"            return @bitCast(i8, try self.readByte());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        /// Reads exactly `num_bytes` bytes and returns as an array."},
{"lineNum":"  254","line":"        /// `num_bytes` must be comptime-known"},
{"lineNum":"  255","line":"        pub fn readBytesNoEof(self: Self, comptime num_bytes: usize) ![num_bytes]u8 {","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  256","line":"            var bytes: [num_bytes]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  257","line":"            try self.readNoEof(&bytes);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  258","line":"            return bytes;","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"  259","line":"        }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        /// Reads bytes into the bounded array, until"},
{"lineNum":"  262","line":"        /// the bounded array is full, or the stream ends."},
{"lineNum":"  263","line":"        pub fn readIntoBoundedBytes("},
{"lineNum":"  264","line":"            self: Self,"},
{"lineNum":"  265","line":"            comptime num_bytes: usize,"},
{"lineNum":"  266","line":"            bounded: *std.BoundedArray(u8, num_bytes),"},
{"lineNum":"  267","line":"        ) !void {"},
{"lineNum":"  268","line":"            while (bounded.len < num_bytes) {"},
{"lineNum":"  269","line":"                const bytes_read = try self.read(bounded.unusedCapacitySlice());"},
{"lineNum":"  270","line":"                if (bytes_read == 0) return;"},
{"lineNum":"  271","line":"                bounded.len += bytes_read;"},
{"lineNum":"  272","line":"            }"},
{"lineNum":"  273","line":"        }"},
{"lineNum":"  274","line":""},
{"lineNum":"  275","line":"        /// Reads at most `num_bytes` and returns as a bounded array."},
{"lineNum":"  276","line":"        pub fn readBoundedBytes(self: Self, comptime num_bytes: usize) !std.BoundedArray(u8, num_bytes) {"},
{"lineNum":"  277","line":"            var result = std.BoundedArray(u8, num_bytes){};"},
{"lineNum":"  278","line":"            try self.readIntoBoundedBytes(num_bytes, &result);"},
{"lineNum":"  279","line":"            return result;"},
{"lineNum":"  280","line":"        }"},
{"lineNum":"  281","line":""},
{"lineNum":"  282","line":"        /// Reads a native-endian integer"},
{"lineNum":"  283","line":"        pub fn readIntNative(self: Self, comptime T: type) !T {"},
{"lineNum":"  284","line":"            const bytes = try self.readBytesNoEof((@typeInfo(T).Int.bits + 7) / 8);"},
{"lineNum":"  285","line":"            return mem.readIntNative(T, &bytes);"},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        /// Reads a foreign-endian integer"},
{"lineNum":"  289","line":"        pub fn readIntForeign(self: Self, comptime T: type) !T {"},
{"lineNum":"  290","line":"            const bytes = try self.readBytesNoEof((@typeInfo(T).Int.bits + 7) / 8);"},
{"lineNum":"  291","line":"            return mem.readIntForeign(T, &bytes);"},
{"lineNum":"  292","line":"        }"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"        pub fn readIntLittle(self: Self, comptime T: type) !T {"},
{"lineNum":"  295","line":"            const bytes = try self.readBytesNoEof((@typeInfo(T).Int.bits + 7) / 8);"},
{"lineNum":"  296","line":"            return mem.readIntLittle(T, &bytes);"},
{"lineNum":"  297","line":"        }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"        pub fn readIntBig(self: Self, comptime T: type) !T {"},
{"lineNum":"  300","line":"            const bytes = try self.readBytesNoEof((@typeInfo(T).Int.bits + 7) / 8);"},
{"lineNum":"  301","line":"            return mem.readIntBig(T, &bytes);"},
{"lineNum":"  302","line":"        }"},
{"lineNum":"  303","line":""},
{"lineNum":"  304","line":"        pub fn readInt(self: Self, comptime T: type, endian: std.builtin.Endian) !T {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  305","line":"            const bytes = try self.readBytesNoEof((@typeInfo(T).Int.bits + 7) / 8);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  306","line":"            return mem.readInt(T, &bytes, endian);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  307","line":"        }"},
{"lineNum":"  308","line":""},
{"lineNum":"  309","line":"        pub fn readVarInt(self: Self, comptime ReturnType: type, endian: std.builtin.Endian, size: usize) !ReturnType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":"            assert(size <= @sizeOf(ReturnType));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  311","line":"            var bytes_buf: [@sizeOf(ReturnType)]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"            const bytes = bytes_buf[0..size];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"            try self.readNoEof(bytes);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"            return mem.readVarInt(ReturnType, bytes, endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":""},
{"lineNum":"  317","line":"        /// Optional parameters for `skipBytes`"},
{"lineNum":"  318","line":"        pub const SkipBytesOptions = struct {"},
{"lineNum":"  319","line":"            buf_size: usize = 512,"},
{"lineNum":"  320","line":"        };"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"        // `num_bytes` is a `u64` to match `off_t`"},
{"lineNum":"  323","line":"        /// Reads `num_bytes` bytes from the stream and discards them"},
{"lineNum":"  324","line":"        pub fn skipBytes(self: Self, num_bytes: u64, comptime options: SkipBytesOptions) !void {"},
{"lineNum":"  325","line":"            var buf: [options.buf_size]u8 = undefined;"},
{"lineNum":"  326","line":"            var remaining = num_bytes;"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"            while (remaining > 0) {"},
{"lineNum":"  329","line":"                const amt = std.math.min(remaining, options.buf_size);"},
{"lineNum":"  330","line":"                try self.readNoEof(buf[0..amt]);"},
{"lineNum":"  331","line":"                remaining -= amt;"},
{"lineNum":"  332","line":"            }"},
{"lineNum":"  333","line":"        }"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"        /// Reads `slice.len` bytes from the stream and returns if they are the same as the passed slice"},
{"lineNum":"  336","line":"        pub fn isBytes(self: Self, slice: []const u8) !bool {"},
{"lineNum":"  337","line":"            var i: usize = 0;"},
{"lineNum":"  338","line":"            var matches = true;"},
{"lineNum":"  339","line":"            while (i < slice.len) : (i += 1) {"},
{"lineNum":"  340","line":"                if (slice[i] != try self.readByte()) {"},
{"lineNum":"  341","line":"                    matches = false;"},
{"lineNum":"  342","line":"                }"},
{"lineNum":"  343","line":"            }"},
{"lineNum":"  344","line":"            return matches;"},
{"lineNum":"  345","line":"        }"},
{"lineNum":"  346","line":""},
{"lineNum":"  347","line":"        pub fn readStruct(self: Self, comptime T: type) !T {"},
{"lineNum":"  348","line":"            // Only extern and packed structs have defined in-memory layout."},
{"lineNum":"  349","line":"            comptime assert(@typeInfo(T).Struct.layout != .Auto);"},
{"lineNum":"  350","line":"            var res: [1]T = undefined;"},
{"lineNum":"  351","line":"            try self.readNoEof(mem.sliceAsBytes(res[0..]));"},
{"lineNum":"  352","line":"            return res[0];"},
{"lineNum":"  353","line":"        }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"        pub fn readStructBig(self: Self, comptime T: type) !T {"},
{"lineNum":"  356","line":"            var res = try self.readStruct(T);"},
{"lineNum":"  357","line":"            if (native_endian != std.builtin.Endian.Big) {"},
{"lineNum":"  358","line":"                mem.byteSwapAllFields(T, &res);"},
{"lineNum":"  359","line":"            }"},
{"lineNum":"  360","line":"            return res;"},
{"lineNum":"  361","line":"        }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"        /// Reads an integer with the same size as the given enum\'s tag type. If the integer matches"},
{"lineNum":"  364","line":"        /// an enum tag, casts the integer to the enum tag and returns it. Otherwise, returns an error."},
{"lineNum":"  365","line":"        /// TODO optimization taking advantage of most fields being in order"},
{"lineNum":"  366","line":"        pub fn readEnum(self: Self, comptime Enum: type, endian: std.builtin.Endian) !Enum {"},
{"lineNum":"  367","line":"            const E = error{"},
{"lineNum":"  368","line":"                /// An integer was read, but it did not match any of the tags in the supplied enum."},
{"lineNum":"  369","line":"                InvalidValue,"},
{"lineNum":"  370","line":"            };"},
{"lineNum":"  371","line":"            const type_info = @typeInfo(Enum).Enum;"},
{"lineNum":"  372","line":"            const tag = try self.readInt(type_info.tag_type, endian);"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"            inline for (std.meta.fields(Enum)) |field| {"},
{"lineNum":"  375","line":"                if (tag == field.value) {"},
{"lineNum":"  376","line":"                    return @field(Enum, field.name);"},
{"lineNum":"  377","line":"                }"},
{"lineNum":"  378","line":"            }"},
{"lineNum":"  379","line":""},
{"lineNum":"  380","line":"            return E.InvalidValue;"},
{"lineNum":"  381","line":"        }"},
{"lineNum":"  382","line":"    };"},
{"lineNum":"  383","line":"}"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"test \"Reader\" {"},
{"lineNum":"  386","line":"    var buf = \"a\\x02\".*;"},
{"lineNum":"  387","line":"    var fis = std.io.fixedBufferStream(&buf);"},
{"lineNum":"  388","line":"    const reader = fis.reader();"},
{"lineNum":"  389","line":"    try testing.expect((try reader.readByte()) == \'a\');"},
{"lineNum":"  390","line":"    try testing.expect((try reader.readEnum(enum(u8) {"},
{"lineNum":"  391","line":"        a = 0,"},
{"lineNum":"  392","line":"        b = 99,"},
{"lineNum":"  393","line":"        c = 2,"},
{"lineNum":"  394","line":"        d = 3,"},
{"lineNum":"  395","line":"    }, undefined)) == .c);"},
{"lineNum":"  396","line":"    try testing.expectError(error.EndOfStream, reader.readByte());"},
{"lineNum":"  397","line":"}"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"test \"Reader.isBytes\" {"},
{"lineNum":"  400","line":"    var fis = std.io.fixedBufferStream(\"foobar\");"},
{"lineNum":"  401","line":"    const reader = fis.reader();"},
{"lineNum":"  402","line":"    try testing.expectEqual(true, try reader.isBytes(\"foo\"));"},
{"lineNum":"  403","line":"    try testing.expectEqual(false, try reader.isBytes(\"qux\"));"},
{"lineNum":"  404","line":"}"},
{"lineNum":"  405","line":""},
{"lineNum":"  406","line":"test \"Reader.skipBytes\" {"},
{"lineNum":"  407","line":"    var fis = std.io.fixedBufferStream(\"foobar\");"},
{"lineNum":"  408","line":"    const reader = fis.reader();"},
{"lineNum":"  409","line":"    try reader.skipBytes(3, .{});"},
{"lineNum":"  410","line":"    try testing.expect(try reader.isBytes(\"bar\"));"},
{"lineNum":"  411","line":"    try reader.skipBytes(0, .{});"},
{"lineNum":"  412","line":"    try testing.expectError(error.EndOfStream, reader.skipBytes(1, .{}));"},
{"lineNum":"  413","line":"}"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"test \"Reader.readUntilDelimiterArrayList returns ArrayLists with bytes read until the delimiter, then EndOfStream\" {"},
{"lineNum":"  416","line":"    const a = std.testing.allocator;"},
{"lineNum":"  417","line":"    var list = std.ArrayList(u8).init(a);"},
{"lineNum":"  418","line":"    defer list.deinit();"},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    var fis = std.io.fixedBufferStream(\"0000\\n1234\\n\");"},
{"lineNum":"  421","line":"    const reader = fis.reader();"},
{"lineNum":"  422","line":""},
{"lineNum":"  423","line":"    try reader.readUntilDelimiterArrayList(&list, \'\\n\', 5);"},
{"lineNum":"  424","line":"    try std.testing.expectEqualStrings(\"0000\", list.items);"},
{"lineNum":"  425","line":"    try reader.readUntilDelimiterArrayList(&list, \'\\n\', 5);"},
{"lineNum":"  426","line":"    try std.testing.expectEqualStrings(\"1234\", list.items);"},
{"lineNum":"  427","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiterArrayList(&list, \'\\n\', 5));"},
{"lineNum":"  428","line":"}"},
{"lineNum":"  429","line":""},
{"lineNum":"  430","line":"test \"Reader.readUntilDelimiterArrayList returns an empty ArrayList\" {"},
{"lineNum":"  431","line":"    const a = std.testing.allocator;"},
{"lineNum":"  432","line":"    var list = std.ArrayList(u8).init(a);"},
{"lineNum":"  433","line":"    defer list.deinit();"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"    var fis = std.io.fixedBufferStream(\"\\n\");"},
{"lineNum":"  436","line":"    const reader = fis.reader();"},
{"lineNum":"  437","line":""},
{"lineNum":"  438","line":"    try reader.readUntilDelimiterArrayList(&list, \'\\n\', 5);"},
{"lineNum":"  439","line":"    try std.testing.expectEqualStrings(\"\", list.items);"},
{"lineNum":"  440","line":"}"},
{"lineNum":"  441","line":""},
{"lineNum":"  442","line":"test \"Reader.readUntilDelimiterArrayList returns StreamTooLong, then an ArrayList with bytes read until the delimiter\" {"},
{"lineNum":"  443","line":"    const a = std.testing.allocator;"},
{"lineNum":"  444","line":"    var list = std.ArrayList(u8).init(a);"},
{"lineNum":"  445","line":"    defer list.deinit();"},
{"lineNum":"  446","line":""},
{"lineNum":"  447","line":"    var fis = std.io.fixedBufferStream(\"1234567\\n\");"},
{"lineNum":"  448","line":"    const reader = fis.reader();"},
{"lineNum":"  449","line":""},
{"lineNum":"  450","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterArrayList(&list, \'\\n\', 5));"},
{"lineNum":"  451","line":"    try std.testing.expectEqualStrings(\"12345\", list.items);"},
{"lineNum":"  452","line":"    try reader.readUntilDelimiterArrayList(&list, \'\\n\', 5);"},
{"lineNum":"  453","line":"    try std.testing.expectEqualStrings(\"67\", list.items);"},
{"lineNum":"  454","line":"}"},
{"lineNum":"  455","line":""},
{"lineNum":"  456","line":"test \"Reader.readUntilDelimiterArrayList returns EndOfStream\" {"},
{"lineNum":"  457","line":"    const a = std.testing.allocator;"},
{"lineNum":"  458","line":"    var list = std.ArrayList(u8).init(a);"},
{"lineNum":"  459","line":"    defer list.deinit();"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    var fis = std.io.fixedBufferStream(\"1234\");"},
{"lineNum":"  462","line":"    const reader = fis.reader();"},
{"lineNum":"  463","line":""},
{"lineNum":"  464","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiterArrayList(&list, \'\\n\', 5));"},
{"lineNum":"  465","line":"    try std.testing.expectEqualStrings(\"1234\", list.items);"},
{"lineNum":"  466","line":"}"},
{"lineNum":"  467","line":""},
{"lineNum":"  468","line":"test \"Reader.readUntilDelimiterAlloc returns ArrayLists with bytes read until the delimiter, then EndOfStream\" {"},
{"lineNum":"  469","line":"    const a = std.testing.allocator;"},
{"lineNum":"  470","line":""},
{"lineNum":"  471","line":"    var fis = std.io.fixedBufferStream(\"0000\\n1234\\n\");"},
{"lineNum":"  472","line":"    const reader = fis.reader();"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    {"},
{"lineNum":"  475","line":"        var result = try reader.readUntilDelimiterAlloc(a, \'\\n\', 5);"},
{"lineNum":"  476","line":"        defer a.free(result);"},
{"lineNum":"  477","line":"        try std.testing.expectEqualStrings(\"0000\", result);"},
{"lineNum":"  478","line":"    }"},
{"lineNum":"  479","line":""},
{"lineNum":"  480","line":"    {"},
{"lineNum":"  481","line":"        var result = try reader.readUntilDelimiterAlloc(a, \'\\n\', 5);"},
{"lineNum":"  482","line":"        defer a.free(result);"},
{"lineNum":"  483","line":"        try std.testing.expectEqualStrings(\"1234\", result);"},
{"lineNum":"  484","line":"    }"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiterAlloc(a, \'\\n\', 5));"},
{"lineNum":"  487","line":"}"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"test \"Reader.readUntilDelimiterAlloc returns an empty ArrayList\" {"},
{"lineNum":"  490","line":"    const a = std.testing.allocator;"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    var fis = std.io.fixedBufferStream(\"\\n\");"},
{"lineNum":"  493","line":"    const reader = fis.reader();"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    {"},
{"lineNum":"  496","line":"        var result = try reader.readUntilDelimiterAlloc(a, \'\\n\', 5);"},
{"lineNum":"  497","line":"        defer a.free(result);"},
{"lineNum":"  498","line":"        try std.testing.expectEqualStrings(\"\", result);"},
{"lineNum":"  499","line":"    }"},
{"lineNum":"  500","line":"}"},
{"lineNum":"  501","line":""},
{"lineNum":"  502","line":"test \"Reader.readUntilDelimiterAlloc returns StreamTooLong, then an ArrayList with bytes read until the delimiter\" {"},
{"lineNum":"  503","line":"    const a = std.testing.allocator;"},
{"lineNum":"  504","line":""},
{"lineNum":"  505","line":"    var fis = std.io.fixedBufferStream(\"1234567\\n\");"},
{"lineNum":"  506","line":"    const reader = fis.reader();"},
{"lineNum":"  507","line":""},
{"lineNum":"  508","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterAlloc(a, \'\\n\', 5));"},
{"lineNum":"  509","line":""},
{"lineNum":"  510","line":"    var result = try reader.readUntilDelimiterAlloc(a, \'\\n\', 5);"},
{"lineNum":"  511","line":"    defer a.free(result);"},
{"lineNum":"  512","line":"    try std.testing.expectEqualStrings(\"67\", result);"},
{"lineNum":"  513","line":"}"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"test \"Reader.readUntilDelimiterAlloc returns EndOfStream\" {"},
{"lineNum":"  516","line":"    const a = std.testing.allocator;"},
{"lineNum":"  517","line":""},
{"lineNum":"  518","line":"    var fis = std.io.fixedBufferStream(\"1234\");"},
{"lineNum":"  519","line":"    const reader = fis.reader();"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiterAlloc(a, \'\\n\', 5));"},
{"lineNum":"  522","line":"}"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"test \"Reader.readUntilDelimiter returns bytes read until the delimiter\" {"},
{"lineNum":"  525","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  526","line":"    var fis = std.io.fixedBufferStream(\"0000\\n1234\\n\");"},
{"lineNum":"  527","line":"    const reader = fis.reader();"},
{"lineNum":"  528","line":"    try std.testing.expectEqualStrings(\"0000\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  529","line":"    try std.testing.expectEqualStrings(\"1234\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"test \"Reader.readUntilDelimiter returns an empty string\" {"},
{"lineNum":"  533","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  534","line":"    var fis = std.io.fixedBufferStream(\"\\n\");"},
{"lineNum":"  535","line":"    const reader = fis.reader();"},
{"lineNum":"  536","line":"    try std.testing.expectEqualStrings(\"\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  537","line":"}"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"test \"Reader.readUntilDelimiter returns StreamTooLong, then an empty string\" {"},
{"lineNum":"  540","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  541","line":"    var fis = std.io.fixedBufferStream(\"12345\\n\");"},
{"lineNum":"  542","line":"    const reader = fis.reader();"},
{"lineNum":"  543","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  544","line":"    try std.testing.expectEqualStrings(\"\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  545","line":"}"},
{"lineNum":"  546","line":""},
{"lineNum":"  547","line":"test \"Reader.readUntilDelimiter returns StreamTooLong, then bytes read until the delimiter\" {"},
{"lineNum":"  548","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  549","line":"    var fis = std.io.fixedBufferStream(\"1234567\\n\");"},
{"lineNum":"  550","line":"    const reader = fis.reader();"},
{"lineNum":"  551","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  552","line":"    try std.testing.expectEqualStrings(\"67\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  553","line":"}"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"test \"Reader.readUntilDelimiter returns EndOfStream\" {"},
{"lineNum":"  556","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  557","line":"    var fis = std.io.fixedBufferStream(\"\");"},
{"lineNum":"  558","line":"    const reader = fis.reader();"},
{"lineNum":"  559","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  560","line":"}"},
{"lineNum":"  561","line":""},
{"lineNum":"  562","line":"test \"Reader.readUntilDelimiter returns bytes read until delimiter, then EndOfStream\" {"},
{"lineNum":"  563","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  564","line":"    var fis = std.io.fixedBufferStream(\"1234\\n\");"},
{"lineNum":"  565","line":"    const reader = fis.reader();"},
{"lineNum":"  566","line":"    try std.testing.expectEqualStrings(\"1234\", try reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  567","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  568","line":"}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"test \"Reader.readUntilDelimiter returns EndOfStream\" {"},
{"lineNum":"  571","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  572","line":"    var fis = std.io.fixedBufferStream(\"1234\");"},
{"lineNum":"  573","line":"    const reader = fis.reader();"},
{"lineNum":"  574","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  575","line":"}"},
{"lineNum":"  576","line":""},
{"lineNum":"  577","line":"test \"Reader.readUntilDelimiter returns StreamTooLong, then EndOfStream\" {"},
{"lineNum":"  578","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  579","line":"    var fis = std.io.fixedBufferStream(\"12345\");"},
{"lineNum":"  580","line":"    const reader = fis.reader();"},
{"lineNum":"  581","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  582","line":"    try std.testing.expectError(error.EndOfStream, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  583","line":"}"},
{"lineNum":"  584","line":""},
{"lineNum":"  585","line":"test \"Reader.readUntilDelimiter writes all bytes read to the output buffer\" {"},
{"lineNum":"  586","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  587","line":"    var fis = std.io.fixedBufferStream(\"0000\\n12345\");"},
{"lineNum":"  588","line":"    const reader = fis.reader();"},
{"lineNum":"  589","line":"    _ = try reader.readUntilDelimiter(&buf, \'\\n\');"},
{"lineNum":"  590","line":"    try std.testing.expectEqualStrings(\"0000\\n\", &buf);"},
{"lineNum":"  591","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiter(&buf, \'\\n\'));"},
{"lineNum":"  592","line":"    try std.testing.expectEqualStrings(\"12345\", &buf);"},
{"lineNum":"  593","line":"}"},
{"lineNum":"  594","line":""},
{"lineNum":"  595","line":"test \"Reader.readUntilDelimiterOrEofAlloc returns ArrayLists with bytes read until the delimiter, then EndOfStream\" {"},
{"lineNum":"  596","line":"    const a = std.testing.allocator;"},
{"lineNum":"  597","line":""},
{"lineNum":"  598","line":"    var fis = std.io.fixedBufferStream(\"0000\\n1234\\n\");"},
{"lineNum":"  599","line":"    const reader = fis.reader();"},
{"lineNum":"  600","line":""},
{"lineNum":"  601","line":"    {"},
{"lineNum":"  602","line":"        var result = (try reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5)).?;"},
{"lineNum":"  603","line":"        defer a.free(result);"},
{"lineNum":"  604","line":"        try std.testing.expectEqualStrings(\"0000\", result);"},
{"lineNum":"  605","line":"    }"},
{"lineNum":"  606","line":""},
{"lineNum":"  607","line":"    {"},
{"lineNum":"  608","line":"        var result = (try reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5)).?;"},
{"lineNum":"  609","line":"        defer a.free(result);"},
{"lineNum":"  610","line":"        try std.testing.expectEqualStrings(\"1234\", result);"},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":""},
{"lineNum":"  613","line":"    try std.testing.expect((try reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5)) == null);"},
{"lineNum":"  614","line":"}"},
{"lineNum":"  615","line":""},
{"lineNum":"  616","line":"test \"Reader.readUntilDelimiterOrEofAlloc returns an empty ArrayList\" {"},
{"lineNum":"  617","line":"    const a = std.testing.allocator;"},
{"lineNum":"  618","line":""},
{"lineNum":"  619","line":"    var fis = std.io.fixedBufferStream(\"\\n\");"},
{"lineNum":"  620","line":"    const reader = fis.reader();"},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"    {"},
{"lineNum":"  623","line":"        var result = (try reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5)).?;"},
{"lineNum":"  624","line":"        defer a.free(result);"},
{"lineNum":"  625","line":"        try std.testing.expectEqualStrings(\"\", result);"},
{"lineNum":"  626","line":"    }"},
{"lineNum":"  627","line":"}"},
{"lineNum":"  628","line":""},
{"lineNum":"  629","line":"test \"Reader.readUntilDelimiterOrEofAlloc returns StreamTooLong, then an ArrayList with bytes read until the delimiter\" {"},
{"lineNum":"  630","line":"    const a = std.testing.allocator;"},
{"lineNum":"  631","line":""},
{"lineNum":"  632","line":"    var fis = std.io.fixedBufferStream(\"1234567\\n\");"},
{"lineNum":"  633","line":"    const reader = fis.reader();"},
{"lineNum":"  634","line":""},
{"lineNum":"  635","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5));"},
{"lineNum":"  636","line":""},
{"lineNum":"  637","line":"    var result = (try reader.readUntilDelimiterOrEofAlloc(a, \'\\n\', 5)).?;"},
{"lineNum":"  638","line":"    defer a.free(result);"},
{"lineNum":"  639","line":"    try std.testing.expectEqualStrings(\"67\", result);"},
{"lineNum":"  640","line":"}"},
{"lineNum":"  641","line":""},
{"lineNum":"  642","line":"test \"Reader.readUntilDelimiterOrEof returns bytes read until the delimiter\" {"},
{"lineNum":"  643","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  644","line":"    var fis = std.io.fixedBufferStream(\"0000\\n1234\\n\");"},
{"lineNum":"  645","line":"    const reader = fis.reader();"},
{"lineNum":"  646","line":"    try std.testing.expectEqualStrings(\"0000\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  647","line":"    try std.testing.expectEqualStrings(\"1234\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"test \"Reader.readUntilDelimiterOrEof returns an empty string\" {"},
{"lineNum":"  651","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  652","line":"    var fis = std.io.fixedBufferStream(\"\\n\");"},
{"lineNum":"  653","line":"    const reader = fis.reader();"},
{"lineNum":"  654","line":"    try std.testing.expectEqualStrings(\"\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  655","line":"}"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"test \"Reader.readUntilDelimiterOrEof returns StreamTooLong, then an empty string\" {"},
{"lineNum":"  658","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  659","line":"    var fis = std.io.fixedBufferStream(\"12345\\n\");"},
{"lineNum":"  660","line":"    const reader = fis.reader();"},
{"lineNum":"  661","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterOrEof(&buf, \'\\n\'));"},
{"lineNum":"  662","line":"    try std.testing.expectEqualStrings(\"\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  663","line":"}"},
{"lineNum":"  664","line":""},
{"lineNum":"  665","line":"test \"Reader.readUntilDelimiterOrEof returns StreamTooLong, then bytes read until the delimiter\" {"},
{"lineNum":"  666","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  667","line":"    var fis = std.io.fixedBufferStream(\"1234567\\n\");"},
{"lineNum":"  668","line":"    const reader = fis.reader();"},
{"lineNum":"  669","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterOrEof(&buf, \'\\n\'));"},
{"lineNum":"  670","line":"    try std.testing.expectEqualStrings(\"67\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  671","line":"}"},
{"lineNum":"  672","line":""},
{"lineNum":"  673","line":"test \"Reader.readUntilDelimiterOrEof returns null\" {"},
{"lineNum":"  674","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  675","line":"    var fis = std.io.fixedBufferStream(\"\");"},
{"lineNum":"  676","line":"    const reader = fis.reader();"},
{"lineNum":"  677","line":"    try std.testing.expect((try reader.readUntilDelimiterOrEof(&buf, \'\\n\')) == null);"},
{"lineNum":"  678","line":"}"},
{"lineNum":"  679","line":""},
{"lineNum":"  680","line":"test \"Reader.readUntilDelimiterOrEof returns bytes read until delimiter, then null\" {"},
{"lineNum":"  681","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  682","line":"    var fis = std.io.fixedBufferStream(\"1234\\n\");"},
{"lineNum":"  683","line":"    const reader = fis.reader();"},
{"lineNum":"  684","line":"    try std.testing.expectEqualStrings(\"1234\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  685","line":"    try std.testing.expect((try reader.readUntilDelimiterOrEof(&buf, \'\\n\')) == null);"},
{"lineNum":"  686","line":"}"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"test \"Reader.readUntilDelimiterOrEof returns bytes read until end-of-stream\" {"},
{"lineNum":"  689","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  690","line":"    var fis = std.io.fixedBufferStream(\"1234\");"},
{"lineNum":"  691","line":"    const reader = fis.reader();"},
{"lineNum":"  692","line":"    try std.testing.expectEqualStrings(\"1234\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  693","line":"}"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"test \"Reader.readUntilDelimiterOrEof returns StreamTooLong, then bytes read until end-of-stream\" {"},
{"lineNum":"  696","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  697","line":"    var fis = std.io.fixedBufferStream(\"1234567\");"},
{"lineNum":"  698","line":"    const reader = fis.reader();"},
{"lineNum":"  699","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterOrEof(&buf, \'\\n\'));"},
{"lineNum":"  700","line":"    try std.testing.expectEqualStrings(\"67\", (try reader.readUntilDelimiterOrEof(&buf, \'\\n\')).?);"},
{"lineNum":"  701","line":"}"},
{"lineNum":"  702","line":""},
{"lineNum":"  703","line":"test \"Reader.readUntilDelimiterOrEof writes all bytes read to the output buffer\" {"},
{"lineNum":"  704","line":"    var buf: [5]u8 = undefined;"},
{"lineNum":"  705","line":"    var fis = std.io.fixedBufferStream(\"0000\\n12345\");"},
{"lineNum":"  706","line":"    const reader = fis.reader();"},
{"lineNum":"  707","line":"    _ = try reader.readUntilDelimiterOrEof(&buf, \'\\n\');"},
{"lineNum":"  708","line":"    try std.testing.expectEqualStrings(\"0000\\n\", &buf);"},
{"lineNum":"  709","line":"    try std.testing.expectError(error.StreamTooLong, reader.readUntilDelimiterOrEof(&buf, \'\\n\'));"},
{"lineNum":"  710","line":"    try std.testing.expectEqualStrings(\"12345\", &buf);"},
{"lineNum":"  711","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 48, "covered" : 0,};
var merged_data = [];
