var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"../../std.zig\");"},
{"lineNum":"    2","line":"const elf = std.elf;"},
{"lineNum":"    3","line":"const linux = std.os.linux;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub fn lookup(vername: []const u8, name: []const u8) usize {","class":"lineCov","hits":"1","order":"408","possible_hits":"1",},
{"lineNum":"    8","line":"    const vdso_addr = std.os.system.getauxval(std.elf.AT_SYSINFO_EHDR);","class":"lineCov","hits":"1","order":"409","possible_hits":"1",},
{"lineNum":"    9","line":"    if (vdso_addr == 0) return 0;","class":"lineCov","hits":"1","order":"416","possible_hits":"1",},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"    const eh = @intToPtr(*elf.Ehdr, vdso_addr);","class":"lineCov","hits":"1","order":"417","possible_hits":"1",},
{"lineNum":"   12","line":"    var ph_addr: usize = vdso_addr + eh.e_phoff;","class":"lineCov","hits":"1","order":"418","possible_hits":"1",},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"    var maybe_dynv: ?[*]usize = null;","class":"lineCov","hits":"1","order":"419","possible_hits":"1",},
{"lineNum":"   15","line":"    var base: usize = maxInt(usize);","class":"lineCov","hits":"1","order":"420","possible_hits":"1",},
{"lineNum":"   16","line":"    {"},
{"lineNum":"   17","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"421","possible_hits":"1",},
{"lineNum":"   18","line":"        while (i < eh.e_phnum) : ({","class":"lineCov","hits":"1","order":"422","possible_hits":"1",},
{"lineNum":"   19","line":"            i += 1;","class":"lineCov","hits":"1","order":"426","possible_hits":"1",},
{"lineNum":"   20","line":"            ph_addr += eh.e_phentsize;","class":"lineCov","hits":"2","order":"427","possible_hits":"2",},
{"lineNum":"   21","line":"        }) {"},
{"lineNum":"   22","line":"            const this_ph = @intToPtr(*elf.Phdr, ph_addr);","class":"lineCov","hits":"2","order":"423","possible_hits":"2",},
{"lineNum":"   23","line":"            switch (this_ph.p_type) {","class":"lineCov","hits":"1","order":"424","possible_hits":"1",},
{"lineNum":"   24","line":"                // On WSL1 as well as older kernels, the VDSO ELF image is pre-linked in the upper half"},
{"lineNum":"   25","line":"                // of the memory space (e.g. p_vaddr = 0xffffffffff700000 on WSL1)."},
{"lineNum":"   26","line":"                // Wrapping operations are used on this line as well as subsequent calculations relative to base"},
{"lineNum":"   27","line":"                // (lines 47, 78) to ensure no overflow check is tripped."},
{"lineNum":"   28","line":"                elf.PT_LOAD => base = vdso_addr +% this_ph.p_offset -% this_ph.p_vaddr,","class":"lineCov","hits":"1","order":"425","possible_hits":"1",},
{"lineNum":"   29","line":"                elf.PT_DYNAMIC => maybe_dynv = @intToPtr([*]usize, vdso_addr + this_ph.p_offset),","class":"lineCov","hits":"2","order":"428","possible_hits":"2",},
{"lineNum":"   30","line":"                else => {},"},
{"lineNum":"   31","line":"            }"},
{"lineNum":"   32","line":"        }"},
{"lineNum":"   33","line":"    }"},
{"lineNum":"   34","line":"    const dynv = maybe_dynv orelse return 0;","class":"lineCov","hits":"1","order":"429","possible_hits":"1",},
{"lineNum":"   35","line":"    if (base == maxInt(usize)) return 0;","class":"lineCov","hits":"1","order":"430","possible_hits":"1",},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    var maybe_strings: ?[*]u8 = null;","class":"lineCov","hits":"1","order":"431","possible_hits":"1",},
{"lineNum":"   38","line":"    var maybe_syms: ?[*]elf.Sym = null;","class":"lineCov","hits":"1","order":"432","possible_hits":"1",},
{"lineNum":"   39","line":"    var maybe_hashtab: ?[*]linux.Elf_Symndx = null;","class":"lineCov","hits":"1","order":"433","possible_hits":"1",},
{"lineNum":"   40","line":"    var maybe_versym: ?[*]u16 = null;","class":"lineCov","hits":"1","order":"434","possible_hits":"1",},
{"lineNum":"   41","line":"    var maybe_verdef: ?*elf.Verdef = null;","class":"lineCov","hits":"1","order":"435","possible_hits":"1",},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    {"},
{"lineNum":"   44","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"436","possible_hits":"1",},
{"lineNum":"   45","line":"        while (dynv[i] != 0) : (i += 2) {","class":"lineCov","hits":"3","order":"437","possible_hits":"3",},
{"lineNum":"   46","line":"            const p = base +% dynv[i + 1];","class":"lineCov","hits":"2","order":"438","possible_hits":"2",},
{"lineNum":"   47","line":"            switch (dynv[i]) {","class":"lineCov","hits":"1","order":"439","possible_hits":"1",},
{"lineNum":"   48","line":"                elf.DT_STRTAB => maybe_strings = @intToPtr([*]u8, p),","class":"lineCov","hits":"1","order":"442","possible_hits":"1",},
{"lineNum":"   49","line":"                elf.DT_SYMTAB => maybe_syms = @intToPtr([*]elf.Sym, p),","class":"lineCov","hits":"1","order":"443","possible_hits":"1",},
{"lineNum":"   50","line":"                elf.DT_HASH => maybe_hashtab = @intToPtr([*]linux.Elf_Symndx, p),","class":"lineCov","hits":"1","order":"441","possible_hits":"1",},
{"lineNum":"   51","line":"                elf.DT_VERSYM => maybe_versym = @intToPtr([*]u16, p),","class":"lineCov","hits":"1","order":"444","possible_hits":"1",},
{"lineNum":"   52","line":"                elf.DT_VERDEF => maybe_verdef = @intToPtr(*elf.Verdef, p),","class":"lineCov","hits":"2","order":"440","possible_hits":"2",},
{"lineNum":"   53","line":"                else => {},"},
{"lineNum":"   54","line":"            }"},
{"lineNum":"   55","line":"        }"},
{"lineNum":"   56","line":"    }"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    const strings = maybe_strings orelse return 0;","class":"lineCov","hits":"1","order":"445","possible_hits":"1",},
{"lineNum":"   59","line":"    const syms = maybe_syms orelse return 0;","class":"lineCov","hits":"1","order":"446","possible_hits":"1",},
{"lineNum":"   60","line":"    const hashtab = maybe_hashtab orelse return 0;","class":"lineCov","hits":"1","order":"447","possible_hits":"1",},
{"lineNum":"   61","line":"    if (maybe_verdef == null) maybe_versym = null;","class":"lineCov","hits":"1","order":"448","possible_hits":"1",},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    const OK_TYPES = (1 << elf.STT_NOTYPE | 1 << elf.STT_OBJECT | 1 << elf.STT_FUNC | 1 << elf.STT_COMMON);"},
{"lineNum":"   64","line":"    const OK_BINDS = (1 << elf.STB_GLOBAL | 1 << elf.STB_WEAK | 1 << elf.STB_GNU_UNIQUE);"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    var i: usize = 0;","class":"lineCov","hits":"1","order":"449","possible_hits":"1",},
{"lineNum":"   67","line":"    while (i < hashtab[1]) : (i += 1) {","class":"linePartCov","hits":"2","order":"450","possible_hits":"3",},
{"lineNum":"   68","line":"        if (0 == (@as(u32, 1) << @intCast(u5, syms[i].st_info & 0xf) & OK_TYPES)) continue;","class":"lineCov","hits":"2","order":"451","possible_hits":"2",},
{"lineNum":"   69","line":"        if (0 == (@as(u32, 1) << @intCast(u5, syms[i].st_info >> 4) & OK_BINDS)) continue;","class":"lineCov","hits":"1","order":"452","possible_hits":"1",},
{"lineNum":"   70","line":"        if (0 == syms[i].st_shndx) continue;","class":"lineCov","hits":"1","order":"453","possible_hits":"1",},
{"lineNum":"   71","line":"        const sym_name = @ptrCast([*:0]u8, strings + syms[i].st_name);","class":"lineCov","hits":"1","order":"454","possible_hits":"1",},
{"lineNum":"   72","line":"        if (!mem.eql(u8, name, mem.sliceTo(sym_name, 0))) continue;","class":"lineCov","hits":"1","order":"455","possible_hits":"1",},
{"lineNum":"   73","line":"        if (maybe_versym) |versym| {","class":"lineCov","hits":"1","order":"456","possible_hits":"1",},
{"lineNum":"   74","line":"            if (!checkver(maybe_verdef.?, versym[i], vername, strings))","class":"lineCov","hits":"1","order":"457","possible_hits":"1",},
{"lineNum":"   75","line":"                continue;"},
{"lineNum":"   76","line":"        }"},
{"lineNum":"   77","line":"        return base +% syms[i].st_value;","class":"lineCov","hits":"1","order":"467","possible_hits":"1",},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"}"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"fn checkver(def_arg: *elf.Verdef, vsym_arg: i32, vername: []const u8, strings: [*]u8) bool {","class":"lineCov","hits":"1","order":"458","possible_hits":"1",},
{"lineNum":"   84","line":"    var def = def_arg;","class":"lineCov","hits":"1","order":"459","possible_hits":"1",},
{"lineNum":"   85","line":"    const vsym = @bitCast(u32, vsym_arg) & 0x7fff;","class":"lineCov","hits":"1","order":"460","possible_hits":"1",},
{"lineNum":"   86","line":"    while (true) {"},
{"lineNum":"   87","line":"        if (0 == (def.vd_flags & elf.VER_FLG_BASE) and (def.vd_ndx & 0x7fff) == vsym)","class":"lineCov","hits":"1","order":"461","possible_hits":"1",},
{"lineNum":"   88","line":"            break;"},
{"lineNum":"   89","line":"        if (def.vd_next == 0)","class":"lineCov","hits":"1","order":"462","possible_hits":"1",},
{"lineNum":"   90","line":"            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"        def = @intToPtr(*elf.Verdef, @ptrToInt(def) + def.vd_next);","class":"lineCov","hits":"1","order":"463","possible_hits":"1",},
{"lineNum":"   92","line":"    }"},
{"lineNum":"   93","line":"    const aux = @intToPtr(*elf.Verdaux, @ptrToInt(def) + def.vd_aux);","class":"lineCov","hits":"1","order":"464","possible_hits":"1",},
{"lineNum":"   94","line":"    const vda_name = @ptrCast([*:0]u8, strings + aux.vda_name);","class":"lineCov","hits":"1","order":"465","possible_hits":"1",},
{"lineNum":"   95","line":"    return mem.eql(u8, vername, mem.sliceTo(vda_name, 0));","class":"lineCov","hits":"1","order":"466","possible_hits":"1",},
{"lineNum":"   96","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 56, "covered" : 54,};
var merged_data = [];
