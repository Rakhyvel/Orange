var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const root = @import(\"root\");"},
{"lineNum":"    4","line":"const assert = std.debug.assert;"},
{"lineNum":"    5","line":"const testing = std.testing;"},
{"lineNum":"    6","line":"const mem = std.mem;"},
{"lineNum":"    7","line":"const os = std.os;"},
{"lineNum":"    8","line":"const c = std.c;"},
{"lineNum":"    9","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"   10","line":"const Allocator = std.mem.Allocator;"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"pub const LoggingAllocator = @import(\"heap/logging_allocator.zig\").LoggingAllocator;"},
{"lineNum":"   13","line":"pub const loggingAllocator = @import(\"heap/logging_allocator.zig\").loggingAllocator;"},
{"lineNum":"   14","line":"pub const ScopedLoggingAllocator = @import(\"heap/logging_allocator.zig\").ScopedLoggingAllocator;"},
{"lineNum":"   15","line":"pub const LogToWriterAllocator = @import(\"heap/log_to_writer_allocator.zig\").LogToWriterAllocator;"},
{"lineNum":"   16","line":"pub const logToWriterAllocator = @import(\"heap/log_to_writer_allocator.zig\").logToWriterAllocator;"},
{"lineNum":"   17","line":"pub const ArenaAllocator = @import(\"heap/arena_allocator.zig\").ArenaAllocator;"},
{"lineNum":"   18","line":"pub const GeneralPurposeAllocator = @import(\"heap/general_purpose_allocator.zig\").GeneralPurposeAllocator;"},
{"lineNum":"   19","line":"pub const WasmAllocator = @import(\"heap/WasmAllocator.zig\");"},
{"lineNum":"   20","line":"pub const WasmPageAllocator = @import(\"heap/WasmPageAllocator.zig\");"},
{"lineNum":"   21","line":"pub const PageAllocator = @import(\"heap/PageAllocator.zig\");"},
{"lineNum":"   22","line":"pub const ThreadSafeAllocator = @import(\"heap/ThreadSafeAllocator.zig\");"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"const memory_pool = @import(\"heap/memory_pool.zig\");"},
{"lineNum":"   25","line":"pub const MemoryPool = memory_pool.MemoryPool;"},
{"lineNum":"   26","line":"pub const MemoryPoolAligned = memory_pool.MemoryPoolAligned;"},
{"lineNum":"   27","line":"pub const MemoryPoolExtra = memory_pool.MemoryPoolExtra;"},
{"lineNum":"   28","line":"pub const MemoryPoolOptions = memory_pool.Options;"},
{"lineNum":"   29","line":""},
{"lineNum":"   30","line":"/// TODO Utilize this on Windows."},
{"lineNum":"   31","line":"pub var next_mmap_addr_hint: ?[*]align(mem.page_size) u8 = null;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"const CAllocator = struct {"},
{"lineNum":"   34","line":"    comptime {"},
{"lineNum":"   35","line":"        if (!builtin.link_libc) {"},
{"lineNum":"   36","line":"            @compileError(\"C allocator is only available when linking against libc\");"},
{"lineNum":"   37","line":"        }"},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"    usingnamespace if (@hasDecl(c, \"malloc_size\"))"},
{"lineNum":"   41","line":"        struct {"},
{"lineNum":"   42","line":"            pub const supports_malloc_size = true;"},
{"lineNum":"   43","line":"            pub const malloc_size = c.malloc_size;"},
{"lineNum":"   44","line":"        }"},
{"lineNum":"   45","line":"    else if (@hasDecl(c, \"malloc_usable_size\"))"},
{"lineNum":"   46","line":"        struct {"},
{"lineNum":"   47","line":"            pub const supports_malloc_size = true;"},
{"lineNum":"   48","line":"            pub const malloc_size = c.malloc_usable_size;"},
{"lineNum":"   49","line":"        }"},
{"lineNum":"   50","line":"    else if (@hasDecl(c, \"_msize\"))"},
{"lineNum":"   51","line":"        struct {"},
{"lineNum":"   52","line":"            pub const supports_malloc_size = true;"},
{"lineNum":"   53","line":"            pub const malloc_size = c._msize;"},
{"lineNum":"   54","line":"        }"},
{"lineNum":"   55","line":"    else"},
{"lineNum":"   56","line":"        struct {"},
{"lineNum":"   57","line":"            pub const supports_malloc_size = false;"},
{"lineNum":"   58","line":"        };"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"    pub const supports_posix_memalign = @hasDecl(c, \"posix_memalign\");"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    fn getHeader(ptr: [*]u8) *[*]u8 {"},
{"lineNum":"   63","line":"        return @intToPtr(*[*]u8, @ptrToInt(ptr) - @sizeOf(usize));"},
{"lineNum":"   64","line":"    }"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"    fn alignedAlloc(len: usize, log2_align: u8) ?[*]u8 {"},
{"lineNum":"   67","line":"        const alignment = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_align);"},
{"lineNum":"   68","line":"        if (supports_posix_memalign) {"},
{"lineNum":"   69","line":"            // The posix_memalign only accepts alignment values that are a"},
{"lineNum":"   70","line":"            // multiple of the pointer size"},
{"lineNum":"   71","line":"            const eff_alignment = @max(alignment, @sizeOf(usize));"},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"            var aligned_ptr: ?*anyopaque = undefined;"},
{"lineNum":"   74","line":"            if (c.posix_memalign(&aligned_ptr, eff_alignment, len) != 0)"},
{"lineNum":"   75","line":"                return null;"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"            return @ptrCast([*]u8, aligned_ptr);"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        // Thin wrapper around regular malloc, overallocate to account for"},
{"lineNum":"   81","line":"        // alignment padding and store the orignal malloc()\'ed pointer before"},
{"lineNum":"   82","line":"        // the aligned address."},
{"lineNum":"   83","line":"        var unaligned_ptr = @ptrCast([*]u8, c.malloc(len + alignment - 1 + @sizeOf(usize)) orelse return null);"},
{"lineNum":"   84","line":"        const unaligned_addr = @ptrToInt(unaligned_ptr);"},
{"lineNum":"   85","line":"        const aligned_addr = mem.alignForward(unaligned_addr + @sizeOf(usize), alignment);"},
{"lineNum":"   86","line":"        var aligned_ptr = unaligned_ptr + (aligned_addr - unaligned_addr);"},
{"lineNum":"   87","line":"        getHeader(aligned_ptr).* = unaligned_ptr;"},
{"lineNum":"   88","line":""},
{"lineNum":"   89","line":"        return aligned_ptr;"},
{"lineNum":"   90","line":"    }"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"    fn alignedFree(ptr: [*]u8) void {"},
{"lineNum":"   93","line":"        if (supports_posix_memalign) {"},
{"lineNum":"   94","line":"            return c.free(ptr);"},
{"lineNum":"   95","line":"        }"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"        const unaligned_ptr = getHeader(ptr).*;"},
{"lineNum":"   98","line":"        c.free(unaligned_ptr);"},
{"lineNum":"   99","line":"    }"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"    fn alignedAllocSize(ptr: [*]u8) usize {"},
{"lineNum":"  102","line":"        if (supports_posix_memalign) {"},
{"lineNum":"  103","line":"            return CAllocator.malloc_size(ptr);"},
{"lineNum":"  104","line":"        }"},
{"lineNum":"  105","line":""},
{"lineNum":"  106","line":"        const unaligned_ptr = getHeader(ptr).*;"},
{"lineNum":"  107","line":"        const delta = @ptrToInt(ptr) - @ptrToInt(unaligned_ptr);"},
{"lineNum":"  108","line":"        return CAllocator.malloc_size(unaligned_ptr) - delta;"},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    fn alloc("},
{"lineNum":"  112","line":"        _: *anyopaque,"},
{"lineNum":"  113","line":"        len: usize,"},
{"lineNum":"  114","line":"        log2_align: u8,"},
{"lineNum":"  115","line":"        return_address: usize,"},
{"lineNum":"  116","line":"    ) ?[*]u8 {"},
{"lineNum":"  117","line":"        _ = return_address;"},
{"lineNum":"  118","line":"        assert(len > 0);"},
{"lineNum":"  119","line":"        return alignedAlloc(len, log2_align);"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    fn resize("},
{"lineNum":"  123","line":"        _: *anyopaque,"},
{"lineNum":"  124","line":"        buf: []u8,"},
{"lineNum":"  125","line":"        log2_buf_align: u8,"},
{"lineNum":"  126","line":"        new_len: usize,"},
{"lineNum":"  127","line":"        return_address: usize,"},
{"lineNum":"  128","line":"    ) bool {"},
{"lineNum":"  129","line":"        _ = log2_buf_align;"},
{"lineNum":"  130","line":"        _ = return_address;"},
{"lineNum":"  131","line":"        if (new_len <= buf.len) {"},
{"lineNum":"  132","line":"            return true;"},
{"lineNum":"  133","line":"        }"},
{"lineNum":"  134","line":"        if (CAllocator.supports_malloc_size) {"},
{"lineNum":"  135","line":"            const full_len = alignedAllocSize(buf.ptr);"},
{"lineNum":"  136","line":"            if (new_len <= full_len) {"},
{"lineNum":"  137","line":"                return true;"},
{"lineNum":"  138","line":"            }"},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":"        return false;"},
{"lineNum":"  141","line":"    }"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    fn free("},
{"lineNum":"  144","line":"        _: *anyopaque,"},
{"lineNum":"  145","line":"        buf: []u8,"},
{"lineNum":"  146","line":"        log2_buf_align: u8,"},
{"lineNum":"  147","line":"        return_address: usize,"},
{"lineNum":"  148","line":"    ) void {"},
{"lineNum":"  149","line":"        _ = log2_buf_align;"},
{"lineNum":"  150","line":"        _ = return_address;"},
{"lineNum":"  151","line":"        alignedFree(buf.ptr);"},
{"lineNum":"  152","line":"    }"},
{"lineNum":"  153","line":"};"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"/// Supports the full Allocator interface, including alignment, and exploiting"},
{"lineNum":"  156","line":"/// `malloc_usable_size` if available. For an allocator that directly calls"},
{"lineNum":"  157","line":"/// `malloc`/`free`, see `raw_c_allocator`."},
{"lineNum":"  158","line":"pub const c_allocator = Allocator{"},
{"lineNum":"  159","line":"    .ptr = undefined,"},
{"lineNum":"  160","line":"    .vtable = &c_allocator_vtable,"},
{"lineNum":"  161","line":"};"},
{"lineNum":"  162","line":"const c_allocator_vtable = Allocator.VTable{"},
{"lineNum":"  163","line":"    .alloc = CAllocator.alloc,"},
{"lineNum":"  164","line":"    .resize = CAllocator.resize,"},
{"lineNum":"  165","line":"    .free = CAllocator.free,"},
{"lineNum":"  166","line":"};"},
{"lineNum":"  167","line":""},
{"lineNum":"  168","line":"/// Asserts allocations are within `@alignOf(std.c.max_align_t)` and directly calls"},
{"lineNum":"  169","line":"/// `malloc`/`free`. Does not attempt to utilize `malloc_usable_size`."},
{"lineNum":"  170","line":"/// This allocator is safe to use as the backing allocator with"},
{"lineNum":"  171","line":"/// `ArenaAllocator` for example and is more optimal in such a case"},
{"lineNum":"  172","line":"/// than `c_allocator`."},
{"lineNum":"  173","line":"pub const raw_c_allocator = Allocator{"},
{"lineNum":"  174","line":"    .ptr = undefined,"},
{"lineNum":"  175","line":"    .vtable = &raw_c_allocator_vtable,"},
{"lineNum":"  176","line":"};"},
{"lineNum":"  177","line":"const raw_c_allocator_vtable = Allocator.VTable{"},
{"lineNum":"  178","line":"    .alloc = rawCAlloc,"},
{"lineNum":"  179","line":"    .resize = rawCResize,"},
{"lineNum":"  180","line":"    .free = rawCFree,"},
{"lineNum":"  181","line":"};"},
{"lineNum":"  182","line":""},
{"lineNum":"  183","line":"fn rawCAlloc("},
{"lineNum":"  184","line":"    _: *anyopaque,"},
{"lineNum":"  185","line":"    len: usize,"},
{"lineNum":"  186","line":"    log2_ptr_align: u8,"},
{"lineNum":"  187","line":"    ret_addr: usize,"},
{"lineNum":"  188","line":") ?[*]u8 {"},
{"lineNum":"  189","line":"    _ = ret_addr;"},
{"lineNum":"  190","line":"    assert(log2_ptr_align <= comptime std.math.log2_int(usize, @alignOf(std.c.max_align_t)));"},
{"lineNum":"  191","line":"    // Note that this pointer cannot be aligncasted to max_align_t because if"},
{"lineNum":"  192","line":"    // len is < max_align_t then the alignment can be smaller. For example, if"},
{"lineNum":"  193","line":"    // max_align_t is 16, but the user requests 8 bytes, there is no built-in"},
{"lineNum":"  194","line":"    // type in C that is size 8 and has 16 byte alignment, so the alignment may"},
{"lineNum":"  195","line":"    // be 8 bytes rather than 16. Similarly if only 1 byte is requested, malloc"},
{"lineNum":"  196","line":"    // is allowed to return a 1-byte aligned pointer."},
{"lineNum":"  197","line":"    return @ptrCast(?[*]u8, c.malloc(len));"},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"fn rawCResize("},
{"lineNum":"  201","line":"    _: *anyopaque,"},
{"lineNum":"  202","line":"    buf: []u8,"},
{"lineNum":"  203","line":"    log2_old_align: u8,"},
{"lineNum":"  204","line":"    new_len: usize,"},
{"lineNum":"  205","line":"    ret_addr: usize,"},
{"lineNum":"  206","line":") bool {"},
{"lineNum":"  207","line":"    _ = log2_old_align;"},
{"lineNum":"  208","line":"    _ = ret_addr;"},
{"lineNum":"  209","line":"    return new_len <= buf.len;"},
{"lineNum":"  210","line":"}"},
{"lineNum":"  211","line":""},
{"lineNum":"  212","line":"fn rawCFree("},
{"lineNum":"  213","line":"    _: *anyopaque,"},
{"lineNum":"  214","line":"    buf: []u8,"},
{"lineNum":"  215","line":"    log2_old_align: u8,"},
{"lineNum":"  216","line":"    ret_addr: usize,"},
{"lineNum":"  217","line":") void {"},
{"lineNum":"  218","line":"    _ = log2_old_align;"},
{"lineNum":"  219","line":"    _ = ret_addr;"},
{"lineNum":"  220","line":"    c.free(buf.ptr);"},
{"lineNum":"  221","line":"}"},
{"lineNum":"  222","line":""},
{"lineNum":"  223","line":"/// This allocator makes a syscall directly for every allocation and free."},
{"lineNum":"  224","line":"/// Thread-safe and lock-free."},
{"lineNum":"  225","line":"pub const page_allocator = if (builtin.target.isWasm())"},
{"lineNum":"  226","line":"    Allocator{"},
{"lineNum":"  227","line":"        .ptr = undefined,"},
{"lineNum":"  228","line":"        .vtable = &WasmPageAllocator.vtable,"},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":"else if (builtin.target.os.tag == .freestanding)"},
{"lineNum":"  231","line":"    root.os.heap.page_allocator"},
{"lineNum":"  232","line":"else"},
{"lineNum":"  233","line":"    Allocator{"},
{"lineNum":"  234","line":"        .ptr = undefined,"},
{"lineNum":"  235","line":"        .vtable = &PageAllocator.vtable,"},
{"lineNum":"  236","line":"    };"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"/// This allocator is fast, small, and specific to WebAssembly. In the future,"},
{"lineNum":"  239","line":"/// this will be the implementation automatically selected by"},
{"lineNum":"  240","line":"/// `GeneralPurposeAllocator` when compiling in `ReleaseSmall` mode for wasm32"},
{"lineNum":"  241","line":"/// and wasm64 architectures."},
{"lineNum":"  242","line":"/// Until then, it is available here to play with."},
{"lineNum":"  243","line":"pub const wasm_allocator = Allocator{"},
{"lineNum":"  244","line":"    .ptr = undefined,"},
{"lineNum":"  245","line":"    .vtable = &std.heap.WasmAllocator.vtable,"},
{"lineNum":"  246","line":"};"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"/// Verifies that the adjusted length will still map to the full length"},
{"lineNum":"  249","line":"pub fn alignPageAllocLen(full_len: usize, len: usize) usize {"},
{"lineNum":"  250","line":"    const aligned_len = mem.alignAllocLen(full_len, len);"},
{"lineNum":"  251","line":"    assert(mem.alignForward(aligned_len, mem.page_size) == full_len);"},
{"lineNum":"  252","line":"    return aligned_len;"},
{"lineNum":"  253","line":"}"},
{"lineNum":"  254","line":""},
{"lineNum":"  255","line":"pub const HeapAllocator = switch (builtin.os.tag) {"},
{"lineNum":"  256","line":"    .windows => struct {"},
{"lineNum":"  257","line":"        heap_handle: ?HeapHandle,"},
{"lineNum":"  258","line":""},
{"lineNum":"  259","line":"        const HeapHandle = os.windows.HANDLE;"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"        pub fn init() HeapAllocator {"},
{"lineNum":"  262","line":"            return HeapAllocator{"},
{"lineNum":"  263","line":"                .heap_handle = null,"},
{"lineNum":"  264","line":"            };"},
{"lineNum":"  265","line":"        }"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"        pub fn allocator(self: *HeapAllocator) Allocator {"},
{"lineNum":"  268","line":"            return .{"},
{"lineNum":"  269","line":"                .ptr = self,"},
{"lineNum":"  270","line":"                .vtable = &.{"},
{"lineNum":"  271","line":"                    .alloc = alloc,"},
{"lineNum":"  272","line":"                    .resize = resize,"},
{"lineNum":"  273","line":"                    .free = free,"},
{"lineNum":"  274","line":"                },"},
{"lineNum":"  275","line":"            };"},
{"lineNum":"  276","line":"        }"},
{"lineNum":"  277","line":""},
{"lineNum":"  278","line":"        pub fn deinit(self: *HeapAllocator) void {"},
{"lineNum":"  279","line":"            if (self.heap_handle) |heap_handle| {"},
{"lineNum":"  280","line":"                os.windows.HeapDestroy(heap_handle);"},
{"lineNum":"  281","line":"            }"},
{"lineNum":"  282","line":"        }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"        fn getRecordPtr(buf: []u8) *align(1) usize {"},
{"lineNum":"  285","line":"            return @intToPtr(*align(1) usize, @ptrToInt(buf.ptr) + buf.len);"},
{"lineNum":"  286","line":"        }"},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        fn alloc("},
{"lineNum":"  289","line":"            ctx: *anyopaque,"},
{"lineNum":"  290","line":"            n: usize,"},
{"lineNum":"  291","line":"            log2_ptr_align: u8,"},
{"lineNum":"  292","line":"            return_address: usize,"},
{"lineNum":"  293","line":"        ) ?[*]u8 {"},
{"lineNum":"  294","line":"            _ = return_address;"},
{"lineNum":"  295","line":"            const self = @ptrCast(*HeapAllocator, @alignCast(@alignOf(HeapAllocator), ctx));"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"            const ptr_align = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_ptr_align);"},
{"lineNum":"  298","line":"            const amt = n + ptr_align - 1 + @sizeOf(usize);"},
{"lineNum":"  299","line":"            const optional_heap_handle = @atomicLoad(?HeapHandle, &self.heap_handle, .SeqCst);"},
{"lineNum":"  300","line":"            const heap_handle = optional_heap_handle orelse blk: {"},
{"lineNum":"  301","line":"                const options = if (builtin.single_threaded) os.windows.HEAP_NO_SERIALIZE else 0;"},
{"lineNum":"  302","line":"                const hh = os.windows.kernel32.HeapCreate(options, amt, 0) orelse return null;"},
{"lineNum":"  303","line":"                const other_hh = @cmpxchgStrong(?HeapHandle, &self.heap_handle, null, hh, .SeqCst, .SeqCst) orelse break :blk hh;"},
{"lineNum":"  304","line":"                os.windows.HeapDestroy(hh);"},
{"lineNum":"  305","line":"                break :blk other_hh.?; // can\'t be null because of the cmpxchg"},
{"lineNum":"  306","line":"            };"},
{"lineNum":"  307","line":"            const ptr = os.windows.kernel32.HeapAlloc(heap_handle, 0, amt) orelse return null;"},
{"lineNum":"  308","line":"            const root_addr = @ptrToInt(ptr);"},
{"lineNum":"  309","line":"            const aligned_addr = mem.alignForward(root_addr, ptr_align);"},
{"lineNum":"  310","line":"            const buf = @intToPtr([*]u8, aligned_addr)[0..n];"},
{"lineNum":"  311","line":"            getRecordPtr(buf).* = root_addr;"},
{"lineNum":"  312","line":"            return buf.ptr;"},
{"lineNum":"  313","line":"        }"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"        fn resize("},
{"lineNum":"  316","line":"            ctx: *anyopaque,"},
{"lineNum":"  317","line":"            buf: []u8,"},
{"lineNum":"  318","line":"            log2_buf_align: u8,"},
{"lineNum":"  319","line":"            new_size: usize,"},
{"lineNum":"  320","line":"            return_address: usize,"},
{"lineNum":"  321","line":"        ) bool {"},
{"lineNum":"  322","line":"            _ = log2_buf_align;"},
{"lineNum":"  323","line":"            _ = return_address;"},
{"lineNum":"  324","line":"            const self = @ptrCast(*HeapAllocator, @alignCast(@alignOf(HeapAllocator), ctx));"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"            const root_addr = getRecordPtr(buf).*;"},
{"lineNum":"  327","line":"            const align_offset = @ptrToInt(buf.ptr) - root_addr;"},
{"lineNum":"  328","line":"            const amt = align_offset + new_size + @sizeOf(usize);"},
{"lineNum":"  329","line":"            const new_ptr = os.windows.kernel32.HeapReAlloc("},
{"lineNum":"  330","line":"                self.heap_handle.?,"},
{"lineNum":"  331","line":"                os.windows.HEAP_REALLOC_IN_PLACE_ONLY,"},
{"lineNum":"  332","line":"                @intToPtr(*anyopaque, root_addr),"},
{"lineNum":"  333","line":"                amt,"},
{"lineNum":"  334","line":"            ) orelse return false;"},
{"lineNum":"  335","line":"            assert(new_ptr == @intToPtr(*anyopaque, root_addr));"},
{"lineNum":"  336","line":"            getRecordPtr(buf.ptr[0..new_size]).* = root_addr;"},
{"lineNum":"  337","line":"            return true;"},
{"lineNum":"  338","line":"        }"},
{"lineNum":"  339","line":""},
{"lineNum":"  340","line":"        fn free("},
{"lineNum":"  341","line":"            ctx: *anyopaque,"},
{"lineNum":"  342","line":"            buf: []u8,"},
{"lineNum":"  343","line":"            log2_buf_align: u8,"},
{"lineNum":"  344","line":"            return_address: usize,"},
{"lineNum":"  345","line":"        ) void {"},
{"lineNum":"  346","line":"            _ = log2_buf_align;"},
{"lineNum":"  347","line":"            _ = return_address;"},
{"lineNum":"  348","line":"            const self = @ptrCast(*HeapAllocator, @alignCast(@alignOf(HeapAllocator), ctx));"},
{"lineNum":"  349","line":"            os.windows.HeapFree(self.heap_handle.?, 0, @intToPtr(*anyopaque, getRecordPtr(buf).*));"},
{"lineNum":"  350","line":"        }"},
{"lineNum":"  351","line":"    },"},
{"lineNum":"  352","line":"    else => @compileError(\"Unsupported OS\"),"},
{"lineNum":"  353","line":"};"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"fn sliceContainsPtr(container: []u8, ptr: [*]u8) bool {"},
{"lineNum":"  356","line":"    return @ptrToInt(ptr) >= @ptrToInt(container.ptr) and"},
{"lineNum":"  357","line":"        @ptrToInt(ptr) < (@ptrToInt(container.ptr) + container.len);"},
{"lineNum":"  358","line":"}"},
{"lineNum":"  359","line":""},
{"lineNum":"  360","line":"fn sliceContainsSlice(container: []u8, slice: []u8) bool {","class":"lineCov","hits":"1","order":"322","possible_hits":"1",},
{"lineNum":"  361","line":"    return @ptrToInt(slice.ptr) >= @ptrToInt(container.ptr) and","class":"lineCov","hits":"2","order":"323","possible_hits":"2",},
{"lineNum":"  362","line":"        (@ptrToInt(slice.ptr) + slice.len) <= (@ptrToInt(container.ptr) + container.len);","class":"lineCov","hits":"1","order":"324","possible_hits":"1",},
{"lineNum":"  363","line":"}"},
{"lineNum":"  364","line":""},
{"lineNum":"  365","line":"pub const FixedBufferAllocator = struct {"},
{"lineNum":"  366","line":"    end_index: usize,"},
{"lineNum":"  367","line":"    buffer: []u8,"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    pub fn init(buffer: []u8) FixedBufferAllocator {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  370","line":"        return FixedBufferAllocator{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"            .buffer = buffer,"},
{"lineNum":"  372","line":"            .end_index = 0,"},
{"lineNum":"  373","line":"        };"},
{"lineNum":"  374","line":"    }"},
{"lineNum":"  375","line":""},
{"lineNum":"  376","line":"    /// *WARNING* using this at the same time as the interface returned by `threadSafeAllocator` is not thread safe"},
{"lineNum":"  377","line":"    pub fn allocator(self: *FixedBufferAllocator) Allocator {","class":"lineCov","hits":"1","order":"159","possible_hits":"1",},
{"lineNum":"  378","line":"        return .{","class":"lineCov","hits":"1","order":"160","possible_hits":"1",},
{"lineNum":"  379","line":"            .ptr = self,"},
{"lineNum":"  380","line":"            .vtable = &.{"},
{"lineNum":"  381","line":"                .alloc = alloc,"},
{"lineNum":"  382","line":"                .resize = resize,"},
{"lineNum":"  383","line":"                .free = free,"},
{"lineNum":"  384","line":"            },"},
{"lineNum":"  385","line":"        };"},
{"lineNum":"  386","line":"    }"},
{"lineNum":"  387","line":""},
{"lineNum":"  388","line":"    /// Provides a lock free thread safe `Allocator` interface to the underlying `FixedBufferAllocator`"},
{"lineNum":"  389","line":"    /// *WARNING* using this at the same time as the interface returned by `allocator` is not thread safe"},
{"lineNum":"  390","line":"    pub fn threadSafeAllocator(self: *FixedBufferAllocator) Allocator {"},
{"lineNum":"  391","line":"        return .{"},
{"lineNum":"  392","line":"            .ptr = self,"},
{"lineNum":"  393","line":"            .vtable = &.{"},
{"lineNum":"  394","line":"                .alloc = threadSafeAlloc,"},
{"lineNum":"  395","line":"                .resize = Allocator.noResize,"},
{"lineNum":"  396","line":"                .free = Allocator.noFree,"},
{"lineNum":"  397","line":"            },"},
{"lineNum":"  398","line":"        };"},
{"lineNum":"  399","line":"    }"},
{"lineNum":"  400","line":""},
{"lineNum":"  401","line":"    pub fn ownsPtr(self: *FixedBufferAllocator, ptr: [*]u8) bool {"},
{"lineNum":"  402","line":"        return sliceContainsPtr(self.buffer, ptr);"},
{"lineNum":"  403","line":"    }"},
{"lineNum":"  404","line":""},
{"lineNum":"  405","line":"    pub fn ownsSlice(self: *FixedBufferAllocator, slice: []u8) bool {","class":"lineCov","hits":"1","order":"320","possible_hits":"1",},
{"lineNum":"  406","line":"        return sliceContainsSlice(self.buffer, slice);","class":"lineCov","hits":"1","order":"321","possible_hits":"1",},
{"lineNum":"  407","line":"    }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    /// NOTE: this will not work in all cases, if the last allocation had an adjusted_index"},
{"lineNum":"  410","line":"    ///       then we won\'t be able to determine what the last allocation was.  This is because"},
{"lineNum":"  411","line":"    ///       the alignForward operation done in alloc is not reversible."},
{"lineNum":"  412","line":"    pub fn isLastAllocation(self: *FixedBufferAllocator, buf: []u8) bool {","class":"lineCov","hits":"1","order":"326","possible_hits":"1",},
{"lineNum":"  413","line":"        return buf.ptr + buf.len == self.buffer.ptr + self.end_index;","class":"lineCov","hits":"1","order":"327","possible_hits":"1",},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    fn alloc(ctx: *anyopaque, n: usize, log2_ptr_align: u8, ra: usize) ?[*]u8 {","class":"lineCov","hits":"1","order":"227","possible_hits":"1",},
{"lineNum":"  417","line":"        const self = @ptrCast(*FixedBufferAllocator, @alignCast(@alignOf(FixedBufferAllocator), ctx));","class":"lineCov","hits":"1","order":"228","possible_hits":"1",},
{"lineNum":"  418","line":"        _ = ra;"},
{"lineNum":"  419","line":"        const ptr_align = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_ptr_align);","class":"lineCov","hits":"1","order":"229","possible_hits":"1",},
{"lineNum":"  420","line":"        const adjust_off = mem.alignPointerOffset(self.buffer.ptr + self.end_index, ptr_align) orelse return null;","class":"lineCov","hits":"1","order":"230","possible_hits":"1",},
{"lineNum":"  421","line":"        const adjusted_index = self.end_index + adjust_off;","class":"lineCov","hits":"1","order":"237","possible_hits":"1",},
{"lineNum":"  422","line":"        const new_end_index = adjusted_index + n;","class":"lineCov","hits":"1","order":"238","possible_hits":"1",},
{"lineNum":"  423","line":"        if (new_end_index > self.buffer.len) return null;","class":"lineCov","hits":"1","order":"239","possible_hits":"1",},
{"lineNum":"  424","line":"        self.end_index = new_end_index;","class":"lineCov","hits":"1","order":"240","possible_hits":"1",},
{"lineNum":"  425","line":"        return self.buffer.ptr + adjusted_index;","class":"lineCov","hits":"1","order":"241","possible_hits":"1",},
{"lineNum":"  426","line":"    }"},
{"lineNum":"  427","line":""},
{"lineNum":"  428","line":"    fn resize("},
{"lineNum":"  429","line":"        ctx: *anyopaque,"},
{"lineNum":"  430","line":"        buf: []u8,"},
{"lineNum":"  431","line":"        log2_buf_align: u8,"},
{"lineNum":"  432","line":"        new_size: usize,"},
{"lineNum":"  433","line":"        return_address: usize,"},
{"lineNum":"  434","line":"    ) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  435","line":"        const self = @ptrCast(*FixedBufferAllocator, @alignCast(@alignOf(FixedBufferAllocator), ctx));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  436","line":"        _ = log2_buf_align;"},
{"lineNum":"  437","line":"        _ = return_address;"},
{"lineNum":"  438","line":"        assert(self.ownsSlice(buf)); // sanity check","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":""},
{"lineNum":"  440","line":"        if (!self.isLastAllocation(buf)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  441","line":"            if (new_size > buf.len) return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  442","line":"            return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  443","line":"        }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"        if (new_size <= buf.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  446","line":"            const sub = buf.len - new_size;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  447","line":"            self.end_index -= sub;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  448","line":"            return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"        }"},
{"lineNum":"  450","line":""},
{"lineNum":"  451","line":"        const add = new_size - buf.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  452","line":"        if (add + self.end_index > self.buffer.len) return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":""},
{"lineNum":"  454","line":"        self.end_index += add;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  455","line":"        return true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"    }"},
{"lineNum":"  457","line":""},
{"lineNum":"  458","line":"    fn free("},
{"lineNum":"  459","line":"        ctx: *anyopaque,"},
{"lineNum":"  460","line":"        buf: []u8,"},
{"lineNum":"  461","line":"        log2_buf_align: u8,"},
{"lineNum":"  462","line":"        return_address: usize,"},
{"lineNum":"  463","line":"    ) void {","class":"lineCov","hits":"1","order":"317","possible_hits":"1",},
{"lineNum":"  464","line":"        const self = @ptrCast(*FixedBufferAllocator, @alignCast(@alignOf(FixedBufferAllocator), ctx));","class":"lineCov","hits":"1","order":"318","possible_hits":"1",},
{"lineNum":"  465","line":"        _ = log2_buf_align;"},
{"lineNum":"  466","line":"        _ = return_address;"},
{"lineNum":"  467","line":"        assert(self.ownsSlice(buf)); // sanity check","class":"lineCov","hits":"1","order":"319","possible_hits":"1",},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"        if (self.isLastAllocation(buf)) {","class":"lineCov","hits":"1","order":"325","possible_hits":"1",},
{"lineNum":"  470","line":"            self.end_index -= buf.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  471","line":"        }"},
{"lineNum":"  472","line":"    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"    fn threadSafeAlloc(ctx: *anyopaque, n: usize, log2_ptr_align: u8, ra: usize) ?[*]u8 {"},
{"lineNum":"  475","line":"        const self = @ptrCast(*FixedBufferAllocator, @alignCast(@alignOf(FixedBufferAllocator), ctx));"},
{"lineNum":"  476","line":"        _ = ra;"},
{"lineNum":"  477","line":"        const ptr_align = @as(usize, 1) << @intCast(Allocator.Log2Align, log2_ptr_align);"},
{"lineNum":"  478","line":"        var end_index = @atomicLoad(usize, &self.end_index, .SeqCst);"},
{"lineNum":"  479","line":"        while (true) {"},
{"lineNum":"  480","line":"            const adjust_off = mem.alignPointerOffset(self.buffer.ptr + end_index, ptr_align) orelse return null;"},
{"lineNum":"  481","line":"            const adjusted_index = end_index + adjust_off;"},
{"lineNum":"  482","line":"            const new_end_index = adjusted_index + n;"},
{"lineNum":"  483","line":"            if (new_end_index > self.buffer.len) return null;"},
{"lineNum":"  484","line":"            end_index = @cmpxchgWeak(usize, &self.end_index, end_index, new_end_index, .SeqCst, .SeqCst) orelse"},
{"lineNum":"  485","line":"                return self.buffer[adjusted_index..new_end_index].ptr;"},
{"lineNum":"  486","line":"        }"},
{"lineNum":"  487","line":"    }"},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"    pub fn reset(self: *FixedBufferAllocator) void {"},
{"lineNum":"  490","line":"        self.end_index = 0;"},
{"lineNum":"  491","line":"    }"},
{"lineNum":"  492","line":"};"},
{"lineNum":"  493","line":""},
{"lineNum":"  494","line":"pub const ThreadSafeFixedBufferAllocator = @compileError(\"ThreadSafeFixedBufferAllocator has been replaced with `threadSafeAllocator` on FixedBufferAllocator\");"},
{"lineNum":"  495","line":""},
{"lineNum":"  496","line":"/// Returns a `StackFallbackAllocator` allocating using either a"},
{"lineNum":"  497","line":"/// `FixedBufferAllocator` on an array of size `size` and falling back to"},
{"lineNum":"  498","line":"/// `fallback_allocator` if that fails."},
{"lineNum":"  499","line":"pub fn stackFallback(comptime size: usize, fallback_allocator: Allocator) StackFallbackAllocator(size) {"},
{"lineNum":"  500","line":"    return StackFallbackAllocator(size){"},
{"lineNum":"  501","line":"        .buffer = undefined,"},
{"lineNum":"  502","line":"        .fallback_allocator = fallback_allocator,"},
{"lineNum":"  503","line":"        .fixed_buffer_allocator = undefined,"},
{"lineNum":"  504","line":"    };"},
{"lineNum":"  505","line":"}"},
{"lineNum":"  506","line":""},
{"lineNum":"  507","line":"/// An allocator that attempts to allocate using a"},
{"lineNum":"  508","line":"/// `FixedBufferAllocator` using an array of size `size`. If the"},
{"lineNum":"  509","line":"/// allocation fails, it will fall back to using"},
{"lineNum":"  510","line":"/// `fallback_allocator`. Easily created with `stackFallback`."},
{"lineNum":"  511","line":"pub fn StackFallbackAllocator(comptime size: usize) type {"},
{"lineNum":"  512","line":"    return struct {"},
{"lineNum":"  513","line":"        const Self = @This();"},
{"lineNum":"  514","line":""},
{"lineNum":"  515","line":"        buffer: [size]u8,"},
{"lineNum":"  516","line":"        fallback_allocator: Allocator,"},
{"lineNum":"  517","line":"        fixed_buffer_allocator: FixedBufferAllocator,"},
{"lineNum":"  518","line":""},
{"lineNum":"  519","line":"        /// This function both fetches a `Allocator` interface to this"},
{"lineNum":"  520","line":"        /// allocator *and* resets the internal buffer allocator."},
{"lineNum":"  521","line":"        pub fn get(self: *Self) Allocator {"},
{"lineNum":"  522","line":"            self.fixed_buffer_allocator = FixedBufferAllocator.init(self.buffer[0..]);"},
{"lineNum":"  523","line":"            return .{"},
{"lineNum":"  524","line":"                .ptr = self,"},
{"lineNum":"  525","line":"                .vtable = &.{"},
{"lineNum":"  526","line":"                    .alloc = alloc,"},
{"lineNum":"  527","line":"                    .resize = resize,"},
{"lineNum":"  528","line":"                    .free = free,"},
{"lineNum":"  529","line":"                },"},
{"lineNum":"  530","line":"            };"},
{"lineNum":"  531","line":"        }"},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"        fn alloc("},
{"lineNum":"  534","line":"            ctx: *anyopaque,"},
{"lineNum":"  535","line":"            len: usize,"},
{"lineNum":"  536","line":"            log2_ptr_align: u8,"},
{"lineNum":"  537","line":"            ra: usize,"},
{"lineNum":"  538","line":"        ) ?[*]u8 {"},
{"lineNum":"  539","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));"},
{"lineNum":"  540","line":"            return FixedBufferAllocator.alloc(&self.fixed_buffer_allocator, len, log2_ptr_align, ra) orelse"},
{"lineNum":"  541","line":"                return self.fallback_allocator.rawAlloc(len, log2_ptr_align, ra);"},
{"lineNum":"  542","line":"        }"},
{"lineNum":"  543","line":""},
{"lineNum":"  544","line":"        fn resize("},
{"lineNum":"  545","line":"            ctx: *anyopaque,"},
{"lineNum":"  546","line":"            buf: []u8,"},
{"lineNum":"  547","line":"            log2_buf_align: u8,"},
{"lineNum":"  548","line":"            new_len: usize,"},
{"lineNum":"  549","line":"            ra: usize,"},
{"lineNum":"  550","line":"        ) bool {"},
{"lineNum":"  551","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));"},
{"lineNum":"  552","line":"            if (self.fixed_buffer_allocator.ownsPtr(buf.ptr)) {"},
{"lineNum":"  553","line":"                return FixedBufferAllocator.resize(&self.fixed_buffer_allocator, buf, log2_buf_align, new_len, ra);"},
{"lineNum":"  554","line":"            } else {"},
{"lineNum":"  555","line":"                return self.fallback_allocator.rawResize(buf, log2_buf_align, new_len, ra);"},
{"lineNum":"  556","line":"            }"},
{"lineNum":"  557","line":"        }"},
{"lineNum":"  558","line":""},
{"lineNum":"  559","line":"        fn free("},
{"lineNum":"  560","line":"            ctx: *anyopaque,"},
{"lineNum":"  561","line":"            buf: []u8,"},
{"lineNum":"  562","line":"            log2_buf_align: u8,"},
{"lineNum":"  563","line":"            ra: usize,"},
{"lineNum":"  564","line":"        ) void {"},
{"lineNum":"  565","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));"},
{"lineNum":"  566","line":"            if (self.fixed_buffer_allocator.ownsPtr(buf.ptr)) {"},
{"lineNum":"  567","line":"                return FixedBufferAllocator.free(&self.fixed_buffer_allocator, buf, log2_buf_align, ra);"},
{"lineNum":"  568","line":"            } else {"},
{"lineNum":"  569","line":"                return self.fallback_allocator.rawFree(buf, log2_buf_align, ra);"},
{"lineNum":"  570","line":"            }"},
{"lineNum":"  571","line":"        }"},
{"lineNum":"  572","line":"    };"},
{"lineNum":"  573","line":"}"},
{"lineNum":"  574","line":""},
{"lineNum":"  575","line":"test \"c_allocator\" {"},
{"lineNum":"  576","line":"    if (builtin.link_libc) {"},
{"lineNum":"  577","line":"        try testAllocator(c_allocator);"},
{"lineNum":"  578","line":"        try testAllocatorAligned(c_allocator);"},
{"lineNum":"  579","line":"        try testAllocatorLargeAlignment(c_allocator);"},
{"lineNum":"  580","line":"        try testAllocatorAlignedShrink(c_allocator);"},
{"lineNum":"  581","line":"    }"},
{"lineNum":"  582","line":"}"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"test \"raw_c_allocator\" {"},
{"lineNum":"  585","line":"    if (builtin.link_libc) {"},
{"lineNum":"  586","line":"        try testAllocator(raw_c_allocator);"},
{"lineNum":"  587","line":"    }"},
{"lineNum":"  588","line":"}"},
{"lineNum":"  589","line":""},
{"lineNum":"  590","line":"test \"PageAllocator\" {"},
{"lineNum":"  591","line":"    const allocator = page_allocator;"},
{"lineNum":"  592","line":"    try testAllocator(allocator);"},
{"lineNum":"  593","line":"    try testAllocatorAligned(allocator);"},
{"lineNum":"  594","line":"    if (!builtin.target.isWasm()) {"},
{"lineNum":"  595","line":"        try testAllocatorLargeAlignment(allocator);"},
{"lineNum":"  596","line":"        try testAllocatorAlignedShrink(allocator);"},
{"lineNum":"  597","line":"    }"},
{"lineNum":"  598","line":""},
{"lineNum":"  599","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  600","line":"        const slice = try allocator.alignedAlloc(u8, mem.page_size, 128);"},
{"lineNum":"  601","line":"        slice[0] = 0x12;"},
{"lineNum":"  602","line":"        slice[127] = 0x34;"},
{"lineNum":"  603","line":"        allocator.free(slice);"},
{"lineNum":"  604","line":"    }"},
{"lineNum":"  605","line":"    {"},
{"lineNum":"  606","line":"        var buf = try allocator.alloc(u8, mem.page_size + 1);"},
{"lineNum":"  607","line":"        defer allocator.free(buf);"},
{"lineNum":"  608","line":"        buf = try allocator.realloc(buf, 1); // shrink past the page boundary"},
{"lineNum":"  609","line":"    }"},
{"lineNum":"  610","line":"}"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"test \"HeapAllocator\" {"},
{"lineNum":"  613","line":"    if (builtin.os.tag == .windows) {"},
{"lineNum":"  614","line":"        // https://github.com/ziglang/zig/issues/13702"},
{"lineNum":"  615","line":"        if (builtin.cpu.arch == .aarch64) return error.SkipZigTest;"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"        var heap_allocator = HeapAllocator.init();"},
{"lineNum":"  618","line":"        defer heap_allocator.deinit();"},
{"lineNum":"  619","line":"        const allocator = heap_allocator.allocator();"},
{"lineNum":"  620","line":""},
{"lineNum":"  621","line":"        try testAllocator(allocator);"},
{"lineNum":"  622","line":"        try testAllocatorAligned(allocator);"},
{"lineNum":"  623","line":"        try testAllocatorLargeAlignment(allocator);"},
{"lineNum":"  624","line":"        try testAllocatorAlignedShrink(allocator);"},
{"lineNum":"  625","line":"    }"},
{"lineNum":"  626","line":"}"},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"test \"ArenaAllocator\" {"},
{"lineNum":"  629","line":"    var arena_allocator = ArenaAllocator.init(page_allocator);"},
{"lineNum":"  630","line":"    defer arena_allocator.deinit();"},
{"lineNum":"  631","line":"    const allocator = arena_allocator.allocator();"},
{"lineNum":"  632","line":""},
{"lineNum":"  633","line":"    try testAllocator(allocator);"},
{"lineNum":"  634","line":"    try testAllocatorAligned(allocator);"},
{"lineNum":"  635","line":"    try testAllocatorLargeAlignment(allocator);"},
{"lineNum":"  636","line":"    try testAllocatorAlignedShrink(allocator);"},
{"lineNum":"  637","line":"}"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"var test_fixed_buffer_allocator_memory: [800000 * @sizeOf(u64)]u8 = undefined;"},
{"lineNum":"  640","line":"test \"FixedBufferAllocator\" {"},
{"lineNum":"  641","line":"    var fixed_buffer_allocator = mem.validationWrap(FixedBufferAllocator.init(test_fixed_buffer_allocator_memory[0..]));"},
{"lineNum":"  642","line":"    const allocator = fixed_buffer_allocator.allocator();"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"    try testAllocator(allocator);"},
{"lineNum":"  645","line":"    try testAllocatorAligned(allocator);"},
{"lineNum":"  646","line":"    try testAllocatorLargeAlignment(allocator);"},
{"lineNum":"  647","line":"    try testAllocatorAlignedShrink(allocator);"},
{"lineNum":"  648","line":"}"},
{"lineNum":"  649","line":""},
{"lineNum":"  650","line":"test \"FixedBufferAllocator.reset\" {"},
{"lineNum":"  651","line":"    var buf: [8]u8 align(@alignOf(u64)) = undefined;"},
{"lineNum":"  652","line":"    var fba = FixedBufferAllocator.init(buf[0..]);"},
{"lineNum":"  653","line":"    const allocator = fba.allocator();"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    const X = 0xeeeeeeeeeeeeeeee;"},
{"lineNum":"  656","line":"    const Y = 0xffffffffffffffff;"},
{"lineNum":"  657","line":""},
{"lineNum":"  658","line":"    var x = try allocator.create(u64);"},
{"lineNum":"  659","line":"    x.* = X;"},
{"lineNum":"  660","line":"    try testing.expectError(error.OutOfMemory, allocator.create(u64));"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"    fba.reset();"},
{"lineNum":"  663","line":"    var y = try allocator.create(u64);"},
{"lineNum":"  664","line":"    y.* = Y;"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"    // we expect Y to have overwritten X."},
{"lineNum":"  667","line":"    try testing.expect(x.* == y.*);"},
{"lineNum":"  668","line":"    try testing.expect(y.* == Y);"},
{"lineNum":"  669","line":"}"},
{"lineNum":"  670","line":""},
{"lineNum":"  671","line":"test \"StackFallbackAllocator\" {"},
{"lineNum":"  672","line":"    const fallback_allocator = page_allocator;"},
{"lineNum":"  673","line":"    var stack_allocator = stackFallback(4096, fallback_allocator);"},
{"lineNum":"  674","line":""},
{"lineNum":"  675","line":"    try testAllocator(stack_allocator.get());"},
{"lineNum":"  676","line":"    try testAllocatorAligned(stack_allocator.get());"},
{"lineNum":"  677","line":"    try testAllocatorLargeAlignment(stack_allocator.get());"},
{"lineNum":"  678","line":"    try testAllocatorAlignedShrink(stack_allocator.get());"},
{"lineNum":"  679","line":"}"},
{"lineNum":"  680","line":""},
{"lineNum":"  681","line":"test \"FixedBufferAllocator Reuse memory on realloc\" {"},
{"lineNum":"  682","line":"    var small_fixed_buffer: [10]u8 = undefined;"},
{"lineNum":"  683","line":"    // check if we re-use the memory"},
{"lineNum":"  684","line":"    {"},
{"lineNum":"  685","line":"        var fixed_buffer_allocator = FixedBufferAllocator.init(small_fixed_buffer[0..]);"},
{"lineNum":"  686","line":"        const allocator = fixed_buffer_allocator.allocator();"},
{"lineNum":"  687","line":""},
{"lineNum":"  688","line":"        var slice0 = try allocator.alloc(u8, 5);"},
{"lineNum":"  689","line":"        try testing.expect(slice0.len == 5);"},
{"lineNum":"  690","line":"        var slice1 = try allocator.realloc(slice0, 10);"},
{"lineNum":"  691","line":"        try testing.expect(slice1.ptr == slice0.ptr);"},
{"lineNum":"  692","line":"        try testing.expect(slice1.len == 10);"},
{"lineNum":"  693","line":"        try testing.expectError(error.OutOfMemory, allocator.realloc(slice1, 11));"},
{"lineNum":"  694","line":"    }"},
{"lineNum":"  695","line":"    // check that we don\'t re-use the memory if it\'s not the most recent block"},
{"lineNum":"  696","line":"    {"},
{"lineNum":"  697","line":"        var fixed_buffer_allocator = FixedBufferAllocator.init(small_fixed_buffer[0..]);"},
{"lineNum":"  698","line":"        const allocator = fixed_buffer_allocator.allocator();"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"        var slice0 = try allocator.alloc(u8, 2);"},
{"lineNum":"  701","line":"        slice0[0] = 1;"},
{"lineNum":"  702","line":"        slice0[1] = 2;"},
{"lineNum":"  703","line":"        var slice1 = try allocator.alloc(u8, 2);"},
{"lineNum":"  704","line":"        var slice2 = try allocator.realloc(slice0, 4);"},
{"lineNum":"  705","line":"        try testing.expect(slice0.ptr != slice2.ptr);"},
{"lineNum":"  706","line":"        try testing.expect(slice1.ptr != slice2.ptr);"},
{"lineNum":"  707","line":"        try testing.expect(slice2[0] == 1);"},
{"lineNum":"  708","line":"        try testing.expect(slice2[1] == 2);"},
{"lineNum":"  709","line":"    }"},
{"lineNum":"  710","line":"}"},
{"lineNum":"  711","line":""},
{"lineNum":"  712","line":"test \"Thread safe FixedBufferAllocator\" {"},
{"lineNum":"  713","line":"    var fixed_buffer_allocator = FixedBufferAllocator.init(test_fixed_buffer_allocator_memory[0..]);"},
{"lineNum":"  714","line":""},
{"lineNum":"  715","line":"    try testAllocator(fixed_buffer_allocator.threadSafeAllocator());"},
{"lineNum":"  716","line":"    try testAllocatorAligned(fixed_buffer_allocator.threadSafeAllocator());"},
{"lineNum":"  717","line":"    try testAllocatorLargeAlignment(fixed_buffer_allocator.threadSafeAllocator());"},
{"lineNum":"  718","line":"    try testAllocatorAlignedShrink(fixed_buffer_allocator.threadSafeAllocator());"},
{"lineNum":"  719","line":"}"},
{"lineNum":"  720","line":""},
{"lineNum":"  721","line":"/// This one should not try alignments that exceed what C malloc can handle."},
{"lineNum":"  722","line":"pub fn testAllocator(base_allocator: mem.Allocator) !void {"},
{"lineNum":"  723","line":"    var validationAllocator = mem.validationWrap(base_allocator);"},
{"lineNum":"  724","line":"    const allocator = validationAllocator.allocator();"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"    var slice = try allocator.alloc(*i32, 100);"},
{"lineNum":"  727","line":"    try testing.expect(slice.len == 100);"},
{"lineNum":"  728","line":"    for (slice, 0..) |*item, i| {"},
{"lineNum":"  729","line":"        item.* = try allocator.create(i32);"},
{"lineNum":"  730","line":"        item.*.* = @intCast(i32, i);"},
{"lineNum":"  731","line":"    }"},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"    slice = try allocator.realloc(slice, 20000);"},
{"lineNum":"  734","line":"    try testing.expect(slice.len == 20000);"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    for (slice[0..100], 0..) |item, i| {"},
{"lineNum":"  737","line":"        try testing.expect(item.* == @intCast(i32, i));"},
{"lineNum":"  738","line":"        allocator.destroy(item);"},
{"lineNum":"  739","line":"    }"},
{"lineNum":"  740","line":""},
{"lineNum":"  741","line":"    if (allocator.resize(slice, 50)) {"},
{"lineNum":"  742","line":"        slice = slice[0..50];"},
{"lineNum":"  743","line":"        if (allocator.resize(slice, 25)) {"},
{"lineNum":"  744","line":"            slice = slice[0..25];"},
{"lineNum":"  745","line":"            try testing.expect(allocator.resize(slice, 0));"},
{"lineNum":"  746","line":"            slice = slice[0..0];"},
{"lineNum":"  747","line":"            slice = try allocator.realloc(slice, 10);"},
{"lineNum":"  748","line":"            try testing.expect(slice.len == 10);"},
{"lineNum":"  749","line":"        }"},
{"lineNum":"  750","line":"    }"},
{"lineNum":"  751","line":"    allocator.free(slice);"},
{"lineNum":"  752","line":""},
{"lineNum":"  753","line":"    // Zero-length allocation"},
{"lineNum":"  754","line":"    var empty = try allocator.alloc(u8, 0);"},
{"lineNum":"  755","line":"    allocator.free(empty);"},
{"lineNum":"  756","line":"    // Allocation with zero-sized types"},
{"lineNum":"  757","line":"    const zero_bit_ptr = try allocator.create(u0);"},
{"lineNum":"  758","line":"    zero_bit_ptr.* = 0;"},
{"lineNum":"  759","line":"    allocator.destroy(zero_bit_ptr);"},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"    const oversize = try allocator.alignedAlloc(u32, null, 5);"},
{"lineNum":"  762","line":"    try testing.expect(oversize.len >= 5);"},
{"lineNum":"  763","line":"    for (oversize) |*item| {"},
{"lineNum":"  764","line":"        item.* = 0xDEADBEEF;"},
{"lineNum":"  765","line":"    }"},
{"lineNum":"  766","line":"    allocator.free(oversize);"},
{"lineNum":"  767","line":"}"},
{"lineNum":"  768","line":""},
{"lineNum":"  769","line":"pub fn testAllocatorAligned(base_allocator: mem.Allocator) !void {"},
{"lineNum":"  770","line":"    var validationAllocator = mem.validationWrap(base_allocator);"},
{"lineNum":"  771","line":"    const allocator = validationAllocator.allocator();"},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"    // Test a few alignment values, smaller and bigger than the type\'s one"},
{"lineNum":"  774","line":"    inline for ([_]u29{ 1, 2, 4, 8, 16, 32, 64 }) |alignment| {"},
{"lineNum":"  775","line":"        // initial"},
{"lineNum":"  776","line":"        var slice = try allocator.alignedAlloc(u8, alignment, 10);"},
{"lineNum":"  777","line":"        try testing.expect(slice.len == 10);"},
{"lineNum":"  778","line":"        // grow"},
{"lineNum":"  779","line":"        slice = try allocator.realloc(slice, 100);"},
{"lineNum":"  780","line":"        try testing.expect(slice.len == 100);"},
{"lineNum":"  781","line":"        if (allocator.resize(slice, 10)) {"},
{"lineNum":"  782","line":"            slice = slice[0..10];"},
{"lineNum":"  783","line":"        }"},
{"lineNum":"  784","line":"        try testing.expect(allocator.resize(slice, 0));"},
{"lineNum":"  785","line":"        slice = slice[0..0];"},
{"lineNum":"  786","line":"        // realloc from zero"},
{"lineNum":"  787","line":"        slice = try allocator.realloc(slice, 100);"},
{"lineNum":"  788","line":"        try testing.expect(slice.len == 100);"},
{"lineNum":"  789","line":"        if (allocator.resize(slice, 10)) {"},
{"lineNum":"  790","line":"            slice = slice[0..10];"},
{"lineNum":"  791","line":"        }"},
{"lineNum":"  792","line":"        try testing.expect(allocator.resize(slice, 0));"},
{"lineNum":"  793","line":"    }"},
{"lineNum":"  794","line":"}"},
{"lineNum":"  795","line":""},
{"lineNum":"  796","line":"pub fn testAllocatorLargeAlignment(base_allocator: mem.Allocator) !void {"},
{"lineNum":"  797","line":"    var validationAllocator = mem.validationWrap(base_allocator);"},
{"lineNum":"  798","line":"    const allocator = validationAllocator.allocator();"},
{"lineNum":"  799","line":""},
{"lineNum":"  800","line":"    const large_align: usize = mem.page_size / 2;"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"    var align_mask: usize = undefined;"},
{"lineNum":"  803","line":"    align_mask = @shlWithOverflow(~@as(usize, 0), @as(Allocator.Log2Align, @ctz(large_align)))[0];"},
{"lineNum":"  804","line":""},
{"lineNum":"  805","line":"    var slice = try allocator.alignedAlloc(u8, large_align, 500);"},
{"lineNum":"  806","line":"    try testing.expect(@ptrToInt(slice.ptr) & align_mask == @ptrToInt(slice.ptr));"},
{"lineNum":"  807","line":""},
{"lineNum":"  808","line":"    if (allocator.resize(slice, 100)) {"},
{"lineNum":"  809","line":"        slice = slice[0..100];"},
{"lineNum":"  810","line":"    }"},
{"lineNum":"  811","line":""},
{"lineNum":"  812","line":"    slice = try allocator.realloc(slice, 5000);"},
{"lineNum":"  813","line":"    try testing.expect(@ptrToInt(slice.ptr) & align_mask == @ptrToInt(slice.ptr));"},
{"lineNum":"  814","line":""},
{"lineNum":"  815","line":"    if (allocator.resize(slice, 10)) {"},
{"lineNum":"  816","line":"        slice = slice[0..10];"},
{"lineNum":"  817","line":"    }"},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    slice = try allocator.realloc(slice, 20000);"},
{"lineNum":"  820","line":"    try testing.expect(@ptrToInt(slice.ptr) & align_mask == @ptrToInt(slice.ptr));"},
{"lineNum":"  821","line":""},
{"lineNum":"  822","line":"    allocator.free(slice);"},
{"lineNum":"  823","line":"}"},
{"lineNum":"  824","line":""},
{"lineNum":"  825","line":"pub fn testAllocatorAlignedShrink(base_allocator: mem.Allocator) !void {"},
{"lineNum":"  826","line":"    var validationAllocator = mem.validationWrap(base_allocator);"},
{"lineNum":"  827","line":"    const allocator = validationAllocator.allocator();"},
{"lineNum":"  828","line":""},
{"lineNum":"  829","line":"    var debug_buffer: [1000]u8 = undefined;"},
{"lineNum":"  830","line":"    var fib = FixedBufferAllocator.init(&debug_buffer);"},
{"lineNum":"  831","line":"    const debug_allocator = fib.allocator();"},
{"lineNum":"  832","line":""},
{"lineNum":"  833","line":"    const alloc_size = mem.page_size * 2 + 50;"},
{"lineNum":"  834","line":"    var slice = try allocator.alignedAlloc(u8, 16, alloc_size);"},
{"lineNum":"  835","line":"    defer allocator.free(slice);"},
{"lineNum":"  836","line":""},
{"lineNum":"  837","line":"    var stuff_to_free = std.ArrayList([]align(16) u8).init(debug_allocator);"},
{"lineNum":"  838","line":"    // On Windows, VirtualAlloc returns addresses aligned to a 64K boundary,"},
{"lineNum":"  839","line":"    // which is 16 pages, hence the 32. This test may require to increase"},
{"lineNum":"  840","line":"    // the size of the allocations feeding the `allocator` parameter if they"},
{"lineNum":"  841","line":"    // fail, because of this high over-alignment we want to have."},
{"lineNum":"  842","line":"    while (@ptrToInt(slice.ptr) == mem.alignForward(@ptrToInt(slice.ptr), mem.page_size * 32)) {"},
{"lineNum":"  843","line":"        try stuff_to_free.append(slice);"},
{"lineNum":"  844","line":"        slice = try allocator.alignedAlloc(u8, 16, alloc_size);"},
{"lineNum":"  845","line":"    }"},
{"lineNum":"  846","line":"    while (stuff_to_free.popOrNull()) |item| {"},
{"lineNum":"  847","line":"        allocator.free(item);"},
{"lineNum":"  848","line":"    }"},
{"lineNum":"  849","line":"    slice[0] = 0x12;"},
{"lineNum":"  850","line":"    slice[60] = 0x34;"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"    slice = try allocator.reallocAdvanced(slice, alloc_size / 2, 0);"},
{"lineNum":"  853","line":"    try testing.expect(slice[0] == 0x12);"},
{"lineNum":"  854","line":"    try testing.expect(slice[60] == 0x34);"},
{"lineNum":"  855","line":"}"},
{"lineNum":"  856","line":""},
{"lineNum":"  857","line":"test {"},
{"lineNum":"  858","line":"    _ = LoggingAllocator;"},
{"lineNum":"  859","line":"    _ = LogToWriterAllocator;"},
{"lineNum":"  860","line":"    _ = ScopedLoggingAllocator;"},
{"lineNum":"  861","line":"    _ = @import(\"heap/memory_pool.zig\");"},
{"lineNum":"  862","line":"    _ = ArenaAllocator;"},
{"lineNum":"  863","line":"    _ = GeneralPurposeAllocator;"},
{"lineNum":"  864","line":"    if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  865","line":"        _ = WasmAllocator;"},
{"lineNum":"  866","line":"        _ = WasmPageAllocator;"},
{"lineNum":"  867","line":"    }"},
{"lineNum":"  868","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 39, "covered" : 22,};
var merged_data = [];
