var data = {lines:[
{"lineNum":"    1","line":"const token_ = @import(\"token.zig\");"},
{"lineNum":"    2","line":"const Token = token_.Token;"},
{"lineNum":"    3","line":"const span = @import(\"span.zig\");"},
{"lineNum":"    4","line":"const Span = span.Span;"},
{"lineNum":"    5","line":"const std = @import(\"std\");"},
{"lineNum":"    6","line":"const errs = @import(\"errors.zig\");"},
{"lineNum":"    7","line":"const Error = errs.Error;"},
{"lineNum":"    8","line":""},
{"lineNum":"    9","line":"const LexerErrors = error{lexerError};"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"/// Will always end in an EOF on the first column of the next line"},
{"lineNum":"   12","line":"pub fn getTokens(contents: []const u8, errors: *errs.Errors, allocator: std.mem.Allocator) !std.ArrayList(Token) {","class":"lineCov","hits":"1","order":"702","possible_hits":"1",},
{"lineNum":"   13","line":"    const LexState = enum { //"},
{"lineNum":"   14","line":"        none,"},
{"lineNum":"   15","line":"        whitespace,"},
{"lineNum":"   16","line":"        ident,"},
{"lineNum":"   17","line":"        string,"},
{"lineNum":"   18","line":"        escapedString,"},
{"lineNum":"   19","line":"        char,"},
{"lineNum":"   20","line":"        escapedChar,"},
{"lineNum":"   21","line":"        integer,"},
{"lineNum":"   22","line":"        integerDigit,"},
{"lineNum":"   23","line":"        real,"},
{"lineNum":"   24","line":"        realDigit,"},
{"lineNum":"   25","line":"        hex,"},
{"lineNum":"   26","line":"        hexDigit,"},
{"lineNum":"   27","line":"        octal,"},
{"lineNum":"   28","line":"        octalDigit,"},
{"lineNum":"   29","line":"        binary,"},
{"lineNum":"   30","line":"        binaryDigit,"},
{"lineNum":"   31","line":"        symbol,"},
{"lineNum":"   32","line":"        comment,"},
{"lineNum":"   33","line":"    };"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    var tokens = std.ArrayList(Token).init(allocator);","class":"lineCov","hits":"1","order":"703","possible_hits":"1",},
{"lineNum":"   36","line":"    var slice_start: usize = 0;","class":"lineCov","hits":"1","order":"704","possible_hits":"1",},
{"lineNum":"   37","line":"    var ix: usize = 0;","class":"lineCov","hits":"1","order":"705","possible_hits":"1",},
{"lineNum":"   38","line":"    var state: LexState = .none;","class":"lineCov","hits":"1","order":"706","possible_hits":"1",},
{"lineNum":"   39","line":"    var line: i64 = 1;","class":"lineCov","hits":"1","order":"707","possible_hits":"1",},
{"lineNum":"   40","line":"    var col: i64 = 0;","class":"lineCov","hits":"1","order":"708","possible_hits":"1",},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    while (ix < contents.len + 1) {","class":"lineCov","hits":"1","order":"709","possible_hits":"1",},
{"lineNum":"   43","line":"        // It should be ok to not have a newline at the end of a file"},
{"lineNum":"   44","line":"        // DO NOT assume ix < contents.len. DO NOT do contents[ix] besides the following line"},
{"lineNum":"   45","line":"        const next_char = if (ix < contents.len) contents[ix] else \'\\n\';","class":"lineCov","hits":"2","order":"710","possible_hits":"2",},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"        switch (state) {","class":"lineCov","hits":"3","order":"711","possible_hits":"3",},
{"lineNum":"   48","line":"            .none => {"},
{"lineNum":"   49","line":"                if (std.ascii.isWhitespace(next_char)) {","class":"lineCov","hits":"1","order":"712","possible_hits":"1",},
{"lineNum":"   50","line":"                    state = .whitespace;","class":"lineCov","hits":"1","order":"736","possible_hits":"1",},
{"lineNum":"   51","line":"                    if (next_char == \'\\n\') {","class":"lineCov","hits":"1","order":"737","possible_hits":"1",},
{"lineNum":"   52","line":"                        line += 1;","class":"lineCov","hits":"2","order":"738","possible_hits":"2",},
{"lineNum":"   53","line":"                        col = 0;","class":"lineCov","hits":"2","order":"739","possible_hits":"2",},
{"lineNum":"   54","line":"                    }"},
{"lineNum":"   55","line":"                } else if (std.ascii.isAlphabetic(next_char) or next_char == \'_\') {","class":"lineCov","hits":"2","order":"716","possible_hits":"2",},
{"lineNum":"   56","line":"                    state = .ident;","class":"lineCov","hits":"1","order":"1046","possible_hits":"1",},
{"lineNum":"   57","line":"                } else if (std.ascii.isDigit(next_char)) {","class":"lineCov","hits":"1","order":"719","possible_hits":"1",},
{"lineNum":"   58","line":"                    state = .integer;","class":"lineCov","hits":"1","order":"1078","possible_hits":"1",},
{"lineNum":"   59","line":"                } else if (next_char == \'\"\') {","class":"lineCov","hits":"1","order":"722","possible_hits":"1",},
{"lineNum":"   60","line":"                    state = .string;","class":"lineCov","hits":"1","order":"1955","possible_hits":"1",},
{"lineNum":"   61","line":"                } else if (next_char == \'\\\'\') {","class":"lineCov","hits":"1","order":"723","possible_hits":"1",},
{"lineNum":"   62","line":"                    state = .char;","class":"lineCov","hits":"1","order":"2009","possible_hits":"1",},
{"lineNum":"   63","line":"                } else {"},
{"lineNum":"   64","line":"                    state = .symbol;","class":"lineCov","hits":"1","order":"724","possible_hits":"1",},
{"lineNum":"   65","line":"                }"},
{"lineNum":"   66","line":"                ix += 1;","class":"lineCov","hits":"1","order":"725","possible_hits":"1",},
{"lineNum":"   67","line":"                col += 1;","class":"lineCov","hits":"1","order":"726","possible_hits":"1",},
{"lineNum":"   68","line":"            },"},
{"lineNum":"   69","line":""},
{"lineNum":"   70","line":"            .whitespace => {"},
{"lineNum":"   71","line":"                if (ix == contents.len or !std.ascii.isWhitespace(next_char)) {","class":"lineCov","hits":"1","order":"740","possible_hits":"1",},
{"lineNum":"   72","line":"                    // If token doesn\'t contain a newline, just ignore it"},
{"lineNum":"   73","line":"                    // If it does, the data is from the newline all the way to the end"},
{"lineNum":"   74","line":"                    var maybe_last_newline_ix: ?usize = null;","class":"lineCov","hits":"1","order":"741","possible_hits":"1",},
{"lineNum":"   75","line":"                    var jx = slice_start;","class":"lineCov","hits":"1","order":"742","possible_hits":"1",},
{"lineNum":"   76","line":"                    while (jx < ix) : (jx += 1) {","class":"lineCov","hits":"3","order":"743","possible_hits":"3",},
{"lineNum":"   77","line":"                        if (contents[jx] == \'\\n\') {","class":"lineCov","hits":"2","order":"744","possible_hits":"2",},
{"lineNum":"   78","line":"                            maybe_last_newline_ix = jx;","class":"lineCov","hits":"1","order":"745","possible_hits":"1",},
{"lineNum":"   79","line":"                        }"},
{"lineNum":"   80","line":"                    }"},
{"lineNum":"   81","line":"                    if (maybe_last_newline_ix) |last_newline_ix| {","class":"lineCov","hits":"1","order":"746","possible_hits":"1",},
{"lineNum":"   82","line":"                        try tokens.append(Token.create(contents[last_newline_ix..ix], .NEWLINE, line, col));","class":"lineCov","hits":"1","order":"747","possible_hits":"1",},
{"lineNum":"   83","line":"                    }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1044","possible_hits":"1",},
{"lineNum":"   86","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1045","possible_hits":"1",},
{"lineNum":"   87","line":"                } else if (next_char == \'\\n\') {","class":"lineCov","hits":"1","order":"1740","possible_hits":"1",},
{"lineNum":"   88","line":"                    line += 1;","class":"lineCov","hits":"2","order":"1743","possible_hits":"2",},
{"lineNum":"   89","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1744","possible_hits":"1",},
{"lineNum":"   90","line":"                    col = 0;","class":"lineCov","hits":"1","order":"1745","possible_hits":"1",},
{"lineNum":"   91","line":"                } else {"},
{"lineNum":"   92","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1741","possible_hits":"2",},
{"lineNum":"   93","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1742","possible_hits":"1",},
{"lineNum":"   94","line":"                }"},
{"lineNum":"   95","line":"            },"},
{"lineNum":"   96","line":""},
{"lineNum":"   97","line":"            .ident => {"},
{"lineNum":"   98","line":"                if (ix == contents.len or !std.ascii.isAlphanumeric(next_char) and next_char != \'_\' and next_char != \'\\\'\') {","class":"lineCov","hits":"1","order":"1047","possible_hits":"1",},
{"lineNum":"   99","line":"                    try tokens.append(Token.create(contents[slice_start..ix], null, line, col));","class":"lineCov","hits":"2","order":"1052","possible_hits":"2",},
{"lineNum":"  100","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1071","possible_hits":"1",},
{"lineNum":"  101","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1072","possible_hits":"1",},
{"lineNum":"  102","line":"                } else {"},
{"lineNum":"  103","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1050","possible_hits":"2",},
{"lineNum":"  104","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1051","possible_hits":"1",},
{"lineNum":"  105","line":"                }"},
{"lineNum":"  106","line":"            },"},
{"lineNum":"  107","line":""},
{"lineNum":"  108","line":"            .string => {"},
{"lineNum":"  109","line":"                if (ix == contents.len) {","class":"lineCov","hits":"1","order":"1956","possible_hits":"1",},
{"lineNum":"  110","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"expected `\\\"`, got end-of-file\" } });","class":"lineCov","hits":"1","order":"1981","possible_hits":"1",},
{"lineNum":"  111","line":"                    return LexerErrors.lexerError;","class":"lineCov","hits":"1","order":"1984","possible_hits":"1",},
{"lineNum":"  112","line":"                } else switch (next_char) {","class":"lineCov","hits":"1","order":"1957","possible_hits":"1",},
{"lineNum":"  113","line":"                    \'\"\' => {"},
{"lineNum":"  114","line":"                        ix += 1;","class":"lineCov","hits":"1","order":"1967","possible_hits":"1",},
{"lineNum":"  115","line":"                        col += 1;","class":"lineCov","hits":"1","order":"1968","possible_hits":"1",},
{"lineNum":"  116","line":"                        try tokens.append(Token.create(contents[slice_start..ix], .STRING, line, col));","class":"lineCov","hits":"1","order":"1969","possible_hits":"1",},
{"lineNum":"  117","line":"                        slice_start = ix;","class":"lineCov","hits":"1","order":"1970","possible_hits":"1",},
{"lineNum":"  118","line":"                        state = .none;","class":"lineCov","hits":"1","order":"1971","possible_hits":"1",},
{"lineNum":"  119","line":"                    },"},
{"lineNum":"  120","line":"                    \'\\\\\' => {"},
{"lineNum":"  121","line":"                        ix += 1;","class":"lineCov","hits":"1","order":"1960","possible_hits":"1",},
{"lineNum":"  122","line":"                        col += 1;","class":"lineCov","hits":"1","order":"1961","possible_hits":"1",},
{"lineNum":"  123","line":"                        state = .escapedString;","class":"lineCov","hits":"1","order":"1962","possible_hits":"1",},
{"lineNum":"  124","line":"                    },"},
{"lineNum":"  125","line":"                    else => {"},
{"lineNum":"  126","line":"                        ix += 1;","class":"lineCov","hits":"2","order":"1958","possible_hits":"2",},
{"lineNum":"  127","line":"                        col += 1;","class":"lineCov","hits":"1","order":"1959","possible_hits":"1",},
{"lineNum":"  128","line":"                    },"},
{"lineNum":"  129","line":"                }"},
{"lineNum":"  130","line":"            },"},
{"lineNum":"  131","line":""},
{"lineNum":"  132","line":"            .escapedString => {"},
{"lineNum":"  133","line":"                if (ix == contents.len) {","class":"lineCov","hits":"1","order":"1963","possible_hits":"1",},
{"lineNum":"  134","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"expected a character, got end-of-file\" } });","class":"lineCov","hits":"1","order":"2000","possible_hits":"1",},
{"lineNum":"  135","line":"                    return LexerErrors.lexerError;","class":"lineCov","hits":"1","order":"2001","possible_hits":"1",},
{"lineNum":"  136","line":"                } else {"},
{"lineNum":"  137","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1964","possible_hits":"1",},
{"lineNum":"  138","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1965","possible_hits":"1",},
{"lineNum":"  139","line":"                    state = .string;","class":"lineCov","hits":"1","order":"1966","possible_hits":"1",},
{"lineNum":"  140","line":"                }"},
{"lineNum":"  141","line":"            },"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"            .char => {"},
{"lineNum":"  144","line":"                if (ix == contents.len) {","class":"lineCov","hits":"1","order":"2010","possible_hits":"1",},
{"lineNum":"  145","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"expected a `\'`, got end-of-file\" } });","class":"lineCov","hits":"1","order":"2035","possible_hits":"1",},
{"lineNum":"  146","line":"                    return LexerErrors.lexerError;","class":"lineCov","hits":"1","order":"2036","possible_hits":"1",},
{"lineNum":"  147","line":"                } else switch (next_char) {","class":"lineCov","hits":"1","order":"2011","possible_hits":"1",},
{"lineNum":"  148","line":"                    \'\\\'\' => {"},
{"lineNum":"  149","line":"                        ix += 1;","class":"lineCov","hits":"1","order":"2021","possible_hits":"1",},
{"lineNum":"  150","line":"                        col += 1;","class":"lineCov","hits":"1","order":"2022","possible_hits":"1",},
{"lineNum":"  151","line":"                        try tokens.append(Token.create(contents[slice_start..ix], .CHAR, line, col));","class":"lineCov","hits":"1","order":"2023","possible_hits":"1",},
{"lineNum":"  152","line":"                        slice_start = ix;","class":"lineCov","hits":"1","order":"2024","possible_hits":"1",},
{"lineNum":"  153","line":"                        state = .none;","class":"lineCov","hits":"1","order":"2025","possible_hits":"1",},
{"lineNum":"  154","line":"                    },"},
{"lineNum":"  155","line":"                    \'\\\\\' => {"},
{"lineNum":"  156","line":"                        ix += 1;","class":"lineCov","hits":"1","order":"2014","possible_hits":"1",},
{"lineNum":"  157","line":"                        col += 1;","class":"lineCov","hits":"1","order":"2015","possible_hits":"1",},
{"lineNum":"  158","line":"                        state = .escapedChar;","class":"lineCov","hits":"1","order":"2016","possible_hits":"1",},
{"lineNum":"  159","line":"                    },"},
{"lineNum":"  160","line":"                    else => {"},
{"lineNum":"  161","line":"                        ix += 1;","class":"lineCov","hits":"2","order":"2012","possible_hits":"2",},
{"lineNum":"  162","line":"                        col += 1;","class":"lineCov","hits":"1","order":"2013","possible_hits":"1",},
{"lineNum":"  163","line":"                    },"},
{"lineNum":"  164","line":"                }"},
{"lineNum":"  165","line":"            },"},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"            .escapedChar => {"},
{"lineNum":"  168","line":"                if (ix == contents.len) {","class":"lineCov","hits":"1","order":"2017","possible_hits":"1",},
{"lineNum":"  169","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"expected a character, got end-of-file\" } });","class":"lineCov","hits":"1","order":"2044","possible_hits":"1",},
{"lineNum":"  170","line":"                    return LexerErrors.lexerError;","class":"lineCov","hits":"1","order":"2045","possible_hits":"1",},
{"lineNum":"  171","line":"                } else {"},
{"lineNum":"  172","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"2018","possible_hits":"1",},
{"lineNum":"  173","line":"                    col += 1;","class":"lineCov","hits":"1","order":"2019","possible_hits":"1",},
{"lineNum":"  174","line":"                    state = .char;","class":"lineCov","hits":"1","order":"2020","possible_hits":"1",},
{"lineNum":"  175","line":"                }"},
{"lineNum":"  176","line":"            },"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"            .integer => {"},
{"lineNum":"  179","line":"                if (next_char == \'.\' and std.ascii.isDigit(contents[ix + 1])) {","class":"lineCov","hits":"1","order":"1079","possible_hits":"1",},
{"lineNum":"  180","line":"                    // real number"},
{"lineNum":"  181","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1867","possible_hits":"2",},
{"lineNum":"  182","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1868","possible_hits":"1",},
{"lineNum":"  183","line":"                    state = .real;","class":"lineCov","hits":"1","order":"1869","possible_hits":"1",},
{"lineNum":"  184","line":"                } else if (ix - slice_start > 0 and contents[slice_start] == \'0\' and next_char == \'x\') {","class":"lineCov","hits":"2","order":"1080","possible_hits":"2",},
{"lineNum":"  185","line":"                    // hexadecimal"},
{"lineNum":"  186","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1884","possible_hits":"2",},
{"lineNum":"  187","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1885","possible_hits":"1",},
{"lineNum":"  188","line":"                    state = .hex;","class":"lineCov","hits":"1","order":"1886","possible_hits":"1",},
{"lineNum":"  189","line":"                } else if (ix - slice_start > 0 and contents[slice_start] == \'0\' and next_char == \'o\') {","class":"lineCov","hits":"2","order":"1081","possible_hits":"2",},
{"lineNum":"  190","line":"                    // octal"},
{"lineNum":"  191","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1901","possible_hits":"2",},
{"lineNum":"  192","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1902","possible_hits":"1",},
{"lineNum":"  193","line":"                    state = .octal;","class":"lineCov","hits":"1","order":"1903","possible_hits":"1",},
{"lineNum":"  194","line":"                } else if (ix - slice_start > 0 and contents[slice_start] == \'0\' and next_char == \'b\') {","class":"lineCov","hits":"2","order":"1082","possible_hits":"2",},
{"lineNum":"  195","line":"                    // binary"},
{"lineNum":"  196","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1918","possible_hits":"2",},
{"lineNum":"  197","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1919","possible_hits":"1",},
{"lineNum":"  198","line":"                    state = .binary;","class":"lineCov","hits":"1","order":"1920","possible_hits":"1",},
{"lineNum":"  199","line":"                } else if (next_char == \'\\\'\') {","class":"lineCov","hits":"1","order":"1083","possible_hits":"1",},
{"lineNum":"  200","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1935","possible_hits":"2",},
{"lineNum":"  201","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1936","possible_hits":"1",},
{"lineNum":"  202","line":"                    state = .integerDigit;","class":"lineCov","hits":"1","order":"1937","possible_hits":"1",},
{"lineNum":"  203","line":"                } else if (ix == contents.len or !std.ascii.isDigit(next_char)) {","class":"lineCov","hits":"2","order":"1084","possible_hits":"2",},
{"lineNum":"  204","line":"                    try tokens.append(Token.create(contents[slice_start..ix], .DECIMAL_INTEGER, line, col));","class":"lineCov","hits":"2","order":"1085","possible_hits":"2",},
{"lineNum":"  205","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1086","possible_hits":"1",},
{"lineNum":"  206","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1087","possible_hits":"1",},
{"lineNum":"  207","line":"                } else {"},
{"lineNum":"  208","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1865","possible_hits":"2",},
{"lineNum":"  209","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1866","possible_hits":"1",},
{"lineNum":"  210","line":"                }"},
{"lineNum":"  211","line":"            },"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            .integerDigit => {"},
{"lineNum":"  214","line":"                if (ix == contents.len or !std.ascii.isDigit(next_char)) {","class":"lineCov","hits":"1","order":"1938","possible_hits":"1",},
{"lineNum":"  215","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"invalid integer literal\" } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"                    return error.lexerError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                } else {"},
{"lineNum":"  218","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1939","possible_hits":"1",},
{"lineNum":"  219","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1940","possible_hits":"1",},
{"lineNum":"  220","line":"                    state = .integer;","class":"lineCov","hits":"1","order":"1941","possible_hits":"1",},
{"lineNum":"  221","line":"                }"},
{"lineNum":"  222","line":"            },"},
{"lineNum":"  223","line":""},
{"lineNum":"  224","line":"            .real => {"},
{"lineNum":"  225","line":"                if (next_char == \'\\\'\') {","class":"lineCov","hits":"1","order":"1870","possible_hits":"1",},
{"lineNum":"  226","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1874","possible_hits":"2",},
{"lineNum":"  227","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1875","possible_hits":"1",},
{"lineNum":"  228","line":"                    state = .realDigit;","class":"lineCov","hits":"1","order":"1876","possible_hits":"1",},
{"lineNum":"  229","line":"                } else if (ix == contents.len or !std.ascii.isDigit(next_char)) {","class":"linePartCov","hits":"1","order":"1871","possible_hits":"2",},
{"lineNum":"  230","line":"                    try tokens.append(Token.create(contents[slice_start..ix], .REAL, line, col));","class":"lineCov","hits":"2","order":"1881","possible_hits":"2",},
{"lineNum":"  231","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1882","possible_hits":"1",},
{"lineNum":"  232","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1883","possible_hits":"1",},
{"lineNum":"  233","line":"                } else {"},
{"lineNum":"  234","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1872","possible_hits":"2",},
{"lineNum":"  235","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1873","possible_hits":"1",},
{"lineNum":"  236","line":"                }"},
{"lineNum":"  237","line":"            },"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"            .realDigit => if (ix == contents.len or !std.ascii.isDigit(next_char)) {","class":"lineCov","hits":"1","order":"1877","possible_hits":"1",},
{"lineNum":"  240","line":"                errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"invalid floating point literal\" } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"                return error.lexerError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            } else {"},
{"lineNum":"  243","line":"                ix += 1;","class":"lineCov","hits":"1","order":"1878","possible_hits":"1",},
{"lineNum":"  244","line":"                col += 1;","class":"lineCov","hits":"1","order":"1879","possible_hits":"1",},
{"lineNum":"  245","line":"                state = .real;","class":"lineCov","hits":"1","order":"1880","possible_hits":"1",},
{"lineNum":"  246","line":"            },"},
{"lineNum":"  247","line":""},
{"lineNum":"  248","line":"            .hex => switch (next_char) {","class":"lineCov","hits":"1","order":"1887","possible_hits":"1",},
{"lineNum":"  249","line":"                \'\\\'\' => {"},
{"lineNum":"  250","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1891","possible_hits":"1",},
{"lineNum":"  251","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1892","possible_hits":"1",},
{"lineNum":"  252","line":"                    state = .hexDigit;","class":"lineCov","hits":"2","order":"1888","possible_hits":"2",},
{"lineNum":"  253","line":"                },"},
{"lineNum":"  254","line":"                \'0\'...\'9\', \'a\'...\'f\', \'A\'...\'F\' => {"},
{"lineNum":"  255","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1889","possible_hits":"2",},
{"lineNum":"  256","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1890","possible_hits":"1",},
{"lineNum":"  257","line":"                },"},
{"lineNum":"  258","line":"                else => {"},
{"lineNum":"  259","line":"                    try tokens.append(Token.create(contents[slice_start..ix], .HEX_INTEGER, line, col));","class":"lineCov","hits":"2","order":"1898","possible_hits":"2",},
{"lineNum":"  260","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1899","possible_hits":"1",},
{"lineNum":"  261","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1900","possible_hits":"1",},
{"lineNum":"  262","line":"                },"},
{"lineNum":"  263","line":"            },"},
{"lineNum":"  264","line":""},
{"lineNum":"  265","line":"            .hexDigit => switch (next_char) {","class":"lineCov","hits":"1","order":"1893","possible_hits":"1",},
{"lineNum":"  266","line":"                \'0\'...\'9\', \'a\'...\'f\', \'A\'...\'F\' => {"},
{"lineNum":"  267","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1894","possible_hits":"2",},
{"lineNum":"  268","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1895","possible_hits":"1",},
{"lineNum":"  269","line":"                    state = .hex;","class":"lineCov","hits":"1","order":"1896","possible_hits":"1",},
{"lineNum":"  270","line":"                },"},
{"lineNum":"  271","line":"                else => {"},
{"lineNum":"  272","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"invalid hexadecimal integer literal\" } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  273","line":"                    return error.lexerError;","class":"linePartCov","hits":"1","order":"1897","possible_hits":"2",},
{"lineNum":"  274","line":"                },"},
{"lineNum":"  275","line":"            },"},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"            .octal => switch (next_char) {","class":"lineCov","hits":"1","order":"1904","possible_hits":"1",},
{"lineNum":"  278","line":"                \'\\\'\' => {"},
{"lineNum":"  279","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1908","possible_hits":"1",},
{"lineNum":"  280","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1909","possible_hits":"1",},
{"lineNum":"  281","line":"                    state = .octalDigit;","class":"lineCov","hits":"2","order":"1905","possible_hits":"2",},
{"lineNum":"  282","line":"                },"},
{"lineNum":"  283","line":"                \'0\'...\'7\' => {"},
{"lineNum":"  284","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1906","possible_hits":"2",},
{"lineNum":"  285","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1907","possible_hits":"1",},
{"lineNum":"  286","line":"                },"},
{"lineNum":"  287","line":"                else => {"},
{"lineNum":"  288","line":"                    try tokens.append(Token.create(contents[slice_start..ix], .OCT_INTEGER, line, col));","class":"lineCov","hits":"2","order":"1915","possible_hits":"2",},
{"lineNum":"  289","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1916","possible_hits":"1",},
{"lineNum":"  290","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1917","possible_hits":"1",},
{"lineNum":"  291","line":"                },"},
{"lineNum":"  292","line":"            },"},
{"lineNum":"  293","line":""},
{"lineNum":"  294","line":"            .octalDigit => switch (next_char) {","class":"lineCov","hits":"1","order":"1910","possible_hits":"1",},
{"lineNum":"  295","line":"                \'0\'...\'7\' => {"},
{"lineNum":"  296","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1911","possible_hits":"2",},
{"lineNum":"  297","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1912","possible_hits":"1",},
{"lineNum":"  298","line":"                    state = .octal;","class":"lineCov","hits":"1","order":"1913","possible_hits":"1",},
{"lineNum":"  299","line":"                },"},
{"lineNum":"  300","line":"                else => {"},
{"lineNum":"  301","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"invalid octal integer literal\" } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"                    return error.lexerError;","class":"linePartCov","hits":"1","order":"1914","possible_hits":"2",},
{"lineNum":"  303","line":"                },"},
{"lineNum":"  304","line":"            },"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"            .binary => switch (next_char) {","class":"lineCov","hits":"1","order":"1921","possible_hits":"1",},
{"lineNum":"  307","line":"                \'\\\'\' => {"},
{"lineNum":"  308","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"1925","possible_hits":"1",},
{"lineNum":"  309","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1926","possible_hits":"1",},
{"lineNum":"  310","line":"                    state = .binaryDigit;","class":"lineCov","hits":"2","order":"1922","possible_hits":"2",},
{"lineNum":"  311","line":"                },"},
{"lineNum":"  312","line":"                \'0\'...\'1\' => {"},
{"lineNum":"  313","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1923","possible_hits":"2",},
{"lineNum":"  314","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1924","possible_hits":"1",},
{"lineNum":"  315","line":"                },"},
{"lineNum":"  316","line":"                else => {"},
{"lineNum":"  317","line":"                    try tokens.append(Token.create(contents[slice_start..ix], .BIN_INTEGER, line, col));","class":"lineCov","hits":"2","order":"1932","possible_hits":"2",},
{"lineNum":"  318","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1933","possible_hits":"1",},
{"lineNum":"  319","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1934","possible_hits":"1",},
{"lineNum":"  320","line":"                },"},
{"lineNum":"  321","line":"            },"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"            .binaryDigit => switch (next_char) {","class":"lineCov","hits":"1","order":"1927","possible_hits":"1",},
{"lineNum":"  324","line":"                \'0\'...\'1\' => {"},
{"lineNum":"  325","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1928","possible_hits":"2",},
{"lineNum":"  326","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1929","possible_hits":"1",},
{"lineNum":"  327","line":"                    state = .binary;","class":"lineCov","hits":"1","order":"1930","possible_hits":"1",},
{"lineNum":"  328","line":"                },"},
{"lineNum":"  329","line":"                else => {"},
{"lineNum":"  330","line":"                    errors.addError(Error{ .basic = .{ .span = span.Span{ .col = col, .line = line }, .msg = \"invalid binary integer literal\" } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"                    return error.lexerError;","class":"linePartCov","hits":"1","order":"1931","possible_hits":"2",},
{"lineNum":"  332","line":"                },"},
{"lineNum":"  333","line":"            },"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"            .symbol => {"},
{"lineNum":"  336","line":"                if (ix - slice_start > 0 and contents[slice_start] == \'/\' and next_char == \'/\') {","class":"lineCov","hits":"1","order":"727","possible_hits":"1",},
{"lineNum":"  337","line":"                    // comment (because of the maximal munch thing I think this isnt even needed...)"},
{"lineNum":"  338","line":"                    state = .comment;","class":"lineCov","hits":"1","order":"728","possible_hits":"1",},
{"lineNum":"  339","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"729","possible_hits":"2",},
{"lineNum":"  340","line":"                    col += 1;","class":"lineCov","hits":"1","order":"730","possible_hits":"1",},
{"lineNum":"  341","line":"                } else if (ix == contents.len or token_.kindFromString(contents[slice_start .. ix + 1]) == .IDENTIFIER) { // Couldn\'t maximally munch, this must be the end of the token","class":"lineCov","hits":"2","order":"1074","possible_hits":"2",},
{"lineNum":"  342","line":"                    try tokens.append(Token.create(contents[slice_start..ix], null, line, col));","class":"lineCov","hits":"2","order":"1075","possible_hits":"2",},
{"lineNum":"  343","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"1076","possible_hits":"1",},
{"lineNum":"  344","line":"                    state = .none;","class":"lineCov","hits":"1","order":"1077","possible_hits":"1",},
{"lineNum":"  345","line":"                } else {"},
{"lineNum":"  346","line":"                    ix += 1;","class":"lineCov","hits":"2","order":"1664","possible_hits":"2",},
{"lineNum":"  347","line":"                    col += 1;","class":"lineCov","hits":"1","order":"1665","possible_hits":"1",},
{"lineNum":"  348","line":"                }"},
{"lineNum":"  349","line":"            },"},
{"lineNum":"  350","line":""},
{"lineNum":"  351","line":"            .comment => {"},
{"lineNum":"  352","line":"                if (next_char == \'\\n\') {","class":"lineCov","hits":"1","order":"731","possible_hits":"1",},
{"lineNum":"  353","line":"                    slice_start = ix;","class":"lineCov","hits":"1","order":"734","possible_hits":"1",},
{"lineNum":"  354","line":"                    state = .none;","class":"lineCov","hits":"1","order":"735","possible_hits":"1",},
{"lineNum":"  355","line":"                } else {"},
{"lineNum":"  356","line":"                    ix += 1;","class":"lineCov","hits":"1","order":"732","possible_hits":"1",},
{"lineNum":"  357","line":"                    col += 1;","class":"lineCov","hits":"1","order":"733","possible_hits":"1",},
{"lineNum":"  358","line":"                }"},
{"lineNum":"  359","line":"            },"},
{"lineNum":"  360","line":"        }"},
{"lineNum":"  361","line":"    }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"    try tokens.append(Token.create(\"EOF\", .EOF, line, col));","class":"lineCov","hits":"1","order":"1088","possible_hits":"1",},
{"lineNum":"  364","line":"    return tokens;","class":"lineCov","hits":"1","order":"1220","possible_hits":"1",},
{"lineNum":"  365","line":"}"},
{"lineNum":"  366","line":""},
{"lineNum":"  367","line":"//////////////////////"},
{"lineNum":"  368","line":"// TESTS BEGIN HERE //"},
{"lineNum":"  369","line":"//////////////////////"},
{"lineNum":"  370","line":""},
{"lineNum":"  371","line":"test \"whitespace\" {","class":"lineCov","hits":"1","order":"1835","possible_hits":"1",},
{"lineNum":"  372","line":"    const contents = \"\\n  \\n    \";","class":"lineCov","hits":"1","order":"1836","possible_hits":"1",},
{"lineNum":"  373","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1837","possible_hits":"1",},
{"lineNum":"  374","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1849","possible_hits":"5",},
{"lineNum":"  375","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"1838","possible_hits":"2",},
{"lineNum":"  376","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1848","possible_hits":"4",},
{"lineNum":"  377","line":""},
{"lineNum":"  378","line":"    try std.testing.expectEqual(@as(usize, 2), tokens.items.len);","class":"linePartCov","hits":"1","order":"1839","possible_hits":"2",},
{"lineNum":"  379","line":"    try tokens.items[0].expectToken(.NEWLINE, \"\\n    \", 4, 3);","class":"linePartCov","hits":"1","order":"1840","possible_hits":"2",},
{"lineNum":"  380","line":"    try tokens.items[1].expectToken(.EOF, \"EOF\", 1, 4);","class":"linePartCov","hits":"1","order":"1846","possible_hits":"2",},
{"lineNum":"  381","line":"}"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"test \"identifier\" {","class":"lineCov","hits":"1","order":"1850","possible_hits":"1",},
{"lineNum":"  384","line":"    const contents = \"one _two three\'\";","class":"lineCov","hits":"1","order":"1851","possible_hits":"1",},
{"lineNum":"  385","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1852","possible_hits":"1",},
{"lineNum":"  386","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1860","possible_hits":"7",},
{"lineNum":"  387","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"1853","possible_hits":"2",},
{"lineNum":"  388","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1859","possible_hits":"6",},
{"lineNum":"  389","line":""},
{"lineNum":"  390","line":"    try std.testing.expectEqual(tokens.items.len, 4);","class":"linePartCov","hits":"1","order":"1854","possible_hits":"2",},
{"lineNum":"  391","line":"    try tokens.items[0].expectToken(.IDENTIFIER, \"one\", 3, 1);","class":"linePartCov","hits":"1","order":"1855","possible_hits":"2",},
{"lineNum":"  392","line":"    try tokens.items[1].expectToken(.IDENTIFIER, \"_two\", 8, 1);","class":"linePartCov","hits":"1","order":"1856","possible_hits":"2",},
{"lineNum":"  393","line":"    try tokens.items[2].expectToken(.IDENTIFIER, \"three\'\", 15, 1);","class":"linePartCov","hits":"1","order":"1857","possible_hits":"2",},
{"lineNum":"  394","line":"    try tokens.items[3].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"1858","possible_hits":"2",},
{"lineNum":"  395","line":"}"},
{"lineNum":"  396","line":""},
{"lineNum":"  397","line":"test \"numbers\" {","class":"lineCov","hits":"1","order":"1861","possible_hits":"1",},
{"lineNum":"  398","line":"    const contents = \"10.0\'0 0xAB\'C 0o77\'7 0b11\'1 10\'0\";","class":"lineCov","hits":"1","order":"1862","possible_hits":"1",},
{"lineNum":"  399","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1863","possible_hits":"1",},
{"lineNum":"  400","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1950","possible_hits":"9",},
{"lineNum":"  401","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"1864","possible_hits":"2",},
{"lineNum":"  402","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1949","possible_hits":"8",},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    try std.testing.expectEqual(tokens.items.len, 6);","class":"linePartCov","hits":"1","order":"1942","possible_hits":"2",},
{"lineNum":"  405","line":"    try tokens.items[0].expectToken(.REAL, \"10.0\'0\", 6, 1);","class":"linePartCov","hits":"1","order":"1943","possible_hits":"2",},
{"lineNum":"  406","line":"    try tokens.items[1].expectToken(.HEX_INTEGER, \"0xAB\'C\", 13, 1);","class":"linePartCov","hits":"1","order":"1944","possible_hits":"2",},
{"lineNum":"  407","line":"    try tokens.items[2].expectToken(.OCT_INTEGER, \"0o77\'7\", 20, 1);","class":"linePartCov","hits":"1","order":"1945","possible_hits":"2",},
{"lineNum":"  408","line":"    try tokens.items[3].expectToken(.BIN_INTEGER, \"0b11\'1\", 27, 1);","class":"linePartCov","hits":"1","order":"1946","possible_hits":"2",},
{"lineNum":"  409","line":"    try tokens.items[4].expectToken(.DECIMAL_INTEGER, \"10\'0\", 32, 1);","class":"linePartCov","hits":"1","order":"1947","possible_hits":"2",},
{"lineNum":"  410","line":"    try tokens.items[5].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"1948","possible_hits":"2",},
{"lineNum":"  411","line":"}"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"test \"string\" {","class":"lineCov","hits":"1","order":"1951","possible_hits":"1",},
{"lineNum":"  414","line":"    const contents = \"\\\"a \\\\\\\"string\\\\\\\"\\\"\";","class":"lineCov","hits":"1","order":"1952","possible_hits":"1",},
{"lineNum":"  415","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1953","possible_hits":"1",},
{"lineNum":"  416","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1976","possible_hits":"5",},
{"lineNum":"  417","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"1954","possible_hits":"2",},
{"lineNum":"  418","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1975","possible_hits":"4",},
{"lineNum":"  419","line":""},
{"lineNum":"  420","line":"    try std.testing.expectEqual(tokens.items.len, 2);","class":"linePartCov","hits":"1","order":"1972","possible_hits":"2",},
{"lineNum":"  421","line":"    try tokens.items[0].expectToken(.STRING, \"\\\"a \\\\\\\"string\\\\\\\"\\\"\", 14, 1);","class":"linePartCov","hits":"1","order":"1973","possible_hits":"2",},
{"lineNum":"  422","line":"    try tokens.items[1].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"1974","possible_hits":"2",},
{"lineNum":"  423","line":"}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"test \"string-eof\" {","class":"lineCov","hits":"1","order":"1977","possible_hits":"1",},
{"lineNum":"  426","line":"    const contents = \"\\\"this isn\'t a string- it\'s an error!\";","class":"lineCov","hits":"1","order":"1978","possible_hits":"1",},
{"lineNum":"  427","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1979","possible_hits":"1",},
{"lineNum":"  428","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1995","possible_hits":"3",},
{"lineNum":"  429","line":"    var tokensOrErr = getTokens(contents, &errors, std.testing.allocator);","class":"lineCov","hits":"1","order":"1980","possible_hits":"1",},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    try std.testing.expectError(LexerErrors.lexerError, tokensOrErr);","class":"linePartCov","hits":"1","order":"1990","possible_hits":"2",},
{"lineNum":"  432","line":"    try std.testing.expectEqual(@as(usize, errors.errors_list.items.len), 1);","class":"linePartCov","hits":"1","order":"1994","possible_hits":"2",},
{"lineNum":"  433","line":"}"},
{"lineNum":"  434","line":""},
{"lineNum":"  435","line":"test \"string-escape eof\" {","class":"lineCov","hits":"1","order":"1996","possible_hits":"1",},
{"lineNum":"  436","line":"    const contents = \"\\\"this isn\'t a string- it\'s an error! \\\\\";","class":"lineCov","hits":"1","order":"1997","possible_hits":"1",},
{"lineNum":"  437","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1998","possible_hits":"1",},
{"lineNum":"  438","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2004","possible_hits":"3",},
{"lineNum":"  439","line":"    var tokensOrErr = getTokens(contents, &errors, std.testing.allocator);","class":"lineCov","hits":"1","order":"1999","possible_hits":"1",},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"    try std.testing.expectError(LexerErrors.lexerError, tokensOrErr);","class":"linePartCov","hits":"1","order":"2002","possible_hits":"2",},
{"lineNum":"  442","line":"    try std.testing.expectEqual(@as(usize, errors.errors_list.items.len), 1);","class":"linePartCov","hits":"1","order":"2003","possible_hits":"2",},
{"lineNum":"  443","line":"}"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"test \"char\" {","class":"lineCov","hits":"1","order":"2005","possible_hits":"1",},
{"lineNum":"  446","line":"    const contents = \"\\\'a \\\\\\\'character\\\\\\\'\\\'\";","class":"lineCov","hits":"1","order":"2006","possible_hits":"1",},
{"lineNum":"  447","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2007","possible_hits":"1",},
{"lineNum":"  448","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2030","possible_hits":"5",},
{"lineNum":"  449","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"2008","possible_hits":"2",},
{"lineNum":"  450","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"2029","possible_hits":"4",},
{"lineNum":"  451","line":""},
{"lineNum":"  452","line":"    try std.testing.expectEqual(tokens.items.len, 2);","class":"linePartCov","hits":"1","order":"2026","possible_hits":"2",},
{"lineNum":"  453","line":"    try tokens.items[0].expectToken(.CHAR, \"\\\'a \\\\\\\'character\\\\\\\'\\\'\", 17, 1);","class":"linePartCov","hits":"1","order":"2027","possible_hits":"2",},
{"lineNum":"  454","line":"    try tokens.items[1].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"2028","possible_hits":"2",},
{"lineNum":"  455","line":"}"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"test \"char-eof\" {","class":"lineCov","hits":"1","order":"2031","possible_hits":"1",},
{"lineNum":"  458","line":"    const contents = \"\\\'a \\\\\\\'character\\\\\\\'\";","class":"lineCov","hits":"1","order":"2032","possible_hits":"1",},
{"lineNum":"  459","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2033","possible_hits":"1",},
{"lineNum":"  460","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2039","possible_hits":"3",},
{"lineNum":"  461","line":"    var tokensOrErr = getTokens(contents, &errors, std.testing.allocator);","class":"lineCov","hits":"1","order":"2034","possible_hits":"1",},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    try std.testing.expectError(LexerErrors.lexerError, tokensOrErr);","class":"linePartCov","hits":"1","order":"2037","possible_hits":"2",},
{"lineNum":"  464","line":"    try std.testing.expectEqual(@as(usize, errors.errors_list.items.len), 1);","class":"linePartCov","hits":"1","order":"2038","possible_hits":"2",},
{"lineNum":"  465","line":"}"},
{"lineNum":"  466","line":""},
{"lineNum":"  467","line":"test \"char-escaped eof\" {","class":"lineCov","hits":"1","order":"2040","possible_hits":"1",},
{"lineNum":"  468","line":"    const contents = \"\\\'a \\\\\\\'character\\\\\";","class":"lineCov","hits":"1","order":"2041","possible_hits":"1",},
{"lineNum":"  469","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2042","possible_hits":"1",},
{"lineNum":"  470","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2048","possible_hits":"3",},
{"lineNum":"  471","line":"    var tokensOrErr = getTokens(contents, &errors, std.testing.allocator);","class":"lineCov","hits":"1","order":"2043","possible_hits":"1",},
{"lineNum":"  472","line":""},
{"lineNum":"  473","line":"    try std.testing.expectError(LexerErrors.lexerError, tokensOrErr);","class":"linePartCov","hits":"1","order":"2046","possible_hits":"2",},
{"lineNum":"  474","line":"    try std.testing.expectEqual(@as(usize, errors.errors_list.items.len), 1);","class":"linePartCov","hits":"1","order":"2047","possible_hits":"2",},
{"lineNum":"  475","line":"}"},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"test \"symbol\" {","class":"lineCov","hits":"1","order":"2049","possible_hits":"1",},
{"lineNum":"  478","line":"    const contents = \"([{==<+}])\";","class":"lineCov","hits":"1","order":"2050","possible_hits":"1",},
{"lineNum":"  479","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2051","possible_hits":"1",},
{"lineNum":"  480","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2065","possible_hits":"13",},
{"lineNum":"  481","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"2052","possible_hits":"2",},
{"lineNum":"  482","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"2064","possible_hits":"12",},
{"lineNum":"  483","line":""},
{"lineNum":"  484","line":"    try std.testing.expectEqual(tokens.items.len, 10);","class":"linePartCov","hits":"1","order":"2053","possible_hits":"2",},
{"lineNum":"  485","line":"    try tokens.items[0].expectToken(.L_PAREN, \"(\", 1, 1);","class":"linePartCov","hits":"1","order":"2054","possible_hits":"2",},
{"lineNum":"  486","line":"    try tokens.items[1].expectToken(.L_SQUARE, \"[\", 2, 1);","class":"linePartCov","hits":"1","order":"2055","possible_hits":"2",},
{"lineNum":"  487","line":"    try tokens.items[2].expectToken(.L_BRACE, \"{\", 3, 1);","class":"linePartCov","hits":"1","order":"2056","possible_hits":"2",},
{"lineNum":"  488","line":"    try tokens.items[3].expectToken(.D_EQUALS, \"==\", 5, 1);","class":"linePartCov","hits":"1","order":"2057","possible_hits":"2",},
{"lineNum":"  489","line":"    try tokens.items[4].expectToken(.LSR, \"<\", 6, 1);","class":"linePartCov","hits":"1","order":"2058","possible_hits":"2",},
{"lineNum":"  490","line":"    try tokens.items[5].expectToken(.PLUS, \"+\", 7, 1);","class":"linePartCov","hits":"1","order":"2059","possible_hits":"2",},
{"lineNum":"  491","line":"    try tokens.items[6].expectToken(.R_BRACE, \"}\", 8, 1);","class":"linePartCov","hits":"1","order":"2060","possible_hits":"2",},
{"lineNum":"  492","line":"    try tokens.items[7].expectToken(.R_SQUARE, \"]\", 9, 1);","class":"linePartCov","hits":"1","order":"2061","possible_hits":"2",},
{"lineNum":"  493","line":"    try tokens.items[8].expectToken(.R_PAREN, \")\", 10, 1);","class":"linePartCov","hits":"1","order":"2062","possible_hits":"2",},
{"lineNum":"  494","line":"    try tokens.items[9].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"2063","possible_hits":"2",},
{"lineNum":"  495","line":"}"},
{"lineNum":"  496","line":""},
{"lineNum":"  497","line":"test \"comment\" {","class":"lineCov","hits":"1","order":"2066","possible_hits":"1",},
{"lineNum":"  498","line":"    const contents = \"==// This is a comment! haha\";","class":"lineCov","hits":"1","order":"2067","possible_hits":"1",},
{"lineNum":"  499","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"2068","possible_hits":"1",},
{"lineNum":"  500","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"2074","possible_hits":"5",},
{"lineNum":"  501","line":"    var tokens = try getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"2069","possible_hits":"2",},
{"lineNum":"  502","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"2073","possible_hits":"4",},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    try std.testing.expectEqual(tokens.items.len, 2);","class":"linePartCov","hits":"1","order":"2070","possible_hits":"2",},
{"lineNum":"  505","line":"    try tokens.items[0].expectToken(.D_EQUALS, \"==\", 2, 1);","class":"linePartCov","hits":"1","order":"2071","possible_hits":"2",},
{"lineNum":"  506","line":"    try tokens.items[1].expectToken(.EOF, \"EOF\", 1, 2);","class":"linePartCov","hits":"1","order":"2072","possible_hits":"2",},
{"lineNum":"  507","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 303, "covered" : 296,};
var merged_data = [];
