var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const common = @import(\"common.zig\");"},
{"lineNum":"    3","line":"const FloatStream = @import(\"FloatStream.zig\");"},
{"lineNum":"    4","line":"const isEightDigits = common.isEightDigits;"},
{"lineNum":"    5","line":"const Number = common.Number;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"/// Parse 8 digits, loaded as bytes in little-endian order."},
{"lineNum":"    8","line":"///"},
{"lineNum":"    9","line":"/// This uses the trick where every digit is in [0x030, 0x39],"},
{"lineNum":"   10","line":"/// and therefore can be parsed in 3 multiplications, much"},
{"lineNum":"   11","line":"/// faster than the normal 8."},
{"lineNum":"   12","line":"///"},
{"lineNum":"   13","line":"/// This is based off the algorithm described in \"Fast numeric string to"},
{"lineNum":"   14","line":"/// int\", available here: <https://johnnylee-sde.github.io/Fast-numeric-string-to-int/>."},
{"lineNum":"   15","line":"fn parse8Digits(v_: u64) u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   16","line":"    var v = v_;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    const mask = 0x0000_00ff_0000_00ff;"},
{"lineNum":"   18","line":"    const mul1 = 0x000f_4240_0000_0064;"},
{"lineNum":"   19","line":"    const mul2 = 0x0000_2710_0000_0001;"},
{"lineNum":"   20","line":"    v -= 0x3030_3030_3030_3030;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"    v = (v * 10) + (v >> 8); // will not overflow, fits in 63 bits","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"    const v1 = (v & mask) *% mul1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"    const v2 = ((v >> 16) & mask) *% mul2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":"    return @as(u64, @truncate(u32, (v1 +% v2) >> 32));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"/// Parse digits until a non-digit character is found."},
{"lineNum":"   28","line":"fn tryParseDigits(comptime T: type, stream: *FloatStream, x: *T, comptime base: u8) void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   29","line":"    // Try to parse 8 digits at a time, using an optimized algorithm."},
{"lineNum":"   30","line":"    // This only supports decimal digits."},
{"lineNum":"   31","line":"    if (base == 10) {"},
{"lineNum":"   32","line":"        while (stream.hasLen(8)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"            const v = stream.readU64Unchecked();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"            if (!isEightDigits(v)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   35","line":"                break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   36","line":"            }"},
{"lineNum":"   37","line":""},
{"lineNum":"   38","line":"            x.* = x.* *% 1_0000_0000 +% parse8Digits(v);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   39","line":"            stream.advance(8);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   40","line":"        }"},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    while (stream.scanDigit(base)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   44","line":"        x.* *%= base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   45","line":"        x.* +%= digit;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   46","line":"    }"},
{"lineNum":"   47","line":"}"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"fn min_n_digit_int(comptime T: type, digit_count: usize) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"    var n: T = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   51","line":"    var i: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    while (i < digit_count) : (i += 1) n *= 10;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"    return n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"}"},
{"lineNum":"   55","line":""},
{"lineNum":"   56","line":"/// Parse up to N digits"},
{"lineNum":"   57","line":"fn tryParseNDigits(comptime T: type, stream: *FloatStream, x: *T, comptime base: u8, comptime n: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   58","line":"    while (x.* < min_n_digit_int(T, n)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   59","line":"        if (stream.scanDigit(base)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   60","line":"            x.* *%= base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   61","line":"            x.* +%= digit;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   62","line":"        } else {"},
{"lineNum":"   63","line":"            break;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   64","line":"        }"},
{"lineNum":"   65","line":"    }"},
{"lineNum":"   66","line":"}"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"/// Parse the scientific notation component of a float."},
{"lineNum":"   69","line":"fn parseScientific(stream: *FloatStream) ?i64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"    var exponent: i64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   71","line":"    var negative = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   72","line":""},
{"lineNum":"   73","line":"    if (stream.first()) |c| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"        negative = c == \'-\';","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"        if (c == \'-\' or c == \'+\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"            stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"        }"},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":"    if (stream.firstIsDigit(10)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"        while (stream.scanDigit(10)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   81","line":"            // no overflows here, saturate well before overflow"},
{"lineNum":"   82","line":"            if (exponent < 0x1000_0000) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   83","line":"                exponent = 10 * exponent + digit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   84","line":"            }"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        return if (negative) -exponent else exponent;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"}"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"const ParseInfo = struct {"},
{"lineNum":"   94","line":"    // 10 or 16"},
{"lineNum":"   95","line":"    base: u8,"},
{"lineNum":"   96","line":"    // 10^19 fits in u64, 16^16 fits in u64"},
{"lineNum":"   97","line":"    max_mantissa_digits: usize,"},
{"lineNum":"   98","line":"    // e.g. e or p (E and P also checked)"},
{"lineNum":"   99","line":"    exp_char_lower: u8,"},
{"lineNum":"  100","line":"};"},
{"lineNum":"  101","line":""},
{"lineNum":"  102","line":"fn parsePartialNumberBase(comptime T: type, stream: *FloatStream, negative: bool, n: *usize, comptime info: ParseInfo) ?Number(T) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"    const MantissaT = common.mantissaType(T);"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    // parse initial digits before dot"},
{"lineNum":"  106","line":"    var mantissa: MantissaT = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"    tryParseDigits(MantissaT, stream, &mantissa, info.base);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"    var int_end = stream.offsetTrue();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"    var n_digits = @intCast(isize, stream.offsetTrue());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"    // the base being 16 implies a 0x prefix, which shouldn\'t be included in the digit count"},
{"lineNum":"  111","line":"    if (info.base == 16) n_digits -= 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"    // handle dot with the following digits"},
{"lineNum":"  114","line":"    var exponent: i64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  115","line":"    if (stream.firstIs(\'.\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"        stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  117","line":"        const marker = stream.offsetTrue();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  118","line":"        tryParseDigits(MantissaT, stream, &mantissa, info.base);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  119","line":"        const n_after_dot = stream.offsetTrue() - marker;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  120","line":"        exponent = -@intCast(i64, n_after_dot);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  121","line":"        n_digits += @intCast(isize, n_after_dot);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  122","line":"    }"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"    // adjust required shift to offset mantissa for base-16 (2^4)"},
{"lineNum":"  125","line":"    if (info.base == 16) {"},
{"lineNum":"  126","line":"        exponent *= 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"    if (n_digits == 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"    }"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    // handle scientific format"},
{"lineNum":"  134","line":"    var exp_number: i64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  135","line":"    if (stream.firstIsLower(info.exp_char_lower)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"        stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  137","line":"        exp_number = parseScientific(stream) orelse return null;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  138","line":"        exponent += exp_number;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  139","line":"    }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"    const len = stream.offset; // length must be complete parsed length","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  142","line":"    n.* = len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  143","line":""},
{"lineNum":"  144","line":"    if (stream.underscore_count > 0 and !validUnderscores(stream.slice, info.base)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  145","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  146","line":"    }"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"    // common case with not many digits"},
{"lineNum":"  149","line":"    if (n_digits <= info.max_mantissa_digits) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  150","line":"        return Number(T){","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  151","line":"            .exponent = exponent,"},
{"lineNum":"  152","line":"            .mantissa = mantissa,"},
{"lineNum":"  153","line":"            .negative = negative,"},
{"lineNum":"  154","line":"            .many_digits = false,"},
{"lineNum":"  155","line":"            .hex = info.base == 16,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  156","line":"        };"},
{"lineNum":"  157","line":"    }"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    n_digits -= info.max_mantissa_digits;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  160","line":"    var many_digits = false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  161","line":"    stream.reset(); // re-parse from beginning","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  162","line":"    while (stream.firstIs3(\'0\', \'.\', \'_\')) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"        // \'0\' = \'.\' + 2"},
{"lineNum":"  164","line":"        const next = stream.firstUnchecked();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"        if (next != \'_\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":"            n_digits -= @intCast(isize, next -| (\'0\' - 1));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  167","line":"        } else {"},
{"lineNum":"  168","line":"            stream.underscore_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  169","line":"        }"},
{"lineNum":"  170","line":"        stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":"    if (n_digits > 0) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":"        // at this point we have more than max_mantissa_digits significant digits, let\'s try again"},
{"lineNum":"  174","line":"        many_digits = true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  175","line":"        mantissa = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  176","line":"        stream.reset();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  177","line":"        tryParseNDigits(MantissaT, stream, &mantissa, info.base, info.max_mantissa_digits);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"        exponent = blk: {"},
{"lineNum":"  180","line":"            if (mantissa >= min_n_digit_int(MantissaT, info.max_mantissa_digits)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  181","line":"                // big int"},
{"lineNum":"  182","line":"                break :blk @intCast(i64, int_end) - @intCast(i64, stream.offsetTrue());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  183","line":"            } else {"},
{"lineNum":"  184","line":"                // the next byte must be present and be \'.\'"},
{"lineNum":"  185","line":"                // We know this is true because we had more than 19"},
{"lineNum":"  186","line":"                // digits previously, so we overflowed a 64-bit integer,"},
{"lineNum":"  187","line":"                // but parsing only the integral digits produced less"},
{"lineNum":"  188","line":"                // than 19 digits. That means we must have a decimal"},
{"lineNum":"  189","line":"                // point, and at least 1 fractional digit."},
{"lineNum":"  190","line":"                stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"                var marker = stream.offsetTrue();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  192","line":"                tryParseNDigits(MantissaT, stream, &mantissa, info.base, info.max_mantissa_digits);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"                break :blk @intCast(i64, marker) - @intCast(i64, stream.offsetTrue());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  194","line":"            }"},
{"lineNum":"  195","line":"        };"},
{"lineNum":"  196","line":"        // add back the explicit part"},
{"lineNum":"  197","line":"        exponent += exp_number;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  198","line":"    }"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    return Number(T){","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  201","line":"        .exponent = exponent,"},
{"lineNum":"  202","line":"        .mantissa = mantissa,"},
{"lineNum":"  203","line":"        .negative = negative,"},
{"lineNum":"  204","line":"        .many_digits = many_digits,"},
{"lineNum":"  205","line":"        .hex = info.base == 16,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  206","line":"    };"},
{"lineNum":"  207","line":"}"},
{"lineNum":"  208","line":""},
{"lineNum":"  209","line":"/// Parse a partial, non-special floating point number."},
{"lineNum":"  210","line":"///"},
{"lineNum":"  211","line":"/// This creates a representation of the float as the"},
{"lineNum":"  212","line":"/// significant digits and the decimal exponent."},
{"lineNum":"  213","line":"fn parsePartialNumber(comptime T: type, s: []const u8, negative: bool, n: *usize) ?Number(T) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"    std.debug.assert(s.len != 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"    var stream = FloatStream.init(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  216","line":"    const MantissaT = common.mantissaType(T);"},
{"lineNum":"  217","line":""},
{"lineNum":"  218","line":"    if (stream.hasLen(2) and stream.atUnchecked(0) == \'0\' and std.ascii.toLower(stream.atUnchecked(1)) == \'x\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"        stream.advance(2);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  220","line":"        return parsePartialNumberBase(T, &stream, negative, n, .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  221","line":"            .base = 16,"},
{"lineNum":"  222","line":"            .max_mantissa_digits = if (MantissaT == u64) 16 else 32,"},
{"lineNum":"  223","line":"            .exp_char_lower = \'p\',"},
{"lineNum":"  224","line":"        });"},
{"lineNum":"  225","line":"    } else {"},
{"lineNum":"  226","line":"        return parsePartialNumberBase(T, &stream, negative, n, .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"            .base = 10,"},
{"lineNum":"  228","line":"            .max_mantissa_digits = if (MantissaT == u64) 19 else 38,"},
{"lineNum":"  229","line":"            .exp_char_lower = \'e\',"},
{"lineNum":"  230","line":"        });"},
{"lineNum":"  231","line":"    }"},
{"lineNum":"  232","line":"}"},
{"lineNum":"  233","line":""},
{"lineNum":"  234","line":"pub fn parseNumber(comptime T: type, s: []const u8, negative: bool) ?Number(T) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"    var consumed: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  236","line":"    if (parsePartialNumber(T, s, negative, &consumed)) |number| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  237","line":"        // must consume entire float (no trailing data)"},
{"lineNum":"  238","line":"        if (s.len == consumed) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"            return number;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  240","line":"        }"},
{"lineNum":"  241","line":"    }"},
{"lineNum":"  242","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":"}"},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"fn parsePartialInfOrNan(comptime T: type, s: []const u8, negative: bool, n: *usize) ?T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"    // inf/infinity; infxxx should only consume inf."},
{"lineNum":"  247","line":"    if (std.ascii.startsWithIgnoreCase(s, \"inf\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  248","line":"        n.* = 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  249","line":"        if (std.ascii.startsWithIgnoreCase(s[3..], \"inity\")) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  250","line":"            n.* = 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        return if (!negative) std.math.inf(T) else -std.math.inf(T);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"    if (std.ascii.startsWithIgnoreCase(s, \"nan\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  257","line":"        n.* = 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  258","line":"        return std.math.nan(T);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"    }"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"}"},
{"lineNum":"  263","line":""},
{"lineNum":"  264","line":"pub fn parseInfOrNan(comptime T: type, s: []const u8, negative: bool) ?T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"    var consumed: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"    if (parsePartialInfOrNan(T, s, negative, &consumed)) |special| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  267","line":"        if (s.len == consumed) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  268","line":"            return special;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"        }"},
{"lineNum":"  270","line":"    }"},
{"lineNum":"  271","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  272","line":"}"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"pub fn validUnderscores(s: []const u8, comptime base: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  275","line":"    var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  276","line":"    while (i < s.len) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  277","line":"        if (s[i] == \'_\') {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  278","line":"            // underscore at start of end"},
{"lineNum":"  279","line":"            if (i == 0 or i + 1 == s.len) {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  280","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  281","line":"            }"},
{"lineNum":"  282","line":"            // consecutive underscores"},
{"lineNum":"  283","line":"            if (!common.isDigit(s[i - 1], base) or !common.isDigit(s[i + 1], base)) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  284","line":"                return false;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  285","line":"            }"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"            // next is guaranteed a digit, skip an extra"},
{"lineNum":"  288","line":"            i += 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  289","line":"        }"},
{"lineNum":"  290","line":"    }"},
{"lineNum":"  291","line":""},
{"lineNum":"  292","line":"    return true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 132, "covered" : 0,};
var merged_data = [];
