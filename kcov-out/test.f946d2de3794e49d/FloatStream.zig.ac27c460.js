var data = {lines:[
{"lineNum":"    1","line":"//! A wrapper over a byte-slice, providing useful methods for parsing string floating point values."},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"const std = @import(\"std\");"},
{"lineNum":"    4","line":"const FloatStream = @This();"},
{"lineNum":"    5","line":"const common = @import(\"common.zig\");"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"slice: []const u8,"},
{"lineNum":"    8","line":"offset: usize,"},
{"lineNum":"    9","line":"underscore_count: usize,"},
{"lineNum":"   10","line":""},
{"lineNum":"   11","line":"pub fn init(s: []const u8) FloatStream {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   12","line":"    return .{ .slice = s, .offset = 0, .underscore_count = 0 };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   13","line":"}"},
{"lineNum":"   14","line":""},
{"lineNum":"   15","line":"// Returns the offset from the start *excluding* any underscores that were found."},
{"lineNum":"   16","line":"pub fn offsetTrue(self: FloatStream) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   17","line":"    return self.offset - self.underscore_count;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   18","line":"}"},
{"lineNum":"   19","line":""},
{"lineNum":"   20","line":"pub fn reset(self: *FloatStream) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   21","line":"    self.offset = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   22","line":"    self.underscore_count = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   23","line":"}"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"pub fn len(self: FloatStream) usize {"},
{"lineNum":"   26","line":"    if (self.offset > self.slice.len) {"},
{"lineNum":"   27","line":"        return 0;"},
{"lineNum":"   28","line":"    }"},
{"lineNum":"   29","line":"    return self.slice.len - self.offset;"},
{"lineNum":"   30","line":"}"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"pub fn hasLen(self: FloatStream, n: usize) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"    return self.offset + n <= self.slice.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   34","line":"}"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"pub fn firstUnchecked(self: FloatStream) u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   37","line":"    return self.slice[self.offset];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   38","line":"}"},
{"lineNum":"   39","line":""},
{"lineNum":"   40","line":"pub fn first(self: FloatStream) ?u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   41","line":"    return if (self.hasLen(1))","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   42","line":"        return self.firstUnchecked()","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    else"},
{"lineNum":"   44","line":"        null;"},
{"lineNum":"   45","line":"}"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"pub fn isEmpty(self: FloatStream) bool {"},
{"lineNum":"   48","line":"    return !self.hasLen(1);"},
{"lineNum":"   49","line":"}"},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"pub fn firstIs(self: FloatStream, c: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   52","line":"    if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   53","line":"        return ok == c;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"    }"},
{"lineNum":"   55","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"}"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"pub fn firstIsLower(self: FloatStream, c: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"    if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   60","line":"        return ok | 0x20 == c;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   63","line":"}"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"pub fn firstIs2(self: FloatStream, c1: u8, c2: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"    if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"        return ok == c1 or ok == c2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"    }"},
{"lineNum":"   69","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   70","line":"}"},
{"lineNum":"   71","line":""},
{"lineNum":"   72","line":"pub fn firstIs3(self: FloatStream, c1: u8, c2: u8, c3: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   73","line":"    if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   74","line":"        return ok == c1 or ok == c2 or ok == c3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"    }"},
{"lineNum":"   76","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"}"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"pub fn firstIsDigit(self: FloatStream, comptime base: u8) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"    comptime std.debug.assert(base == 10 or base == 16);"},
{"lineNum":"   81","line":""},
{"lineNum":"   82","line":"    if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"        return common.isDigit(ok, base);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"    }"},
{"lineNum":"   85","line":"    return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"}"},
{"lineNum":"   87","line":""},
{"lineNum":"   88","line":"pub fn advance(self: *FloatStream, n: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"    self.offset += n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"}"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"pub fn skipChars(self: *FloatStream, c: u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"    while (self.firstIs(c)) : (self.advance(1)) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"pub fn skipChars2(self: *FloatStream, c1: u8, c2: u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"    while (self.firstIs2(c1, c2)) : (self.advance(1)) {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"pub fn readU64Unchecked(self: FloatStream) u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"    return std.mem.readIntSliceLittle(u64, self.slice[self.offset..]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"}"},
{"lineNum":"  103","line":""},
{"lineNum":"  104","line":"pub fn readU64(self: FloatStream) ?u64 {"},
{"lineNum":"  105","line":"    if (self.hasLen(8)) {"},
{"lineNum":"  106","line":"        return self.readU64Unchecked();"},
{"lineNum":"  107","line":"    }"},
{"lineNum":"  108","line":"    return null;"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"pub fn atUnchecked(self: *FloatStream, i: usize) u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"    return self.slice[self.offset + i];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"pub fn scanDigit(self: *FloatStream, comptime base: u8) ?u8 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  116","line":"    comptime std.debug.assert(base == 10 or base == 16);"},
{"lineNum":"  117","line":""},
{"lineNum":"  118","line":"    retry: while (true) {"},
{"lineNum":"  119","line":"        if (self.first()) |ok| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  120","line":"            if (\'0\' <= ok and ok <= \'9\') {","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  121","line":"                self.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  122","line":"                return ok - \'0\';","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  123","line":"            } else if (base == 16 and \'a\' <= ok and ok <= \'f\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  124","line":"                self.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                return ok - \'a\' + 10;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  126","line":"            } else if (base == 16 and \'A\' <= ok and ok <= \'F\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"                self.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  128","line":"                return ok - \'A\' + 10;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  129","line":"            } else if (ok == \'_\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  130","line":"                self.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                self.underscore_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  132","line":"                continue :retry;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  133","line":"            }"},
{"lineNum":"  134","line":"        }"},
{"lineNum":"  135","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  136","line":"    }"},
{"lineNum":"  137","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 60, "covered" : 0,};
var merged_data = [];
