var data = {lines:[
{"lineNum":"    1","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    2","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    3","line":"const debug = std.debug;"},
{"lineNum":"    4","line":"const fs = std.fs;"},
{"lineNum":"    5","line":"const io = std.io;"},
{"lineNum":"    6","line":"const mem = std.mem;"},
{"lineNum":"    7","line":"const math = std.math;"},
{"lineNum":"    8","line":"const leb = @import(\"leb128.zig\");"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"pub const TAG = @import(\"dwarf/TAG.zig\");"},
{"lineNum":"   11","line":"pub const AT = @import(\"dwarf/AT.zig\");"},
{"lineNum":"   12","line":"pub const OP = @import(\"dwarf/OP.zig\");"},
{"lineNum":"   13","line":"pub const LANG = @import(\"dwarf/LANG.zig\");"},
{"lineNum":"   14","line":"pub const FORM = @import(\"dwarf/FORM.zig\");"},
{"lineNum":"   15","line":"pub const ATE = @import(\"dwarf/ATE.zig\");"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"pub const LLE = struct {"},
{"lineNum":"   18","line":"    pub const end_of_list = 0x00;"},
{"lineNum":"   19","line":"    pub const base_addressx = 0x01;"},
{"lineNum":"   20","line":"    pub const startx_endx = 0x02;"},
{"lineNum":"   21","line":"    pub const startx_length = 0x03;"},
{"lineNum":"   22","line":"    pub const offset_pair = 0x04;"},
{"lineNum":"   23","line":"    pub const default_location = 0x05;"},
{"lineNum":"   24","line":"    pub const base_address = 0x06;"},
{"lineNum":"   25","line":"    pub const start_end = 0x07;"},
{"lineNum":"   26","line":"    pub const start_length = 0x08;"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"pub const CFA = struct {"},
{"lineNum":"   30","line":"    pub const advance_loc = 0x40;"},
{"lineNum":"   31","line":"    pub const offset = 0x80;"},
{"lineNum":"   32","line":"    pub const restore = 0xc0;"},
{"lineNum":"   33","line":"    pub const nop = 0x00;"},
{"lineNum":"   34","line":"    pub const set_loc = 0x01;"},
{"lineNum":"   35","line":"    pub const advance_loc1 = 0x02;"},
{"lineNum":"   36","line":"    pub const advance_loc2 = 0x03;"},
{"lineNum":"   37","line":"    pub const advance_loc4 = 0x04;"},
{"lineNum":"   38","line":"    pub const offset_extended = 0x05;"},
{"lineNum":"   39","line":"    pub const restore_extended = 0x06;"},
{"lineNum":"   40","line":"    pub const @\"undefined\" = 0x07;"},
{"lineNum":"   41","line":"    pub const same_value = 0x08;"},
{"lineNum":"   42","line":"    pub const register = 0x09;"},
{"lineNum":"   43","line":"    pub const remember_state = 0x0a;"},
{"lineNum":"   44","line":"    pub const restore_state = 0x0b;"},
{"lineNum":"   45","line":"    pub const def_cfa = 0x0c;"},
{"lineNum":"   46","line":"    pub const def_cfa_register = 0x0d;"},
{"lineNum":"   47","line":"    pub const def_cfa_offset = 0x0e;"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    // DWARF 3."},
{"lineNum":"   50","line":"    pub const def_cfa_expression = 0x0f;"},
{"lineNum":"   51","line":"    pub const expression = 0x10;"},
{"lineNum":"   52","line":"    pub const offset_extended_sf = 0x11;"},
{"lineNum":"   53","line":"    pub const def_cfa_sf = 0x12;"},
{"lineNum":"   54","line":"    pub const def_cfa_offset_sf = 0x13;"},
{"lineNum":"   55","line":"    pub const val_offset = 0x14;"},
{"lineNum":"   56","line":"    pub const val_offset_sf = 0x15;"},
{"lineNum":"   57","line":"    pub const val_expression = 0x16;"},
{"lineNum":"   58","line":""},
{"lineNum":"   59","line":"    pub const lo_user = 0x1c;"},
{"lineNum":"   60","line":"    pub const hi_user = 0x3f;"},
{"lineNum":"   61","line":""},
{"lineNum":"   62","line":"    // SGI/MIPS specific."},
{"lineNum":"   63","line":"    pub const MIPS_advance_loc8 = 0x1d;"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    // GNU extensions."},
{"lineNum":"   66","line":"    pub const GNU_window_save = 0x2d;"},
{"lineNum":"   67","line":"    pub const GNU_args_size = 0x2e;"},
{"lineNum":"   68","line":"    pub const GNU_negative_offset_extended = 0x2f;"},
{"lineNum":"   69","line":"};"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"pub const CHILDREN = struct {"},
{"lineNum":"   72","line":"    pub const no = 0x00;"},
{"lineNum":"   73","line":"    pub const yes = 0x01;"},
{"lineNum":"   74","line":"};"},
{"lineNum":"   75","line":""},
{"lineNum":"   76","line":"pub const LNS = struct {"},
{"lineNum":"   77","line":"    pub const extended_op = 0x00;"},
{"lineNum":"   78","line":"    pub const copy = 0x01;"},
{"lineNum":"   79","line":"    pub const advance_pc = 0x02;"},
{"lineNum":"   80","line":"    pub const advance_line = 0x03;"},
{"lineNum":"   81","line":"    pub const set_file = 0x04;"},
{"lineNum":"   82","line":"    pub const set_column = 0x05;"},
{"lineNum":"   83","line":"    pub const negate_stmt = 0x06;"},
{"lineNum":"   84","line":"    pub const set_basic_block = 0x07;"},
{"lineNum":"   85","line":"    pub const const_add_pc = 0x08;"},
{"lineNum":"   86","line":"    pub const fixed_advance_pc = 0x09;"},
{"lineNum":"   87","line":"    pub const set_prologue_end = 0x0a;"},
{"lineNum":"   88","line":"    pub const set_epilogue_begin = 0x0b;"},
{"lineNum":"   89","line":"    pub const set_isa = 0x0c;"},
{"lineNum":"   90","line":"};"},
{"lineNum":"   91","line":""},
{"lineNum":"   92","line":"pub const LNE = struct {"},
{"lineNum":"   93","line":"    pub const end_sequence = 0x01;"},
{"lineNum":"   94","line":"    pub const set_address = 0x02;"},
{"lineNum":"   95","line":"    pub const define_file = 0x03;"},
{"lineNum":"   96","line":"    pub const set_discriminator = 0x04;"},
{"lineNum":"   97","line":"    pub const lo_user = 0x80;"},
{"lineNum":"   98","line":"    pub const hi_user = 0xff;"},
{"lineNum":"   99","line":"};"},
{"lineNum":"  100","line":""},
{"lineNum":"  101","line":"pub const UT = struct {"},
{"lineNum":"  102","line":"    pub const compile = 0x01;"},
{"lineNum":"  103","line":"    pub const @\"type\" = 0x02;"},
{"lineNum":"  104","line":"    pub const partial = 0x03;"},
{"lineNum":"  105","line":"    pub const skeleton = 0x04;"},
{"lineNum":"  106","line":"    pub const split_compile = 0x05;"},
{"lineNum":"  107","line":"    pub const split_type = 0x06;"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    pub const lo_user = 0x80;"},
{"lineNum":"  110","line":"    pub const hi_user = 0xff;"},
{"lineNum":"  111","line":"};"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"pub const LNCT = struct {"},
{"lineNum":"  114","line":"    pub const path = 0x1;"},
{"lineNum":"  115","line":"    pub const directory_index = 0x2;"},
{"lineNum":"  116","line":"    pub const timestamp = 0x3;"},
{"lineNum":"  117","line":"    pub const size = 0x4;"},
{"lineNum":"  118","line":"    pub const MD5 = 0x5;"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    pub const lo_user = 0x2000;"},
{"lineNum":"  121","line":"    pub const hi_user = 0x3fff;"},
{"lineNum":"  122","line":"};"},
{"lineNum":"  123","line":""},
{"lineNum":"  124","line":"pub const RLE = struct {"},
{"lineNum":"  125","line":"    pub const end_of_list = 0x00;"},
{"lineNum":"  126","line":"    pub const base_addressx = 0x01;"},
{"lineNum":"  127","line":"    pub const startx_endx = 0x02;"},
{"lineNum":"  128","line":"    pub const startx_length = 0x03;"},
{"lineNum":"  129","line":"    pub const offset_pair = 0x04;"},
{"lineNum":"  130","line":"    pub const base_address = 0x05;"},
{"lineNum":"  131","line":"    pub const start_end = 0x06;"},
{"lineNum":"  132","line":"    pub const start_length = 0x07;"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"pub const CC = enum(u8) {"},
{"lineNum":"  136","line":"    normal = 0x1,"},
{"lineNum":"  137","line":"    program = 0x2,"},
{"lineNum":"  138","line":"    nocall = 0x3,"},
{"lineNum":"  139","line":""},
{"lineNum":"  140","line":"    pass_by_reference = 0x4,"},
{"lineNum":"  141","line":"    pass_by_value = 0x5,"},
{"lineNum":"  142","line":""},
{"lineNum":"  143","line":"    lo_user = 0x40,"},
{"lineNum":"  144","line":"    hi_user = 0xff,"},
{"lineNum":"  145","line":""},
{"lineNum":"  146","line":"    GNU_renesas_sh = 0x40,"},
{"lineNum":"  147","line":"    GNU_borland_fastcall_i386 = 0x41,"},
{"lineNum":"  148","line":"};"},
{"lineNum":"  149","line":""},
{"lineNum":"  150","line":"const PcRange = struct {"},
{"lineNum":"  151","line":"    start: u64,"},
{"lineNum":"  152","line":"    end: u64,"},
{"lineNum":"  153","line":"};"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"const Func = struct {"},
{"lineNum":"  156","line":"    pc_range: ?PcRange,"},
{"lineNum":"  157","line":"    name: ?[]const u8,"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"    fn deinit(func: *Func, allocator: mem.Allocator) void {"},
{"lineNum":"  160","line":"        if (func.name) |name| {"},
{"lineNum":"  161","line":"            allocator.free(name);"},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":"};"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"const CompileUnit = struct {"},
{"lineNum":"  167","line":"    version: u16,"},
{"lineNum":"  168","line":"    is_64: bool,"},
{"lineNum":"  169","line":"    die: *Die,"},
{"lineNum":"  170","line":"    pc_range: ?PcRange,"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"    str_offsets_base: usize,"},
{"lineNum":"  173","line":"    addr_base: usize,"},
{"lineNum":"  174","line":"    rnglists_base: usize,"},
{"lineNum":"  175","line":"    loclists_base: usize,"},
{"lineNum":"  176","line":"};"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"const AbbrevTable = std.ArrayList(AbbrevTableEntry);"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"const AbbrevTableHeader = struct {"},
{"lineNum":"  181","line":"    // offset from .debug_abbrev"},
{"lineNum":"  182","line":"    offset: u64,"},
{"lineNum":"  183","line":"    table: AbbrevTable,"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"    fn deinit(header: *AbbrevTableHeader) void {"},
{"lineNum":"  186","line":"        for (header.table.items) |*entry| {"},
{"lineNum":"  187","line":"            entry.deinit();"},
{"lineNum":"  188","line":"        }"},
{"lineNum":"  189","line":"        header.table.deinit();"},
{"lineNum":"  190","line":"    }"},
{"lineNum":"  191","line":"};"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"const AbbrevTableEntry = struct {"},
{"lineNum":"  194","line":"    has_children: bool,"},
{"lineNum":"  195","line":"    abbrev_code: u64,"},
{"lineNum":"  196","line":"    tag_id: u64,"},
{"lineNum":"  197","line":"    attrs: std.ArrayList(AbbrevAttr),"},
{"lineNum":"  198","line":""},
{"lineNum":"  199","line":"    fn deinit(entry: *AbbrevTableEntry) void {"},
{"lineNum":"  200","line":"        entry.attrs.deinit();"},
{"lineNum":"  201","line":"    }"},
{"lineNum":"  202","line":"};"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"const AbbrevAttr = struct {"},
{"lineNum":"  205","line":"    attr_id: u64,"},
{"lineNum":"  206","line":"    form_id: u64,"},
{"lineNum":"  207","line":"    /// Only valid if form_id is .implicit_const"},
{"lineNum":"  208","line":"    payload: i64,"},
{"lineNum":"  209","line":"};"},
{"lineNum":"  210","line":""},
{"lineNum":"  211","line":"const FormValue = union(enum) {"},
{"lineNum":"  212","line":"    Address: u64,"},
{"lineNum":"  213","line":"    AddrOffset: usize,"},
{"lineNum":"  214","line":"    Block: []u8,"},
{"lineNum":"  215","line":"    Const: Constant,"},
{"lineNum":"  216","line":"    ExprLoc: []u8,"},
{"lineNum":"  217","line":"    Flag: bool,"},
{"lineNum":"  218","line":"    SecOffset: u64,"},
{"lineNum":"  219","line":"    Ref: u64,"},
{"lineNum":"  220","line":"    RefAddr: u64,"},
{"lineNum":"  221","line":"    String: []const u8,"},
{"lineNum":"  222","line":"    StrPtr: u64,"},
{"lineNum":"  223","line":"    StrOffset: usize,"},
{"lineNum":"  224","line":"    LineStrPtr: u64,"},
{"lineNum":"  225","line":"    LocListOffset: u64,"},
{"lineNum":"  226","line":"    RangeListOffset: u64,"},
{"lineNum":"  227","line":"    data16: [16]u8,"},
{"lineNum":"  228","line":""},
{"lineNum":"  229","line":"    fn getString(fv: FormValue, di: DwarfInfo) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  230","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  231","line":"            .String => |s| return s,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"            .StrPtr => |off| return di.getString(off),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"            .LineStrPtr => |off| return di.getLineString(off),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  234","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  235","line":"        }"},
{"lineNum":"  236","line":"    }"},
{"lineNum":"  237","line":""},
{"lineNum":"  238","line":"    fn getUInt(fv: FormValue, comptime U: type) !U {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  239","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  240","line":"            .Const => |c| {"},
{"lineNum":"  241","line":"                const int = try c.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  242","line":"                return math.cast(U, int) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  243","line":"            },"},
{"lineNum":"  244","line":"            .SecOffset => |x| return math.cast(U, x) orelse return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  245","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  246","line":"        }"},
{"lineNum":"  247","line":"    }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"    fn getData16(fv: FormValue) ![16]u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"        switch (fv) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  251","line":"            .data16 => |d| return d,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"        }"},
{"lineNum":"  254","line":"    }"},
{"lineNum":"  255","line":"};"},
{"lineNum":"  256","line":""},
{"lineNum":"  257","line":"const Constant = struct {"},
{"lineNum":"  258","line":"    payload: u64,"},
{"lineNum":"  259","line":"    signed: bool,"},
{"lineNum":"  260","line":""},
{"lineNum":"  261","line":"    fn asUnsignedLe(self: Constant) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"        if (self.signed) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  263","line":"        return self.payload;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"    }"},
{"lineNum":"  265","line":"};"},
{"lineNum":"  266","line":""},
{"lineNum":"  267","line":"const Die = struct {"},
{"lineNum":"  268","line":"    // Arena for Die\'s Attr\'s and FormValue\'s."},
{"lineNum":"  269","line":"    arena: std.heap.ArenaAllocator,"},
{"lineNum":"  270","line":"    tag_id: u64,"},
{"lineNum":"  271","line":"    has_children: bool,"},
{"lineNum":"  272","line":"    attrs: std.ArrayListUnmanaged(Attr) = .{},"},
{"lineNum":"  273","line":""},
{"lineNum":"  274","line":"    const Attr = struct {"},
{"lineNum":"  275","line":"        id: u64,"},
{"lineNum":"  276","line":"        value: FormValue,"},
{"lineNum":"  277","line":"    };"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    fn deinit(self: *Die, allocator: mem.Allocator) void {"},
{"lineNum":"  280","line":"        self.arena.deinit();"},
{"lineNum":"  281","line":"        self.attrs.deinit(allocator);"},
{"lineNum":"  282","line":"    }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"    fn getAttr(self: *const Die, id: u64) ?*const FormValue {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"        for (self.attrs.items) |*attr| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"            if (attr.id == id) return &attr.value;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  287","line":"        }"},
{"lineNum":"  288","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"    }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    fn getAttrAddr("},
{"lineNum":"  292","line":"        self: *const Die,"},
{"lineNum":"  293","line":"        di: *DwarfInfo,"},
{"lineNum":"  294","line":"        id: u64,"},
{"lineNum":"  295","line":"        compile_unit: CompileUnit,"},
{"lineNum":"  296","line":"    ) error{ InvalidDebugInfo, MissingDebugInfo }!u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"        return switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  299","line":"            FormValue.Address => |value| value,"},
{"lineNum":"  300","line":"            FormValue.AddrOffset => |index| {"},
{"lineNum":"  301","line":"                const debug_addr = di.debug_addr orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"                // addr_base points to the first item after the header, however we"},
{"lineNum":"  303","line":"                // need to read the header to know the size of each item. Empirically,"},
{"lineNum":"  304","line":"                // it may disagree with is_64 on the compile unit."},
{"lineNum":"  305","line":"                // The header is 8 or 12 bytes depending on is_64."},
{"lineNum":"  306","line":"                if (compile_unit.addr_base < 8) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":""},
{"lineNum":"  308","line":"                const version = mem.readInt(u16, debug_addr[compile_unit.addr_base - 4 ..][0..2], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  309","line":"                if (version != 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  310","line":""},
{"lineNum":"  311","line":"                const addr_size = debug_addr[compile_unit.addr_base - 2];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"                const seg_size = debug_addr[compile_unit.addr_base - 1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":""},
{"lineNum":"  314","line":"                const byte_offset = compile_unit.addr_base + (addr_size + seg_size) * index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"                if (byte_offset + addr_size > debug_addr.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  316","line":"                switch (addr_size) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"                    1 => return debug_addr[byte_offset],","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"                    2 => return mem.readInt(u16, debug_addr[byte_offset..][0..2], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"                    4 => return mem.readInt(u32, debug_addr[byte_offset..][0..4], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"                    8 => return mem.readInt(u64, debug_addr[byte_offset..][0..8], di.endian),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  321","line":"                    else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  322","line":"                }"},
{"lineNum":"  323","line":"            },"},
{"lineNum":"  324","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  325","line":"        };"},
{"lineNum":"  326","line":"    }"},
{"lineNum":"  327","line":""},
{"lineNum":"  328","line":"    fn getAttrSecOffset(self: *const Die, id: u64) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  330","line":"        return form_value.getUInt(u64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  331","line":"    }"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    fn getAttrUnsignedLe(self: *const Die, id: u64) !u64 {"},
{"lineNum":"  334","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;"},
{"lineNum":"  335","line":"        return switch (form_value.*) {"},
{"lineNum":"  336","line":"            FormValue.Const => |value| value.asUnsignedLe(),"},
{"lineNum":"  337","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  338","line":"        };"},
{"lineNum":"  339","line":"    }"},
{"lineNum":"  340","line":""},
{"lineNum":"  341","line":"    fn getAttrRef(self: *const Die, id: u64) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  342","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":"        return switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  344","line":"            FormValue.Ref => |value| value,"},
{"lineNum":"  345","line":"            else => error.InvalidDebugInfo,"},
{"lineNum":"  346","line":"        };"},
{"lineNum":"  347","line":"    }"},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"    pub fn getAttrString("},
{"lineNum":"  350","line":"        self: *const Die,"},
{"lineNum":"  351","line":"        di: *DwarfInfo,"},
{"lineNum":"  352","line":"        id: u64,"},
{"lineNum":"  353","line":"        opt_str: ?[]const u8,"},
{"lineNum":"  354","line":"        compile_unit: CompileUnit,"},
{"lineNum":"  355","line":"    ) error{ InvalidDebugInfo, MissingDebugInfo }![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  356","line":"        const form_value = self.getAttr(id) orelse return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"        switch (form_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  358","line":"            FormValue.String => |value| return value,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"            FormValue.StrPtr => |offset| return di.getString(offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  360","line":"            FormValue.StrOffset => |index| {"},
{"lineNum":"  361","line":"                const debug_str_offsets = di.debug_str_offsets orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  362","line":"                if (compile_unit.str_offsets_base == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  363","line":"                if (compile_unit.is_64) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"                    const byte_offset = compile_unit.str_offsets_base + 8 * index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  365","line":"                    if (byte_offset + 8 > debug_str_offsets.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  366","line":"                    const offset = mem.readInt(u64, debug_str_offsets[byte_offset..][0..8], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":"                    return getStringGeneric(opt_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  368","line":"                } else {"},
{"lineNum":"  369","line":"                    const byte_offset = compile_unit.str_offsets_base + 4 * index;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  370","line":"                    if (byte_offset + 4 > debug_str_offsets.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  371","line":"                    const offset = mem.readInt(u32, debug_str_offsets[byte_offset..][0..4], di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"                    return getStringGeneric(opt_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  373","line":"                }"},
{"lineNum":"  374","line":"            },"},
{"lineNum":"  375","line":"            FormValue.LineStrPtr => |offset| return di.getLineString(offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  376","line":"            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  377","line":"        }"},
{"lineNum":"  378","line":"    }"},
{"lineNum":"  379","line":"};"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"const FileEntry = struct {"},
{"lineNum":"  382","line":"    path: []const u8,"},
{"lineNum":"  383","line":"    dir_index: u32 = 0,"},
{"lineNum":"  384","line":"    mtime: u64 = 0,"},
{"lineNum":"  385","line":"    size: u64 = 0,"},
{"lineNum":"  386","line":"    md5: [16]u8 = [1]u8{0} ** 16,"},
{"lineNum":"  387","line":"};"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"const LineNumberProgram = struct {"},
{"lineNum":"  390","line":"    address: u64,"},
{"lineNum":"  391","line":"    file: usize,"},
{"lineNum":"  392","line":"    line: i64,"},
{"lineNum":"  393","line":"    column: u64,"},
{"lineNum":"  394","line":"    version: u16,"},
{"lineNum":"  395","line":"    is_stmt: bool,"},
{"lineNum":"  396","line":"    basic_block: bool,"},
{"lineNum":"  397","line":"    end_sequence: bool,"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    default_is_stmt: bool,"},
{"lineNum":"  400","line":"    target_address: u64,"},
{"lineNum":"  401","line":"    include_dirs: []const FileEntry,"},
{"lineNum":"  402","line":""},
{"lineNum":"  403","line":"    prev_valid: bool,"},
{"lineNum":"  404","line":"    prev_address: u64,"},
{"lineNum":"  405","line":"    prev_file: usize,"},
{"lineNum":"  406","line":"    prev_line: i64,"},
{"lineNum":"  407","line":"    prev_column: u64,"},
{"lineNum":"  408","line":"    prev_is_stmt: bool,"},
{"lineNum":"  409","line":"    prev_basic_block: bool,"},
{"lineNum":"  410","line":"    prev_end_sequence: bool,"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    // Reset the state machine following the DWARF specification"},
{"lineNum":"  413","line":"    pub fn reset(self: *LineNumberProgram) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"        self.address = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  415","line":"        self.file = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  416","line":"        self.line = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"        self.column = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  418","line":"        self.is_stmt = self.default_is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  419","line":"        self.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"        self.end_sequence = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"        // Invalidate all the remaining fields"},
{"lineNum":"  422","line":"        self.prev_valid = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  423","line":"        self.prev_address = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  424","line":"        self.prev_file = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  425","line":"        self.prev_line = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  426","line":"        self.prev_column = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  427","line":"        self.prev_is_stmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  428","line":"        self.prev_basic_block = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  429","line":"        self.prev_end_sequence = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":""},
{"lineNum":"  432","line":"    pub fn init("},
{"lineNum":"  433","line":"        is_stmt: bool,"},
{"lineNum":"  434","line":"        include_dirs: []const FileEntry,"},
{"lineNum":"  435","line":"        target_address: u64,"},
{"lineNum":"  436","line":"        version: u16,"},
{"lineNum":"  437","line":"    ) LineNumberProgram {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  438","line":"        return LineNumberProgram{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  439","line":"            .address = 0,"},
{"lineNum":"  440","line":"            .file = 1,"},
{"lineNum":"  441","line":"            .line = 1,"},
{"lineNum":"  442","line":"            .column = 0,"},
{"lineNum":"  443","line":"            .version = version,"},
{"lineNum":"  444","line":"            .is_stmt = is_stmt,"},
{"lineNum":"  445","line":"            .basic_block = false,"},
{"lineNum":"  446","line":"            .end_sequence = false,"},
{"lineNum":"  447","line":"            .include_dirs = include_dirs,"},
{"lineNum":"  448","line":"            .default_is_stmt = is_stmt,"},
{"lineNum":"  449","line":"            .target_address = target_address,"},
{"lineNum":"  450","line":"            .prev_valid = false,"},
{"lineNum":"  451","line":"            .prev_address = 0,"},
{"lineNum":"  452","line":"            .prev_file = undefined,"},
{"lineNum":"  453","line":"            .prev_line = undefined,"},
{"lineNum":"  454","line":"            .prev_column = undefined,"},
{"lineNum":"  455","line":"            .prev_is_stmt = undefined,"},
{"lineNum":"  456","line":"            .prev_basic_block = undefined,"},
{"lineNum":"  457","line":"            .prev_end_sequence = undefined,"},
{"lineNum":"  458","line":"        };"},
{"lineNum":"  459","line":"    }"},
{"lineNum":"  460","line":""},
{"lineNum":"  461","line":"    pub fn checkLineMatch("},
{"lineNum":"  462","line":"        self: *LineNumberProgram,"},
{"lineNum":"  463","line":"        allocator: mem.Allocator,"},
{"lineNum":"  464","line":"        file_entries: []const FileEntry,"},
{"lineNum":"  465","line":"    ) !?debug.LineInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  466","line":"        if (self.prev_valid and","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  467","line":"            self.target_address >= self.prev_address and","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"            self.target_address < self.address)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":"        {"},
{"lineNum":"  470","line":"            const file_index = if (self.version >= 5) self.prev_file else i: {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  471","line":"                if (self.prev_file == 0) return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  472","line":"                break :i self.prev_file - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  473","line":"            };"},
{"lineNum":"  474","line":""},
{"lineNum":"  475","line":"            if (file_index >= file_entries.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":"            const file_entry = &file_entries[file_index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  477","line":""},
{"lineNum":"  478","line":"            if (file_entry.dir_index >= self.include_dirs.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"            const dir_name = self.include_dirs[file_entry.dir_index].path;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":""},
{"lineNum":"  481","line":"            const file_name = try fs.path.join(allocator, &[_][]const u8{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  482","line":"                dir_name, file_entry.path,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"            });"},
{"lineNum":"  484","line":""},
{"lineNum":"  485","line":"            return debug.LineInfo{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  486","line":"                .line = if (self.prev_line >= 0) @intCast(u64, self.prev_line) else 0,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  487","line":"                .column = self.prev_column,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  488","line":"                .file_name = file_name,"},
{"lineNum":"  489","line":"            };"},
{"lineNum":"  490","line":"        }"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"        self.prev_valid = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"        self.prev_address = self.address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  494","line":"        self.prev_file = self.file;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"        self.prev_line = self.line;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  496","line":"        self.prev_column = self.column;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"        self.prev_is_stmt = self.is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  498","line":"        self.prev_basic_block = self.basic_block;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  499","line":"        self.prev_end_sequence = self.end_sequence;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  500","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  501","line":"    }"},
{"lineNum":"  502","line":"};"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"fn readUnitLength(in_stream: anytype, endian: std.builtin.Endian, is_64: *bool) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  505","line":"    const first_32_bits = try in_stream.readInt(u32, endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  506","line":"    is_64.* = (first_32_bits == 0xffffffff);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  507","line":"    if (is_64.*) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  508","line":"        return in_stream.readInt(u64, endian);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  509","line":"    } else {"},
{"lineNum":"  510","line":"        if (first_32_bits >= 0xfffffff0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  511","line":"        // TODO this cast should not be needed"},
{"lineNum":"  512","line":"        return @as(u64, first_32_bits);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  513","line":"    }"},
{"lineNum":"  514","line":"}"},
{"lineNum":"  515","line":""},
{"lineNum":"  516","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  517","line":"fn readAllocBytes(allocator: mem.Allocator, in_stream: anytype, size: usize) ![]u8 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  518","line":"    const buf = try allocator.alloc(u8, size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  519","line":"    errdefer allocator.free(buf);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  520","line":"    if ((try nosuspend in_stream.read(buf)) < size) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  521","line":"    return buf;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  522","line":"}"},
{"lineNum":"  523","line":""},
{"lineNum":"  524","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  525","line":"fn readAddress(in_stream: anytype, endian: std.builtin.Endian, is_64: bool) !u64 {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  526","line":"    return nosuspend if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  527","line":"        try in_stream.readInt(u64, endian)","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  528","line":"    else"},
{"lineNum":"  529","line":"        @as(u64, try in_stream.readInt(u32, endian));","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  530","line":"}"},
{"lineNum":"  531","line":""},
{"lineNum":"  532","line":"fn parseFormValueBlockLen(allocator: mem.Allocator, in_stream: anytype, size: usize) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  533","line":"    const buf = try readAllocBytes(allocator, in_stream, size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  534","line":"    return FormValue{ .Block = buf };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  535","line":"}"},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  538","line":"fn parseFormValueBlock(allocator: mem.Allocator, in_stream: anytype, endian: std.builtin.Endian, size: usize) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  539","line":"    const block_len = try nosuspend in_stream.readVarInt(usize, endian, size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  540","line":"    return parseFormValueBlockLen(allocator, in_stream, block_len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  541","line":"}"},
{"lineNum":"  542","line":""},
{"lineNum":"  543","line":"fn parseFormValueConstant(in_stream: anytype, signed: bool, endian: std.builtin.Endian, comptime size: i32) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"10",},
{"lineNum":"  544","line":"    // TODO: Please forgive me, I\'ve worked around zig not properly spilling some intermediate values here."},
{"lineNum":"  545","line":"    // `nosuspend` should be removed from all the function calls once it is fixed."},
{"lineNum":"  546","line":"    return FormValue{","class":"lineNoCov","hits":"0","possible_hits":"20",},
{"lineNum":"  547","line":"        .Const = Constant{"},
{"lineNum":"  548","line":"            .signed = signed,"},
{"lineNum":"  549","line":"            .payload = switch (size) {"},
{"lineNum":"  550","line":"                1 => try nosuspend in_stream.readInt(u8, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"                2 => try nosuspend in_stream.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  552","line":"                4 => try nosuspend in_stream.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  553","line":"                8 => try nosuspend in_stream.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  554","line":"                -1 => blk: {"},
{"lineNum":"  555","line":"                    if (signed) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  556","line":"                        const x = try nosuspend leb.readILEB128(i64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  557","line":"                        break :blk @bitCast(u64, x);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  558","line":"                    } else {"},
{"lineNum":"  559","line":"                        const x = try nosuspend leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  560","line":"                        break :blk x;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  561","line":"                    }"},
{"lineNum":"  562","line":"                },"},
{"lineNum":"  563","line":"                else => @compileError(\"Invalid size\"),"},
{"lineNum":"  564","line":"            },"},
{"lineNum":"  565","line":"        },"},
{"lineNum":"  566","line":"    };"},
{"lineNum":"  567","line":"}"},
{"lineNum":"  568","line":""},
{"lineNum":"  569","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  570","line":"fn parseFormValueRef(in_stream: anytype, endian: std.builtin.Endian, size: i32) !FormValue {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  571","line":"    return FormValue{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  572","line":"        .Ref = switch (size) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  573","line":"            1 => try nosuspend in_stream.readInt(u8, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  574","line":"            2 => try nosuspend in_stream.readInt(u16, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  575","line":"            4 => try nosuspend in_stream.readInt(u32, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  576","line":"            8 => try nosuspend in_stream.readInt(u64, endian),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  577","line":"            -1 => try nosuspend leb.readULEB128(u64, in_stream),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  578","line":"            else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  579","line":"        },"},
{"lineNum":"  580","line":"    };"},
{"lineNum":"  581","line":"}"},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"// TODO the nosuspends here are workarounds"},
{"lineNum":"  584","line":"fn parseFormValue(allocator: mem.Allocator, in_stream: anytype, form_id: u64, endian: std.builtin.Endian, is_64: bool) anyerror!FormValue {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  585","line":"    return switch (form_id) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  586","line":"        FORM.addr => FormValue{ .Address = try readAddress(in_stream, endian, @sizeOf(usize) == 8) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  587","line":"        FORM.addrx1 => return FormValue{ .AddrOffset = try in_stream.readInt(u8, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  588","line":"        FORM.addrx2 => return FormValue{ .AddrOffset = try in_stream.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  589","line":"        FORM.addrx3 => return FormValue{ .AddrOffset = try in_stream.readInt(u24, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  590","line":"        FORM.addrx4 => return FormValue{ .AddrOffset = try in_stream.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  591","line":"        FORM.addrx => return FormValue{ .AddrOffset = try nosuspend leb.readULEB128(usize, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"        FORM.block1 => parseFormValueBlock(allocator, in_stream, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  594","line":"        FORM.block2 => parseFormValueBlock(allocator, in_stream, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  595","line":"        FORM.block4 => parseFormValueBlock(allocator, in_stream, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  596","line":"        FORM.block => {"},
{"lineNum":"  597","line":"            const block_len = try nosuspend leb.readULEB128(usize, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  598","line":"            return parseFormValueBlockLen(allocator, in_stream, block_len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  599","line":"        },"},
{"lineNum":"  600","line":"        FORM.data1 => parseFormValueConstant(in_stream, false, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  601","line":"        FORM.data2 => parseFormValueConstant(in_stream, false, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  602","line":"        FORM.data4 => parseFormValueConstant(in_stream, false, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"        FORM.data8 => parseFormValueConstant(in_stream, false, endian, 8),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  604","line":"        FORM.data16 => {"},
{"lineNum":"  605","line":"            var buf: [16]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  606","line":"            if ((try nosuspend in_stream.readAll(&buf)) < 16) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  607","line":"            return FormValue{ .data16 = buf };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  608","line":"        },"},
{"lineNum":"  609","line":"        FORM.udata, FORM.sdata => {"},
{"lineNum":"  610","line":"            const signed = form_id == FORM.sdata;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  611","line":"            return parseFormValueConstant(in_stream, signed, endian, -1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  612","line":"        },"},
{"lineNum":"  613","line":"        FORM.exprloc => {"},
{"lineNum":"  614","line":"            const size = try nosuspend leb.readULEB128(usize, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  615","line":"            const buf = try readAllocBytes(allocator, in_stream, size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  616","line":"            return FormValue{ .ExprLoc = buf };","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  617","line":"        },"},
{"lineNum":"  618","line":"        FORM.flag => FormValue{ .Flag = (try nosuspend in_stream.readByte()) != 0 },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":"        FORM.flag_present => FormValue{ .Flag = true },"},
{"lineNum":"  620","line":"        FORM.sec_offset => FormValue{ .SecOffset = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  621","line":""},
{"lineNum":"  622","line":"        FORM.ref1 => parseFormValueRef(in_stream, endian, 1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  623","line":"        FORM.ref2 => parseFormValueRef(in_stream, endian, 2),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  624","line":"        FORM.ref4 => parseFormValueRef(in_stream, endian, 4),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  625","line":"        FORM.ref8 => parseFormValueRef(in_stream, endian, 8),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  626","line":"        FORM.ref_udata => parseFormValueRef(in_stream, endian, -1),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  627","line":""},
{"lineNum":"  628","line":"        FORM.ref_addr => FormValue{ .RefAddr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"        FORM.ref_sig8 => FormValue{ .Ref = try nosuspend in_stream.readInt(u64, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  630","line":""},
{"lineNum":"  631","line":"        FORM.string => FormValue{ .String = try in_stream.readUntilDelimiterAlloc(allocator, 0, math.maxInt(usize)) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  632","line":"        FORM.strp => FormValue{ .StrPtr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  633","line":"        FORM.strx1 => return FormValue{ .StrOffset = try in_stream.readInt(u8, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  634","line":"        FORM.strx2 => return FormValue{ .StrOffset = try in_stream.readInt(u16, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  635","line":"        FORM.strx3 => return FormValue{ .StrOffset = try in_stream.readInt(u24, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  636","line":"        FORM.strx4 => return FormValue{ .StrOffset = try in_stream.readInt(u32, endian) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  637","line":"        FORM.strx => return FormValue{ .StrOffset = try nosuspend leb.readULEB128(usize, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  638","line":"        FORM.line_strp => FormValue{ .LineStrPtr = try readAddress(in_stream, endian, is_64) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  639","line":"        FORM.indirect => {"},
{"lineNum":"  640","line":"            const child_form_id = try nosuspend leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  641","line":"            if (true) {"},
{"lineNum":"  642","line":"                return parseFormValue(allocator, in_stream, child_form_id, endian, is_64);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  643","line":"            }"},
{"lineNum":"  644","line":"            const F = @TypeOf(async parseFormValue(allocator, in_stream, child_form_id, endian, is_64));"},
{"lineNum":"  645","line":"            var frame = try allocator.create(F);"},
{"lineNum":"  646","line":"            defer allocator.destroy(frame);"},
{"lineNum":"  647","line":"            return await @asyncCall(frame, {}, parseFormValue, .{ allocator, in_stream, child_form_id, endian, is_64 });"},
{"lineNum":"  648","line":"        },"},
{"lineNum":"  649","line":"        FORM.implicit_const => FormValue{ .Const = Constant{ .signed = true, .payload = undefined } },"},
{"lineNum":"  650","line":"        FORM.loclistx => return FormValue{ .LocListOffset = try nosuspend leb.readULEB128(u64, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  651","line":"        FORM.rnglistx => return FormValue{ .RangeListOffset = try nosuspend leb.readULEB128(u64, in_stream) },","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  652","line":"        else => {"},
{"lineNum":"  653","line":"            //std.debug.print(\"unrecognized form id: {x}\\n\", .{form_id});"},
{"lineNum":"  654","line":"            return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  655","line":"        },"},
{"lineNum":"  656","line":"    };"},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"fn getAbbrevTableEntry(abbrev_table: *const AbbrevTable, abbrev_code: u64) ?*const AbbrevTableEntry {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  660","line":"    for (abbrev_table.items) |*table_entry| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  661","line":"        if (table_entry.abbrev_code == abbrev_code) return table_entry;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  662","line":"    }"},
{"lineNum":"  663","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  664","line":"}"},
{"lineNum":"  665","line":""},
{"lineNum":"  666","line":"pub const DwarfInfo = struct {"},
{"lineNum":"  667","line":"    endian: std.builtin.Endian,"},
{"lineNum":"  668","line":"    // No memory is owned by the DwarfInfo"},
{"lineNum":"  669","line":"    debug_info: []const u8,"},
{"lineNum":"  670","line":"    debug_abbrev: []const u8,"},
{"lineNum":"  671","line":"    debug_str: []const u8,"},
{"lineNum":"  672","line":"    debug_str_offsets: ?[]const u8,"},
{"lineNum":"  673","line":"    debug_line: []const u8,"},
{"lineNum":"  674","line":"    debug_line_str: ?[]const u8,"},
{"lineNum":"  675","line":"    debug_ranges: ?[]const u8,"},
{"lineNum":"  676","line":"    debug_loclists: ?[]const u8,"},
{"lineNum":"  677","line":"    debug_rnglists: ?[]const u8,"},
{"lineNum":"  678","line":"    debug_addr: ?[]const u8,"},
{"lineNum":"  679","line":"    debug_names: ?[]const u8,"},
{"lineNum":"  680","line":"    debug_frame: ?[]const u8,"},
{"lineNum":"  681","line":"    // Filled later by the initializer"},
{"lineNum":"  682","line":"    abbrev_table_list: std.ArrayListUnmanaged(AbbrevTableHeader) = .{},"},
{"lineNum":"  683","line":"    compile_unit_list: std.ArrayListUnmanaged(CompileUnit) = .{},"},
{"lineNum":"  684","line":"    func_list: std.ArrayListUnmanaged(Func) = .{},"},
{"lineNum":"  685","line":""},
{"lineNum":"  686","line":"    pub fn deinit(di: *DwarfInfo, allocator: mem.Allocator) void {"},
{"lineNum":"  687","line":"        for (di.abbrev_table_list.items) |*abbrev| {"},
{"lineNum":"  688","line":"            abbrev.deinit();"},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":"        di.abbrev_table_list.deinit(allocator);"},
{"lineNum":"  691","line":"        for (di.compile_unit_list.items) |*cu| {"},
{"lineNum":"  692","line":"            cu.die.deinit(allocator);"},
{"lineNum":"  693","line":"            allocator.destroy(cu.die);"},
{"lineNum":"  694","line":"        }"},
{"lineNum":"  695","line":"        di.compile_unit_list.deinit(allocator);"},
{"lineNum":"  696","line":"        for (di.func_list.items) |*func| {"},
{"lineNum":"  697","line":"            func.deinit(allocator);"},
{"lineNum":"  698","line":"        }"},
{"lineNum":"  699","line":"        di.func_list.deinit(allocator);"},
{"lineNum":"  700","line":"    }"},
{"lineNum":"  701","line":""},
{"lineNum":"  702","line":"    pub fn getSymbolName(di: *DwarfInfo, address: u64) ?[]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":"        for (di.func_list.items) |*func| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  704","line":"            if (func.pc_range) |range| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  705","line":"                if (address >= range.start and address < range.end) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  706","line":"                    return func.name;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  707","line":"                }"},
{"lineNum":"  708","line":"            }"},
{"lineNum":"  709","line":"        }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"        return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    fn scanAllFunctions(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  715","line":"        var stream = io.fixedBufferStream(di.debug_info);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  716","line":"        const in = stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":"        const seekable = &stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  718","line":"        var this_unit_offset: u64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  719","line":""},
{"lineNum":"  720","line":"        var tmp_arena = std.heap.ArenaAllocator.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  721","line":"        defer tmp_arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"34",},
{"lineNum":"  722","line":"        const arena = tmp_arena.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  723","line":""},
{"lineNum":"  724","line":"        while (this_unit_offset < try seekable.getEndPos()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  725","line":"            try seekable.seekTo(this_unit_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"            var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":"            const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  729","line":"            if (unit_length == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":"            const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  731","line":""},
{"lineNum":"  732","line":"            const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  733","line":"            if (version < 2 or version > 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  734","line":""},
{"lineNum":"  735","line":"            var address_size: u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  736","line":"            var debug_abbrev_offset: u64 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  737","line":"            if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"                const unit_type = try in.readInt(u8, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  739","line":"                if (unit_type != UT.compile) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  740","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  741","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  743","line":"                else"},
{"lineNum":"  744","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  745","line":"            } else {"},
{"lineNum":"  746","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  747","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  748","line":"                else"},
{"lineNum":"  749","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  750","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  751","line":"            }"},
{"lineNum":"  752","line":"            if (address_size != @sizeOf(usize)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"            const compile_unit_pos = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  755","line":"            const abbrev_table = try di.getAbbrevTable(allocator, debug_abbrev_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"            try seekable.seekTo(compile_unit_pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":""},
{"lineNum":"  759","line":"            const next_unit_pos = this_unit_offset + next_offset;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  760","line":""},
{"lineNum":"  761","line":"            var compile_unit: CompileUnit = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"            while ((try seekable.getPos()) < next_unit_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  764","line":"                var die_obj = (try di.parseDie(arena, in, abbrev_table, is_64)) orelse continue;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  765","line":"                const after_die_offset = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"                switch (die_obj.tag_id) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  768","line":"                    TAG.compile_unit => {"},
{"lineNum":"  769","line":"                        compile_unit = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"                            .version = version,"},
{"lineNum":"  771","line":"                            .is_64 = is_64,"},
{"lineNum":"  772","line":"                            .die = &die_obj,"},
{"lineNum":"  773","line":"                            .pc_range = null,"},
{"lineNum":"  774","line":""},
{"lineNum":"  775","line":"                            .str_offsets_base = if (die_obj.getAttr(AT.str_offsets_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  776","line":"                            .addr_base = if (die_obj.getAttr(AT.addr_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  777","line":"                            .rnglists_base = if (die_obj.getAttr(AT.rnglists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  778","line":"                            .loclists_base = if (die_obj.getAttr(AT.loclists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  779","line":"                        };"},
{"lineNum":"  780","line":"                    },"},
{"lineNum":"  781","line":"                    TAG.subprogram, TAG.inlined_subroutine, TAG.subroutine, TAG.entry_point => {"},
{"lineNum":"  782","line":"                        const fn_name = x: {"},
{"lineNum":"  783","line":"                            var depth: i32 = 3;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"                            var this_die_obj = die_obj;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"                            // Prevent endless loops"},
{"lineNum":"  786","line":"                            while (depth > 0) : (depth -= 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  787","line":"                                if (this_die_obj.getAttr(AT.name)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":"                                    const name = try this_die_obj.getAttrString(di, AT.name, di.debug_str, compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  789","line":"                                    break :x try allocator.dupe(u8, name);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  790","line":"                                } else if (this_die_obj.getAttr(AT.abstract_origin)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  791","line":"                                    // Follow the DIE it points to and repeat"},
{"lineNum":"  792","line":"                                    const ref_offset = try this_die_obj.getAttrRef(AT.abstract_origin);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  793","line":"                                    if (ref_offset > next_offset) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  794","line":"                                    try seekable.seekTo(this_unit_offset + ref_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  795","line":"                                    this_die_obj = (try di.parseDie(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  796","line":"                                        arena,"},
{"lineNum":"  797","line":"                                        in,"},
{"lineNum":"  798","line":"                                        abbrev_table,"},
{"lineNum":"  799","line":"                                        is_64,"},
{"lineNum":"  800","line":"                                    )) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  801","line":"                                } else if (this_die_obj.getAttr(AT.specification)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  802","line":"                                    // Follow the DIE it points to and repeat"},
{"lineNum":"  803","line":"                                    const ref_offset = try this_die_obj.getAttrRef(AT.specification);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  804","line":"                                    if (ref_offset > next_offset) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  805","line":"                                    try seekable.seekTo(this_unit_offset + ref_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  806","line":"                                    this_die_obj = (try di.parseDie(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  807","line":"                                        arena,"},
{"lineNum":"  808","line":"                                        in,"},
{"lineNum":"  809","line":"                                        abbrev_table,"},
{"lineNum":"  810","line":"                                        is_64,"},
{"lineNum":"  811","line":"                                    )) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  812","line":"                                } else {"},
{"lineNum":"  813","line":"                                    break :x null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  814","line":"                                }"},
{"lineNum":"  815","line":"                            }"},
{"lineNum":"  816","line":""},
{"lineNum":"  817","line":"                            break :x null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  818","line":"                        };"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"                        const pc_range = x: {"},
{"lineNum":"  821","line":"                            if (die_obj.getAttrAddr(di, AT.low_pc, compile_unit)) |low_pc| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  822","line":"                                if (die_obj.getAttr(AT.high_pc)) |high_pc_value| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  823","line":"                                    const pc_end = switch (high_pc_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  824","line":"                                        FormValue.Address => |value| value,"},
{"lineNum":"  825","line":"                                        FormValue.Const => |value| b: {"},
{"lineNum":"  826","line":"                                            const offset = try value.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  827","line":"                                            break :b (low_pc + offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  828","line":"                                        },"},
{"lineNum":"  829","line":"                                        else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  830","line":"                                    };"},
{"lineNum":"  831","line":"                                    break :x PcRange{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  832","line":"                                        .start = low_pc,"},
{"lineNum":"  833","line":"                                        .end = pc_end,"},
{"lineNum":"  834","line":"                                    };"},
{"lineNum":"  835","line":"                                } else {"},
{"lineNum":"  836","line":"                                    break :x null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  837","line":"                                }"},
{"lineNum":"  838","line":"                            } else |err| {"},
{"lineNum":"  839","line":"                                if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  840","line":"                                break :x null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  841","line":"                            }"},
{"lineNum":"  842","line":"                        };"},
{"lineNum":"  843","line":""},
{"lineNum":"  844","line":"                        try di.func_list.append(allocator, Func{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  845","line":"                            .name = fn_name,"},
{"lineNum":"  846","line":"                            .pc_range = pc_range,"},
{"lineNum":"  847","line":"                        });"},
{"lineNum":"  848","line":"                    },"},
{"lineNum":"  849","line":"                    else => {},"},
{"lineNum":"  850","line":"                }"},
{"lineNum":"  851","line":""},
{"lineNum":"  852","line":"                try seekable.seekTo(after_die_offset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  853","line":"            }"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"            this_unit_offset += next_offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  856","line":"        }"},
{"lineNum":"  857","line":"    }"},
{"lineNum":"  858","line":""},
{"lineNum":"  859","line":"    fn scanAllCompileUnits(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  860","line":"        var stream = io.fixedBufferStream(di.debug_info);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  861","line":"        const in = &stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  862","line":"        const seekable = &stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  863","line":"        var this_unit_offset: u64 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  864","line":""},
{"lineNum":"  865","line":"        while (this_unit_offset < try seekable.getEndPos()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  866","line":"            try seekable.seekTo(this_unit_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  867","line":""},
{"lineNum":"  868","line":"            var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  869","line":"            const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  870","line":"            if (unit_length == 0) return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  871","line":"            const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  872","line":""},
{"lineNum":"  873","line":"            const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  874","line":"            if (version < 2 or version > 5) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  875","line":""},
{"lineNum":"  876","line":"            var address_size: u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  877","line":"            var debug_abbrev_offset: u64 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  878","line":"            if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  879","line":"                const unit_type = try in.readInt(u8, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  880","line":"                if (unit_type != UT.compile) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  881","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  882","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  883","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  884","line":"                else"},
{"lineNum":"  885","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  886","line":"            } else {"},
{"lineNum":"  887","line":"                debug_abbrev_offset = if (is_64)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  888","line":"                    try in.readInt(u64, di.endian)","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  889","line":"                else"},
{"lineNum":"  890","line":"                    try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  891","line":"                address_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  892","line":"            }"},
{"lineNum":"  893","line":"            if (address_size != @sizeOf(usize)) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  894","line":""},
{"lineNum":"  895","line":"            const compile_unit_pos = try seekable.getPos();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  896","line":"            const abbrev_table = try di.getAbbrevTable(allocator, debug_abbrev_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  897","line":""},
{"lineNum":"  898","line":"            try seekable.seekTo(compile_unit_pos);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  899","line":""},
{"lineNum":"  900","line":"            const compile_unit_die = try allocator.create(Die);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  901","line":"            errdefer allocator.destroy(compile_unit_die);","class":"lineNoCov","hits":"0","possible_hits":"11",},
{"lineNum":"  902","line":"            compile_unit_die.* = (try di.parseDie(allocator, in, abbrev_table, is_64)) orelse","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  903","line":"                return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  904","line":""},
{"lineNum":"  905","line":"            if (compile_unit_die.tag_id != TAG.compile_unit) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  906","line":""},
{"lineNum":"  907","line":"            var compile_unit: CompileUnit = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  908","line":"                .version = version,"},
{"lineNum":"  909","line":"                .is_64 = is_64,"},
{"lineNum":"  910","line":"                .pc_range = null,"},
{"lineNum":"  911","line":"                .die = compile_unit_die,"},
{"lineNum":"  912","line":"                .str_offsets_base = if (compile_unit_die.getAttr(AT.str_offsets_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  913","line":"                .addr_base = if (compile_unit_die.getAttr(AT.addr_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  914","line":"                .rnglists_base = if (compile_unit_die.getAttr(AT.rnglists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  915","line":"                .loclists_base = if (compile_unit_die.getAttr(AT.loclists_base)) |fv| try fv.getUInt(usize) else 0,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  916","line":"            };"},
{"lineNum":"  917","line":""},
{"lineNum":"  918","line":"            compile_unit.pc_range = x: {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  919","line":"                if (compile_unit_die.getAttrAddr(di, AT.low_pc, compile_unit)) |low_pc| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  920","line":"                    if (compile_unit_die.getAttr(AT.high_pc)) |high_pc_value| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  921","line":"                        const pc_end = switch (high_pc_value.*) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  922","line":"                            FormValue.Address => |value| value,"},
{"lineNum":"  923","line":"                            FormValue.Const => |value| b: {"},
{"lineNum":"  924","line":"                                const offset = try value.asUnsignedLe();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  925","line":"                                break :b (low_pc + offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  926","line":"                            },"},
{"lineNum":"  927","line":"                            else => return badDwarf(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  928","line":"                        };"},
{"lineNum":"  929","line":"                        break :x PcRange{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  930","line":"                            .start = low_pc,"},
{"lineNum":"  931","line":"                            .end = pc_end,"},
{"lineNum":"  932","line":"                        };"},
{"lineNum":"  933","line":"                    } else {"},
{"lineNum":"  934","line":"                        break :x null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  935","line":"                    }"},
{"lineNum":"  936","line":"                } else |err| {"},
{"lineNum":"  937","line":"                    if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  938","line":"                    break :x null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  939","line":"                }"},
{"lineNum":"  940","line":"            };"},
{"lineNum":"  941","line":""},
{"lineNum":"  942","line":"            try di.compile_unit_list.append(allocator, compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"            this_unit_offset += next_offset;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  945","line":"        }"},
{"lineNum":"  946","line":"    }"},
{"lineNum":"  947","line":""},
{"lineNum":"  948","line":"    pub fn findCompileUnit(di: *DwarfInfo, target_address: u64) !*const CompileUnit {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  949","line":"        for (di.compile_unit_list.items) |*compile_unit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  950","line":"            if (compile_unit.pc_range) |range| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  951","line":"                if (target_address >= range.start and target_address < range.end) return compile_unit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  952","line":"            }"},
{"lineNum":"  953","line":"            if (di.debug_ranges) |debug_ranges| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  954","line":"                if (compile_unit.die.getAttrSecOffset(AT.ranges)) |ranges_offset| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  955","line":"                    var stream = io.fixedBufferStream(debug_ranges);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  956","line":"                    const in = &stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  957","line":"                    const seekable = &stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  958","line":""},
{"lineNum":"  959","line":"                    // All the addresses in the list are relative to the value"},
{"lineNum":"  960","line":"                    // specified by DW_AT.low_pc or to some other value encoded"},
{"lineNum":"  961","line":"                    // in the list itself."},
{"lineNum":"  962","line":"                    // If no starting value is specified use zero."},
{"lineNum":"  963","line":"                    var base_address = compile_unit.die.getAttrAddr(di, AT.low_pc, compile_unit.*) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  964","line":"                        error.MissingDebugInfo => @as(u64, 0), // TODO https://github.com/ziglang/zig/issues/11135"},
{"lineNum":"  965","line":"                        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  966","line":"                    };"},
{"lineNum":"  967","line":""},
{"lineNum":"  968","line":"                    try seekable.seekTo(ranges_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  969","line":""},
{"lineNum":"  970","line":"                    while (true) {"},
{"lineNum":"  971","line":"                        const begin_addr = try in.readInt(usize, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  972","line":"                        const end_addr = try in.readInt(usize, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  973","line":"                        if (begin_addr == 0 and end_addr == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  974","line":"                            break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  975","line":"                        }"},
{"lineNum":"  976","line":"                        // This entry selects a new value for the base address"},
{"lineNum":"  977","line":"                        if (begin_addr == math.maxInt(usize)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"                            base_address = end_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  979","line":"                            continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  980","line":"                        }"},
{"lineNum":"  981","line":"                        if (target_address >= base_address + begin_addr and target_address < base_address + end_addr) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"                            return compile_unit;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  983","line":"                        }"},
{"lineNum":"  984","line":"                    }"},
{"lineNum":"  985","line":"                } else |err| {"},
{"lineNum":"  986","line":"                    if (err != error.MissingDebugInfo) return err;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  987","line":"                    continue;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  988","line":"                }"},
{"lineNum":"  989","line":"            }"},
{"lineNum":"  990","line":"        }"},
{"lineNum":"  991","line":"        return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  992","line":"    }"},
{"lineNum":"  993","line":""},
{"lineNum":"  994","line":"    /// Gets an already existing AbbrevTable given the abbrev_offset, or if not found,"},
{"lineNum":"  995","line":"    /// seeks in the stream and parses it."},
{"lineNum":"  996","line":"    fn getAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, abbrev_offset: u64) !*const AbbrevTable {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  997","line":"        for (di.abbrev_table_list.items) |*header| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  998","line":"            if (header.offset == abbrev_offset) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  999","line":"                return &header.table;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1000","line":"            }"},
{"lineNum":" 1001","line":"        }"},
{"lineNum":" 1002","line":"        try di.abbrev_table_list.append(allocator, AbbrevTableHeader{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1003","line":"            .offset = abbrev_offset,"},
{"lineNum":" 1004","line":"            .table = try di.parseAbbrevTable(allocator, abbrev_offset),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1005","line":"        });"},
{"lineNum":" 1006","line":"        return &di.abbrev_table_list.items[di.abbrev_table_list.items.len - 1].table;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1007","line":"    }"},
{"lineNum":" 1008","line":""},
{"lineNum":" 1009","line":"    fn parseAbbrevTable(di: *DwarfInfo, allocator: mem.Allocator, offset: u64) !AbbrevTable {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":"        var stream = io.fixedBufferStream(di.debug_abbrev);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1011","line":"        const in = &stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1012","line":"        const seekable = &stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1013","line":""},
{"lineNum":" 1014","line":"        try seekable.seekTo(offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1015","line":"        var result = AbbrevTable.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1016","line":"        errdefer {","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1017","line":"            for (result.items) |*entry| {","class":"lineNoCov","hits":"0","possible_hits":"16",},
{"lineNum":" 1018","line":"                entry.attrs.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1019","line":"            }"},
{"lineNum":" 1020","line":"            result.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":" 1021","line":"        }"},
{"lineNum":" 1022","line":""},
{"lineNum":" 1023","line":"        while (true) {"},
{"lineNum":" 1024","line":"            const abbrev_code = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1025","line":"            if (abbrev_code == 0) return result;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1026","line":"            try result.append(AbbrevTableEntry{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1027","line":"                .abbrev_code = abbrev_code,"},
{"lineNum":" 1028","line":"                .tag_id = try leb.readULEB128(u64, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1029","line":"                .has_children = (try in.readByte()) == CHILDREN.yes,","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1030","line":"                .attrs = std.ArrayList(AbbrevAttr).init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1031","line":"            });"},
{"lineNum":" 1032","line":"            const attrs = &result.items[result.items.len - 1].attrs;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1033","line":""},
{"lineNum":" 1034","line":"            while (true) {"},
{"lineNum":" 1035","line":"                const attr_id = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1036","line":"                const form_id = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1037","line":"                if (attr_id == 0 and form_id == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1038","line":"                // DW_FORM_implicit_const stores its value immediately after the attribute pair :("},
{"lineNum":" 1039","line":"                const payload = if (form_id == FORM.implicit_const) try leb.readILEB128(i64, in) else undefined;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1040","line":"                try attrs.append(AbbrevAttr{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1041","line":"                    .attr_id = attr_id,"},
{"lineNum":" 1042","line":"                    .form_id = form_id,"},
{"lineNum":" 1043","line":"                    .payload = payload,"},
{"lineNum":" 1044","line":"                });"},
{"lineNum":" 1045","line":"            }"},
{"lineNum":" 1046","line":"        }"},
{"lineNum":" 1047","line":"    }"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    fn parseDie("},
{"lineNum":" 1050","line":"        di: *DwarfInfo,"},
{"lineNum":" 1051","line":"        allocator: mem.Allocator,"},
{"lineNum":" 1052","line":"        in_stream: anytype,"},
{"lineNum":" 1053","line":"        abbrev_table: *const AbbrevTable,"},
{"lineNum":" 1054","line":"        is_64: bool,"},
{"lineNum":" 1055","line":"    ) !?Die {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1056","line":"        const abbrev_code = try leb.readULEB128(u64, in_stream);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1057","line":"        if (abbrev_code == 0) return null;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1058","line":"        const table_entry = getAbbrevTableEntry(abbrev_table, abbrev_code) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1059","line":""},
{"lineNum":" 1060","line":"        var result = Die{"},
{"lineNum":" 1061","line":"            // Lives as long as the Die."},
{"lineNum":" 1062","line":"            .arena = std.heap.ArenaAllocator.init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1063","line":"            .tag_id = table_entry.tag_id,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1064","line":"            .has_children = table_entry.has_children,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1065","line":"        };"},
{"lineNum":" 1066","line":"        try result.attrs.resize(allocator, table_entry.attrs.items.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1067","line":"        for (table_entry.attrs.items, 0..) |attr, i| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1068","line":"            result.attrs.items[i] = Die.Attr{","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1069","line":"                .id = attr.attr_id,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1070","line":"                .value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1071","line":"                    result.arena.allocator(),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1072","line":"                    in_stream,"},
{"lineNum":" 1073","line":"                    attr.form_id,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1074","line":"                    di.endian,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1075","line":"                    is_64,"},
{"lineNum":" 1076","line":"                ),"},
{"lineNum":" 1077","line":"            };"},
{"lineNum":" 1078","line":"            if (attr.form_id == FORM.implicit_const) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1079","line":"                result.attrs.items[i].value.Const.payload = @bitCast(u64, attr.payload);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1080","line":"            }"},
{"lineNum":" 1081","line":"        }"},
{"lineNum":" 1082","line":"        return result;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1083","line":"    }"},
{"lineNum":" 1084","line":""},
{"lineNum":" 1085","line":"    pub fn getLineNumberInfo("},
{"lineNum":" 1086","line":"        di: *DwarfInfo,"},
{"lineNum":" 1087","line":"        allocator: mem.Allocator,"},
{"lineNum":" 1088","line":"        compile_unit: CompileUnit,"},
{"lineNum":" 1089","line":"        target_address: u64,"},
{"lineNum":" 1090","line":"    ) !debug.LineInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1091","line":"        var stream = io.fixedBufferStream(di.debug_line);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1092","line":"        const in = &stream.reader();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1093","line":"        const seekable = &stream.seekableStream();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1094","line":""},
{"lineNum":" 1095","line":"        const compile_unit_cwd = try compile_unit.die.getAttrString(di, AT.comp_dir, di.debug_line_str, compile_unit);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1096","line":"        const line_info_offset = try compile_unit.die.getAttrSecOffset(AT.stmt_list);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1097","line":""},
{"lineNum":" 1098","line":"        try seekable.seekTo(line_info_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"        var is_64: bool = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1101","line":"        const unit_length = try readUnitLength(in, di.endian, &is_64);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1102","line":"        if (unit_length == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1103","line":"            return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1104","line":"        }"},
{"lineNum":" 1105","line":"        const next_offset = unit_length + (if (is_64) @as(usize, 12) else @as(usize, 4));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1106","line":""},
{"lineNum":" 1107","line":"        const version = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1108","line":"        if (version < 2) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1109","line":""},
{"lineNum":" 1110","line":"        var addr_size: u8 = if (is_64) 8 else 4;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1111","line":"        var seg_size: u8 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1112","line":"        if (version >= 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1113","line":"            addr_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1114","line":"            seg_size = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1115","line":"        }"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"        const prologue_length = if (is_64) try in.readInt(u64, di.endian) else try in.readInt(u32, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1118","line":"        const prog_start_offset = (try seekable.getPos()) + prologue_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"        const minimum_instruction_length = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1121","line":"        if (minimum_instruction_length == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1122","line":""},
{"lineNum":" 1123","line":"        if (version >= 4) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1124","line":"            // maximum_operations_per_instruction"},
{"lineNum":" 1125","line":"            _ = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1126","line":"        }"},
{"lineNum":" 1127","line":""},
{"lineNum":" 1128","line":"        const default_is_stmt = (try in.readByte()) != 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1129","line":"        const line_base = try in.readByteSigned();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"        const line_range = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1132","line":"        if (line_range == 0) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"        const opcode_base = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1135","line":""},
{"lineNum":" 1136","line":"        const standard_opcode_lengths = try allocator.alloc(u8, opcode_base - 1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1137","line":"        defer allocator.free(standard_opcode_lengths);","class":"lineNoCov","hits":"0","possible_hits":"57",},
{"lineNum":" 1138","line":""},
{"lineNum":" 1139","line":"        {"},
{"lineNum":" 1140","line":"            var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1141","line":"            while (i < opcode_base - 1) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1142","line":"                standard_opcode_lengths[i] = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1143","line":"            }"},
{"lineNum":" 1144","line":"        }"},
{"lineNum":" 1145","line":""},
{"lineNum":" 1146","line":"        var tmp_arena = std.heap.ArenaAllocator.init(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1147","line":"        defer tmp_arena.deinit();","class":"lineNoCov","hits":"0","possible_hits":"56",},
{"lineNum":" 1148","line":"        const arena = tmp_arena.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"        var include_directories = std.ArrayList(FileEntry).init(arena);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1151","line":"        var file_entries = std.ArrayList(FileEntry).init(arena);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1152","line":""},
{"lineNum":" 1153","line":"        if (version < 5) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1154","line":"            try include_directories.append(.{ .path = compile_unit_cwd });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1155","line":""},
{"lineNum":" 1156","line":"            while (true) {"},
{"lineNum":" 1157","line":"                const dir = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1158","line":"                if (dir.len == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1159","line":"                try include_directories.append(.{ .path = dir });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1160","line":"            }"},
{"lineNum":" 1161","line":""},
{"lineNum":" 1162","line":"            while (true) {"},
{"lineNum":" 1163","line":"                const file_name = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1164","line":"                if (file_name.len == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1165","line":"                const dir_index = try leb.readULEB128(u32, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1166","line":"                const mtime = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1167","line":"                const size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1168","line":"                try file_entries.append(FileEntry{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1169","line":"                    .path = file_name,"},
{"lineNum":" 1170","line":"                    .dir_index = dir_index,"},
{"lineNum":" 1171","line":"                    .mtime = mtime,"},
{"lineNum":" 1172","line":"                    .size = size,"},
{"lineNum":" 1173","line":"                });"},
{"lineNum":" 1174","line":"            }"},
{"lineNum":" 1175","line":"        } else {"},
{"lineNum":" 1176","line":"            const FileEntFmt = struct {"},
{"lineNum":" 1177","line":"                content_type_code: u8,"},
{"lineNum":" 1178","line":"                form_code: u16,"},
{"lineNum":" 1179","line":"            };"},
{"lineNum":" 1180","line":"            {"},
{"lineNum":" 1181","line":"                var dir_ent_fmt_buf: [10]FileEntFmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1182","line":"                const directory_entry_format_count = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1183","line":"                if (directory_entry_format_count > dir_ent_fmt_buf.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1184","line":"                for (dir_ent_fmt_buf[0..directory_entry_format_count]) |*ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1185","line":"                    ent_fmt.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1186","line":"                        .content_type_code = try leb.readULEB128(u8, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1187","line":"                        .form_code = try leb.readULEB128(u16, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1188","line":"                    };"},
{"lineNum":" 1189","line":"                }"},
{"lineNum":" 1190","line":""},
{"lineNum":" 1191","line":"                const directories_count = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1192","line":"                try include_directories.ensureUnusedCapacity(directories_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1193","line":"                {"},
{"lineNum":" 1194","line":"                    var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1195","line":"                    while (i < directories_count) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1196","line":"                        var e: FileEntry = .{ .path = &.{} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1197","line":"                        for (dir_ent_fmt_buf[0..directory_entry_format_count]) |ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1198","line":"                            const form_value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1199","line":"                                arena,"},
{"lineNum":" 1200","line":"                                in,"},
{"lineNum":" 1201","line":"                                ent_fmt.form_code,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1202","line":"                                di.endian,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1203","line":"                                is_64,"},
{"lineNum":" 1204","line":"                            );"},
{"lineNum":" 1205","line":"                            switch (ent_fmt.content_type_code) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1206","line":"                                LNCT.path => e.path = try form_value.getString(di.*),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1207","line":"                                LNCT.directory_index => e.dir_index = try form_value.getUInt(u32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1208","line":"                                LNCT.timestamp => e.mtime = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1209","line":"                                LNCT.size => e.size = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1210","line":"                                LNCT.MD5 => e.md5 = try form_value.getData16(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1211","line":"                                else => continue,"},
{"lineNum":" 1212","line":"                            }"},
{"lineNum":" 1213","line":"                        }"},
{"lineNum":" 1214","line":"                        include_directories.appendAssumeCapacity(e);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1215","line":"                    }"},
{"lineNum":" 1216","line":"                }"},
{"lineNum":" 1217","line":"            }"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"            var file_ent_fmt_buf: [10]FileEntFmt = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1220","line":"            const file_name_entry_format_count = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1221","line":"            if (file_name_entry_format_count > file_ent_fmt_buf.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1222","line":"            for (file_ent_fmt_buf[0..file_name_entry_format_count]) |*ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1223","line":"                ent_fmt.* = .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1224","line":"                    .content_type_code = try leb.readULEB128(u8, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1225","line":"                    .form_code = try leb.readULEB128(u16, in),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1226","line":"                };"},
{"lineNum":" 1227","line":"            }"},
{"lineNum":" 1228","line":""},
{"lineNum":" 1229","line":"            const file_names_count = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1230","line":"            try file_entries.ensureUnusedCapacity(file_names_count);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1231","line":"            {"},
{"lineNum":" 1232","line":"                var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1233","line":"                while (i < file_names_count) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1234","line":"                    var e: FileEntry = .{ .path = &.{} };","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1235","line":"                    for (file_ent_fmt_buf[0..file_name_entry_format_count]) |ent_fmt| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1236","line":"                        const form_value = try parseFormValue(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1237","line":"                            arena,"},
{"lineNum":" 1238","line":"                            in,"},
{"lineNum":" 1239","line":"                            ent_fmt.form_code,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1240","line":"                            di.endian,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1241","line":"                            is_64,"},
{"lineNum":" 1242","line":"                        );"},
{"lineNum":" 1243","line":"                        switch (ent_fmt.content_type_code) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1244","line":"                            LNCT.path => e.path = try form_value.getString(di.*),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1245","line":"                            LNCT.directory_index => e.dir_index = try form_value.getUInt(u32),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1246","line":"                            LNCT.timestamp => e.mtime = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1247","line":"                            LNCT.size => e.size = try form_value.getUInt(u64),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1248","line":"                            LNCT.MD5 => e.md5 = try form_value.getData16(),","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1249","line":"                            else => continue,"},
{"lineNum":" 1250","line":"                        }"},
{"lineNum":" 1251","line":"                    }"},
{"lineNum":" 1252","line":"                    file_entries.appendAssumeCapacity(e);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1253","line":"                }"},
{"lineNum":" 1254","line":"            }"},
{"lineNum":" 1255","line":"        }"},
{"lineNum":" 1256","line":""},
{"lineNum":" 1257","line":"        var prog = LineNumberProgram.init("},
{"lineNum":" 1258","line":"            default_is_stmt,"},
{"lineNum":" 1259","line":"            include_directories.items,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1260","line":"            target_address,"},
{"lineNum":" 1261","line":"            version,"},
{"lineNum":" 1262","line":"        );"},
{"lineNum":" 1263","line":""},
{"lineNum":" 1264","line":"        try seekable.seekTo(prog_start_offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1265","line":""},
{"lineNum":" 1266","line":"        const next_unit_pos = line_info_offset + next_offset;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1267","line":""},
{"lineNum":" 1268","line":"        while ((try seekable.getPos()) < next_unit_pos) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1269","line":"            const opcode = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1270","line":""},
{"lineNum":" 1271","line":"            if (opcode == LNS.extended_op) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1272","line":"                const op_size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1273","line":"                if (op_size < 1) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1274","line":"                var sub_op = try in.readByte();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1275","line":"                switch (sub_op) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1276","line":"                    LNE.end_sequence => {"},
{"lineNum":" 1277","line":"                        prog.end_sequence = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1278","line":"                        if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1279","line":"                        prog.reset();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1280","line":"                    },"},
{"lineNum":" 1281","line":"                    LNE.set_address => {"},
{"lineNum":" 1282","line":"                        const addr = try in.readInt(usize, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1283","line":"                        prog.address = addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1284","line":"                    },"},
{"lineNum":" 1285","line":"                    LNE.define_file => {"},
{"lineNum":" 1286","line":"                        const path = try in.readUntilDelimiterAlloc(arena, 0, math.maxInt(usize));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1287","line":"                        const dir_index = try leb.readULEB128(u32, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1288","line":"                        const mtime = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1289","line":"                        const size = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1290","line":"                        try file_entries.append(FileEntry{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1291","line":"                            .path = path,"},
{"lineNum":" 1292","line":"                            .dir_index = dir_index,"},
{"lineNum":" 1293","line":"                            .mtime = mtime,"},
{"lineNum":" 1294","line":"                            .size = size,"},
{"lineNum":" 1295","line":"                        });"},
{"lineNum":" 1296","line":"                    },"},
{"lineNum":" 1297","line":"                    else => {"},
{"lineNum":" 1298","line":"                        const fwd_amt = math.cast(isize, op_size - 1) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1299","line":"                        try seekable.seekBy(fwd_amt);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1300","line":"                    },"},
{"lineNum":" 1301","line":"                }"},
{"lineNum":" 1302","line":"            } else if (opcode >= opcode_base) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1303","line":"                // special opcodes"},
{"lineNum":" 1304","line":"                const adjusted_opcode = opcode - opcode_base;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1305","line":"                const inc_addr = minimum_instruction_length * (adjusted_opcode / line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1306","line":"                const inc_line = @as(i32, line_base) + @as(i32, adjusted_opcode % line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1307","line":"                prog.line += inc_line;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1308","line":"                prog.address += inc_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1309","line":"                if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1310","line":"                prog.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1311","line":"            } else {"},
{"lineNum":" 1312","line":"                switch (opcode) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1313","line":"                    LNS.copy => {"},
{"lineNum":" 1314","line":"                        if (try prog.checkLineMatch(allocator, file_entries.items)) |info| return info;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1315","line":"                        prog.basic_block = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1316","line":"                    },"},
{"lineNum":" 1317","line":"                    LNS.advance_pc => {"},
{"lineNum":" 1318","line":"                        const arg = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1319","line":"                        prog.address += arg * minimum_instruction_length;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1320","line":"                    },"},
{"lineNum":" 1321","line":"                    LNS.advance_line => {"},
{"lineNum":" 1322","line":"                        const arg = try leb.readILEB128(i64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1323","line":"                        prog.line += arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1324","line":"                    },"},
{"lineNum":" 1325","line":"                    LNS.set_file => {"},
{"lineNum":" 1326","line":"                        const arg = try leb.readULEB128(usize, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1327","line":"                        prog.file = arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1328","line":"                    },"},
{"lineNum":" 1329","line":"                    LNS.set_column => {"},
{"lineNum":" 1330","line":"                        const arg = try leb.readULEB128(u64, in);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1331","line":"                        prog.column = arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1332","line":"                    },"},
{"lineNum":" 1333","line":"                    LNS.negate_stmt => {"},
{"lineNum":" 1334","line":"                        prog.is_stmt = !prog.is_stmt;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1335","line":"                    },"},
{"lineNum":" 1336","line":"                    LNS.set_basic_block => {"},
{"lineNum":" 1337","line":"                        prog.basic_block = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1338","line":"                    },"},
{"lineNum":" 1339","line":"                    LNS.const_add_pc => {"},
{"lineNum":" 1340","line":"                        const inc_addr = minimum_instruction_length * ((255 - opcode_base) / line_range);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1341","line":"                        prog.address += inc_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1342","line":"                    },"},
{"lineNum":" 1343","line":"                    LNS.fixed_advance_pc => {"},
{"lineNum":" 1344","line":"                        const arg = try in.readInt(u16, di.endian);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1345","line":"                        prog.address += arg;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1346","line":"                    },"},
{"lineNum":" 1347","line":"                    LNS.set_prologue_end => {},"},
{"lineNum":" 1348","line":"                    else => {"},
{"lineNum":" 1349","line":"                        if (opcode - 1 >= standard_opcode_lengths.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1350","line":"                        const len_bytes = standard_opcode_lengths[opcode - 1];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1351","line":"                        try seekable.seekBy(len_bytes);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1352","line":"                    },"},
{"lineNum":" 1353","line":"                }"},
{"lineNum":" 1354","line":"            }"},
{"lineNum":" 1355","line":"        }"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"        return missingDwarf();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1358","line":"    }"},
{"lineNum":" 1359","line":""},
{"lineNum":" 1360","line":"    fn getString(di: DwarfInfo, offset: u64) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1361","line":"        return getStringGeneric(di.debug_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1362","line":"    }"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"    fn getLineString(di: DwarfInfo, offset: u64) ![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1365","line":"        return getStringGeneric(di.debug_line_str, offset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1366","line":"    }"},
{"lineNum":" 1367","line":"};"},
{"lineNum":" 1368","line":""},
{"lineNum":" 1369","line":"/// Initialize DWARF info. The caller has the responsibility to initialize most"},
{"lineNum":" 1370","line":"/// the DwarfInfo fields before calling."},
{"lineNum":" 1371","line":"pub fn openDwarfDebugInfo(di: *DwarfInfo, allocator: mem.Allocator) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1372","line":"    try di.scanAllFunctions(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1373","line":"    try di.scanAllCompileUnits(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1374","line":"}"},
{"lineNum":" 1375","line":""},
{"lineNum":" 1376","line":"/// This function is to make it handy to comment out the return and make it"},
{"lineNum":" 1377","line":"/// into a crash when working on this file."},
{"lineNum":" 1378","line":"fn badDwarf() error{InvalidDebugInfo} {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1379","line":"    //std.os.abort(); // can be handy to uncomment when working on this file"},
{"lineNum":" 1380","line":"    return error.InvalidDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1381","line":"}"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"fn missingDwarf() error{MissingDebugInfo} {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1384","line":"    //std.os.abort(); // can be handy to uncomment when working on this file"},
{"lineNum":" 1385","line":"    return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1386","line":"}"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"fn getStringGeneric(opt_str: ?[]const u8, offset: u64) ![:0]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1389","line":"    const str = opt_str orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1390","line":"    if (offset > str.len) return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1391","line":"    const casted_offset = math.cast(usize, offset) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1392","line":"    // Valid strings always have a terminating zero byte"},
{"lineNum":" 1393","line":"    const last = mem.indexOfScalarPos(u8, str, casted_offset, 0) orelse return badDwarf();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1394","line":"    return str[casted_offset..last :0];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1395","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 572, "covered" : 0,};
var merged_data = [];
