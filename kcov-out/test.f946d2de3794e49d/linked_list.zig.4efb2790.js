var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const debug = std.debug;"},
{"lineNum":"    3","line":"const assert = debug.assert;"},
{"lineNum":"    4","line":"const testing = std.testing;"},
{"lineNum":"    5","line":""},
{"lineNum":"    6","line":"/// A singly-linked list is headed by a single forward pointer. The elements"},
{"lineNum":"    7","line":"/// are singly linked for minimum space and pointer manipulation overhead at"},
{"lineNum":"    8","line":"/// the expense of O(n) removal for arbitrary elements. New elements can be"},
{"lineNum":"    9","line":"/// added to the list after an existing element or at the head of the list."},
{"lineNum":"   10","line":"/// A singly-linked list may only be traversed in the forward direction."},
{"lineNum":"   11","line":"/// Singly-linked lists are ideal for applications with large datasets and"},
{"lineNum":"   12","line":"/// few or no removals or for implementing a LIFO queue."},
{"lineNum":"   13","line":"pub fn SinglyLinkedList(comptime T: type) type {"},
{"lineNum":"   14","line":"    return struct {"},
{"lineNum":"   15","line":"        const Self = @This();"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"        /// Node inside the linked list wrapping the actual data."},
{"lineNum":"   18","line":"        pub const Node = struct {"},
{"lineNum":"   19","line":"            next: ?*Node = null,"},
{"lineNum":"   20","line":"            data: T,"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"            pub const Data = T;"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"            /// Insert a new node after the current one."},
{"lineNum":"   25","line":"            ///"},
{"lineNum":"   26","line":"            /// Arguments:"},
{"lineNum":"   27","line":"            ///     new_node: Pointer to the new node to insert."},
{"lineNum":"   28","line":"            pub fn insertAfter(node: *Node, new_node: *Node) void {"},
{"lineNum":"   29","line":"                new_node.next = node.next;"},
{"lineNum":"   30","line":"                node.next = new_node;"},
{"lineNum":"   31","line":"            }"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"            /// Remove a node from the list."},
{"lineNum":"   34","line":"            ///"},
{"lineNum":"   35","line":"            /// Arguments:"},
{"lineNum":"   36","line":"            ///     node: Pointer to the node to be removed."},
{"lineNum":"   37","line":"            /// Returns:"},
{"lineNum":"   38","line":"            ///     node removed"},
{"lineNum":"   39","line":"            pub fn removeNext(node: *Node) ?*Node {"},
{"lineNum":"   40","line":"                const next_node = node.next orelse return null;"},
{"lineNum":"   41","line":"                node.next = next_node.next;"},
{"lineNum":"   42","line":"                return next_node;"},
{"lineNum":"   43","line":"            }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"            /// Iterate over the singly-linked list from this node, until the final node is found."},
{"lineNum":"   46","line":"            /// This operation is O(N)."},
{"lineNum":"   47","line":"            pub fn findLast(node: *Node) *Node {"},
{"lineNum":"   48","line":"                var it = node;"},
{"lineNum":"   49","line":"                while (true) {"},
{"lineNum":"   50","line":"                    it = it.next orelse return it;"},
{"lineNum":"   51","line":"                }"},
{"lineNum":"   52","line":"            }"},
{"lineNum":"   53","line":""},
{"lineNum":"   54","line":"            /// Iterate over each next node, returning the count of all nodes except the starting one."},
{"lineNum":"   55","line":"            /// This operation is O(N)."},
{"lineNum":"   56","line":"            pub fn countChildren(node: *const Node) usize {"},
{"lineNum":"   57","line":"                var count: usize = 0;"},
{"lineNum":"   58","line":"                var it: ?*const Node = node.next;"},
{"lineNum":"   59","line":"                while (it) |n| : (it = n.next) {"},
{"lineNum":"   60","line":"                    count += 1;"},
{"lineNum":"   61","line":"                }"},
{"lineNum":"   62","line":"                return count;"},
{"lineNum":"   63","line":"            }"},
{"lineNum":"   64","line":"        };"},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        first: ?*Node = null,"},
{"lineNum":"   67","line":""},
{"lineNum":"   68","line":"        /// Insert a new node at the head."},
{"lineNum":"   69","line":"        ///"},
{"lineNum":"   70","line":"        /// Arguments:"},
{"lineNum":"   71","line":"        ///     new_node: Pointer to the new node to insert."},
{"lineNum":"   72","line":"        pub fn prepend(list: *Self, new_node: *Node) void {","class":"lineCov","hits":"1","order":"1323","possible_hits":"1",},
{"lineNum":"   73","line":"            new_node.next = list.first;","class":"lineCov","hits":"1","order":"1324","possible_hits":"1",},
{"lineNum":"   74","line":"            list.first = new_node;","class":"lineCov","hits":"1","order":"1325","possible_hits":"1",},
{"lineNum":"   75","line":"        }"},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        /// Remove a node from the list."},
{"lineNum":"   78","line":"        ///"},
{"lineNum":"   79","line":"        /// Arguments:"},
{"lineNum":"   80","line":"        ///     node: Pointer to the node to be removed."},
{"lineNum":"   81","line":"        pub fn remove(list: *Self, node: *Node) void {"},
{"lineNum":"   82","line":"            if (list.first == node) {"},
{"lineNum":"   83","line":"                list.first = node.next;"},
{"lineNum":"   84","line":"            } else {"},
{"lineNum":"   85","line":"                var current_elm = list.first.?;"},
{"lineNum":"   86","line":"                while (current_elm.next != node) {"},
{"lineNum":"   87","line":"                    current_elm = current_elm.next.?;"},
{"lineNum":"   88","line":"                }"},
{"lineNum":"   89","line":"                current_elm.next = node.next;"},
{"lineNum":"   90","line":"            }"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        /// Remove and return the first node in the list."},
{"lineNum":"   94","line":"        ///"},
{"lineNum":"   95","line":"        /// Returns:"},
{"lineNum":"   96","line":"        ///     A pointer to the first node in the list."},
{"lineNum":"   97","line":"        pub fn popFirst(list: *Self) ?*Node {"},
{"lineNum":"   98","line":"            const first = list.first orelse return null;"},
{"lineNum":"   99","line":"            list.first = first.next;"},
{"lineNum":"  100","line":"            return first;"},
{"lineNum":"  101","line":"        }"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"        /// Iterate over all nodes, returning the count."},
{"lineNum":"  104","line":"        /// This operation is O(N)."},
{"lineNum":"  105","line":"        pub fn len(list: Self) usize {"},
{"lineNum":"  106","line":"            if (list.first) |n| {"},
{"lineNum":"  107","line":"                return 1 + n.countChildren();"},
{"lineNum":"  108","line":"            } else {"},
{"lineNum":"  109","line":"                return 0;"},
{"lineNum":"  110","line":"            }"},
{"lineNum":"  111","line":"        }"},
{"lineNum":"  112","line":"    };"},
{"lineNum":"  113","line":"}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"test \"basic SinglyLinkedList test\" {"},
{"lineNum":"  116","line":"    const L = SinglyLinkedList(u32);"},
{"lineNum":"  117","line":"    var list = L{};"},
{"lineNum":"  118","line":""},
{"lineNum":"  119","line":"    try testing.expect(list.len() == 0);"},
{"lineNum":"  120","line":""},
{"lineNum":"  121","line":"    var one = L.Node{ .data = 1 };"},
{"lineNum":"  122","line":"    var two = L.Node{ .data = 2 };"},
{"lineNum":"  123","line":"    var three = L.Node{ .data = 3 };"},
{"lineNum":"  124","line":"    var four = L.Node{ .data = 4 };"},
{"lineNum":"  125","line":"    var five = L.Node{ .data = 5 };"},
{"lineNum":"  126","line":""},
{"lineNum":"  127","line":"    list.prepend(&two); // {2}"},
{"lineNum":"  128","line":"    two.insertAfter(&five); // {2, 5}"},
{"lineNum":"  129","line":"    list.prepend(&one); // {1, 2, 5}"},
{"lineNum":"  130","line":"    two.insertAfter(&three); // {1, 2, 3, 5}"},
{"lineNum":"  131","line":"    three.insertAfter(&four); // {1, 2, 3, 4, 5}"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    try testing.expect(list.len() == 5);"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"    // Traverse forwards."},
{"lineNum":"  136","line":"    {"},
{"lineNum":"  137","line":"        var it = list.first;"},
{"lineNum":"  138","line":"        var index: u32 = 1;"},
{"lineNum":"  139","line":"        while (it) |node| : (it = node.next) {"},
{"lineNum":"  140","line":"            try testing.expect(node.data == index);"},
{"lineNum":"  141","line":"            index += 1;"},
{"lineNum":"  142","line":"        }"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    _ = list.popFirst(); // {2, 3, 4, 5}"},
{"lineNum":"  146","line":"    _ = list.remove(&five); // {2, 3, 4}"},
{"lineNum":"  147","line":"    _ = two.removeNext(); // {2, 4}"},
{"lineNum":"  148","line":""},
{"lineNum":"  149","line":"    try testing.expect(list.first.?.data == 2);"},
{"lineNum":"  150","line":"    try testing.expect(list.first.?.next.?.data == 4);"},
{"lineNum":"  151","line":"    try testing.expect(list.first.?.next.?.next == null);"},
{"lineNum":"  152","line":"}"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"/// A tail queue is headed by a pair of pointers, one to the head of the"},
{"lineNum":"  155","line":"/// list and the other to the tail of the list. The elements are doubly"},
{"lineNum":"  156","line":"/// linked so that an arbitrary element can be removed without a need to"},
{"lineNum":"  157","line":"/// traverse the list. New elements can be added to the list before or"},
{"lineNum":"  158","line":"/// after an existing element, at the head of the list, or at the end of"},
{"lineNum":"  159","line":"/// the list. A tail queue may be traversed in either direction."},
{"lineNum":"  160","line":"pub fn TailQueue(comptime T: type) type {"},
{"lineNum":"  161","line":"    return struct {"},
{"lineNum":"  162","line":"        const Self = @This();"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"        /// Node inside the linked list wrapping the actual data."},
{"lineNum":"  165","line":"        pub const Node = struct {"},
{"lineNum":"  166","line":"            prev: ?*Node = null,"},
{"lineNum":"  167","line":"            next: ?*Node = null,"},
{"lineNum":"  168","line":"            data: T,"},
{"lineNum":"  169","line":"        };"},
{"lineNum":"  170","line":""},
{"lineNum":"  171","line":"        first: ?*Node = null,"},
{"lineNum":"  172","line":"        last: ?*Node = null,"},
{"lineNum":"  173","line":"        len: usize = 0,"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        /// Insert a new node after an existing one."},
{"lineNum":"  176","line":"        ///"},
{"lineNum":"  177","line":"        /// Arguments:"},
{"lineNum":"  178","line":"        ///     node: Pointer to a node in the list."},
{"lineNum":"  179","line":"        ///     new_node: Pointer to the new node to insert."},
{"lineNum":"  180","line":"        pub fn insertAfter(list: *Self, node: *Node, new_node: *Node) void {"},
{"lineNum":"  181","line":"            new_node.prev = node;"},
{"lineNum":"  182","line":"            if (node.next) |next_node| {"},
{"lineNum":"  183","line":"                // Intermediate node."},
{"lineNum":"  184","line":"                new_node.next = next_node;"},
{"lineNum":"  185","line":"                next_node.prev = new_node;"},
{"lineNum":"  186","line":"            } else {"},
{"lineNum":"  187","line":"                // Last element of the list."},
{"lineNum":"  188","line":"                new_node.next = null;"},
{"lineNum":"  189","line":"                list.last = new_node;"},
{"lineNum":"  190","line":"            }"},
{"lineNum":"  191","line":"            node.next = new_node;"},
{"lineNum":"  192","line":""},
{"lineNum":"  193","line":"            list.len += 1;"},
{"lineNum":"  194","line":"        }"},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        /// Insert a new node before an existing one."},
{"lineNum":"  197","line":"        ///"},
{"lineNum":"  198","line":"        /// Arguments:"},
{"lineNum":"  199","line":"        ///     node: Pointer to a node in the list."},
{"lineNum":"  200","line":"        ///     new_node: Pointer to the new node to insert."},
{"lineNum":"  201","line":"        pub fn insertBefore(list: *Self, node: *Node, new_node: *Node) void {"},
{"lineNum":"  202","line":"            new_node.next = node;"},
{"lineNum":"  203","line":"            if (node.prev) |prev_node| {"},
{"lineNum":"  204","line":"                // Intermediate node."},
{"lineNum":"  205","line":"                new_node.prev = prev_node;"},
{"lineNum":"  206","line":"                prev_node.next = new_node;"},
{"lineNum":"  207","line":"            } else {"},
{"lineNum":"  208","line":"                // First element of the list."},
{"lineNum":"  209","line":"                new_node.prev = null;"},
{"lineNum":"  210","line":"                list.first = new_node;"},
{"lineNum":"  211","line":"            }"},
{"lineNum":"  212","line":"            node.prev = new_node;"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"            list.len += 1;"},
{"lineNum":"  215","line":"        }"},
{"lineNum":"  216","line":""},
{"lineNum":"  217","line":"        /// Concatenate list2 onto the end of list1, removing all entries from the former."},
{"lineNum":"  218","line":"        ///"},
{"lineNum":"  219","line":"        /// Arguments:"},
{"lineNum":"  220","line":"        ///     list1: the list to concatenate onto"},
{"lineNum":"  221","line":"        ///     list2: the list to be concatenated"},
{"lineNum":"  222","line":"        pub fn concatByMoving(list1: *Self, list2: *Self) void {"},
{"lineNum":"  223","line":"            const l2_first = list2.first orelse return;"},
{"lineNum":"  224","line":"            if (list1.last) |l1_last| {"},
{"lineNum":"  225","line":"                l1_last.next = list2.first;"},
{"lineNum":"  226","line":"                l2_first.prev = list1.last;"},
{"lineNum":"  227","line":"                list1.len += list2.len;"},
{"lineNum":"  228","line":"            } else {"},
{"lineNum":"  229","line":"                // list1 was empty"},
{"lineNum":"  230","line":"                list1.first = list2.first;"},
{"lineNum":"  231","line":"                list1.len = list2.len;"},
{"lineNum":"  232","line":"            }"},
{"lineNum":"  233","line":"            list1.last = list2.last;"},
{"lineNum":"  234","line":"            list2.first = null;"},
{"lineNum":"  235","line":"            list2.last = null;"},
{"lineNum":"  236","line":"            list2.len = 0;"},
{"lineNum":"  237","line":"        }"},
{"lineNum":"  238","line":""},
{"lineNum":"  239","line":"        /// Insert a new node at the end of the list."},
{"lineNum":"  240","line":"        ///"},
{"lineNum":"  241","line":"        /// Arguments:"},
{"lineNum":"  242","line":"        ///     new_node: Pointer to the new node to insert."},
{"lineNum":"  243","line":"        pub fn append(list: *Self, new_node: *Node) void {"},
{"lineNum":"  244","line":"            if (list.last) |last| {"},
{"lineNum":"  245","line":"                // Insert after last."},
{"lineNum":"  246","line":"                list.insertAfter(last, new_node);"},
{"lineNum":"  247","line":"            } else {"},
{"lineNum":"  248","line":"                // Empty list."},
{"lineNum":"  249","line":"                list.prepend(new_node);"},
{"lineNum":"  250","line":"            }"},
{"lineNum":"  251","line":"        }"},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"        /// Insert a new node at the beginning of the list."},
{"lineNum":"  254","line":"        ///"},
{"lineNum":"  255","line":"        /// Arguments:"},
{"lineNum":"  256","line":"        ///     new_node: Pointer to the new node to insert."},
{"lineNum":"  257","line":"        pub fn prepend(list: *Self, new_node: *Node) void {"},
{"lineNum":"  258","line":"            if (list.first) |first| {"},
{"lineNum":"  259","line":"                // Insert before first."},
{"lineNum":"  260","line":"                list.insertBefore(first, new_node);"},
{"lineNum":"  261","line":"            } else {"},
{"lineNum":"  262","line":"                // Empty list."},
{"lineNum":"  263","line":"                list.first = new_node;"},
{"lineNum":"  264","line":"                list.last = new_node;"},
{"lineNum":"  265","line":"                new_node.prev = null;"},
{"lineNum":"  266","line":"                new_node.next = null;"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"                list.len = 1;"},
{"lineNum":"  269","line":"            }"},
{"lineNum":"  270","line":"        }"},
{"lineNum":"  271","line":""},
{"lineNum":"  272","line":"        /// Remove a node from the list."},
{"lineNum":"  273","line":"        ///"},
{"lineNum":"  274","line":"        /// Arguments:"},
{"lineNum":"  275","line":"        ///     node: Pointer to the node to be removed."},
{"lineNum":"  276","line":"        pub fn remove(list: *Self, node: *Node) void {"},
{"lineNum":"  277","line":"            if (node.prev) |prev_node| {"},
{"lineNum":"  278","line":"                // Intermediate node."},
{"lineNum":"  279","line":"                prev_node.next = node.next;"},
{"lineNum":"  280","line":"            } else {"},
{"lineNum":"  281","line":"                // First element of the list."},
{"lineNum":"  282","line":"                list.first = node.next;"},
{"lineNum":"  283","line":"            }"},
{"lineNum":"  284","line":""},
{"lineNum":"  285","line":"            if (node.next) |next_node| {"},
{"lineNum":"  286","line":"                // Intermediate node."},
{"lineNum":"  287","line":"                next_node.prev = node.prev;"},
{"lineNum":"  288","line":"            } else {"},
{"lineNum":"  289","line":"                // Last element of the list."},
{"lineNum":"  290","line":"                list.last = node.prev;"},
{"lineNum":"  291","line":"            }"},
{"lineNum":"  292","line":""},
{"lineNum":"  293","line":"            list.len -= 1;"},
{"lineNum":"  294","line":"            assert(list.len == 0 or (list.first != null and list.last != null));"},
{"lineNum":"  295","line":"        }"},
{"lineNum":"  296","line":""},
{"lineNum":"  297","line":"        /// Remove and return the last node in the list."},
{"lineNum":"  298","line":"        ///"},
{"lineNum":"  299","line":"        /// Returns:"},
{"lineNum":"  300","line":"        ///     A pointer to the last node in the list."},
{"lineNum":"  301","line":"        pub fn pop(list: *Self) ?*Node {"},
{"lineNum":"  302","line":"            const last = list.last orelse return null;"},
{"lineNum":"  303","line":"            list.remove(last);"},
{"lineNum":"  304","line":"            return last;"},
{"lineNum":"  305","line":"        }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"        /// Remove and return the first node in the list."},
{"lineNum":"  308","line":"        ///"},
{"lineNum":"  309","line":"        /// Returns:"},
{"lineNum":"  310","line":"        ///     A pointer to the first node in the list."},
{"lineNum":"  311","line":"        pub fn popFirst(list: *Self) ?*Node {"},
{"lineNum":"  312","line":"            const first = list.first orelse return null;"},
{"lineNum":"  313","line":"            list.remove(first);"},
{"lineNum":"  314","line":"            return first;"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":"    };"},
{"lineNum":"  317","line":"}"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"test \"basic TailQueue test\" {"},
{"lineNum":"  320","line":"    const L = TailQueue(u32);"},
{"lineNum":"  321","line":"    var list = L{};"},
{"lineNum":"  322","line":""},
{"lineNum":"  323","line":"    var one = L.Node{ .data = 1 };"},
{"lineNum":"  324","line":"    var two = L.Node{ .data = 2 };"},
{"lineNum":"  325","line":"    var three = L.Node{ .data = 3 };"},
{"lineNum":"  326","line":"    var four = L.Node{ .data = 4 };"},
{"lineNum":"  327","line":"    var five = L.Node{ .data = 5 };"},
{"lineNum":"  328","line":""},
{"lineNum":"  329","line":"    list.append(&two); // {2}"},
{"lineNum":"  330","line":"    list.append(&five); // {2, 5}"},
{"lineNum":"  331","line":"    list.prepend(&one); // {1, 2, 5}"},
{"lineNum":"  332","line":"    list.insertBefore(&five, &four); // {1, 2, 4, 5}"},
{"lineNum":"  333","line":"    list.insertAfter(&two, &three); // {1, 2, 3, 4, 5}"},
{"lineNum":"  334","line":""},
{"lineNum":"  335","line":"    // Traverse forwards."},
{"lineNum":"  336","line":"    {"},
{"lineNum":"  337","line":"        var it = list.first;"},
{"lineNum":"  338","line":"        var index: u32 = 1;"},
{"lineNum":"  339","line":"        while (it) |node| : (it = node.next) {"},
{"lineNum":"  340","line":"            try testing.expect(node.data == index);"},
{"lineNum":"  341","line":"            index += 1;"},
{"lineNum":"  342","line":"        }"},
{"lineNum":"  343","line":"    }"},
{"lineNum":"  344","line":""},
{"lineNum":"  345","line":"    // Traverse backwards."},
{"lineNum":"  346","line":"    {"},
{"lineNum":"  347","line":"        var it = list.last;"},
{"lineNum":"  348","line":"        var index: u32 = 1;"},
{"lineNum":"  349","line":"        while (it) |node| : (it = node.prev) {"},
{"lineNum":"  350","line":"            try testing.expect(node.data == (6 - index));"},
{"lineNum":"  351","line":"            index += 1;"},
{"lineNum":"  352","line":"        }"},
{"lineNum":"  353","line":"    }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    _ = list.popFirst(); // {2, 3, 4, 5}"},
{"lineNum":"  356","line":"    _ = list.pop(); // {2, 3, 4}"},
{"lineNum":"  357","line":"    list.remove(&three); // {2, 4}"},
{"lineNum":"  358","line":""},
{"lineNum":"  359","line":"    try testing.expect(list.first.?.data == 2);"},
{"lineNum":"  360","line":"    try testing.expect(list.last.?.data == 4);"},
{"lineNum":"  361","line":"    try testing.expect(list.len == 2);"},
{"lineNum":"  362","line":"}"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"test \"TailQueue concatenation\" {"},
{"lineNum":"  365","line":"    const L = TailQueue(u32);"},
{"lineNum":"  366","line":"    var list1 = L{};"},
{"lineNum":"  367","line":"    var list2 = L{};"},
{"lineNum":"  368","line":""},
{"lineNum":"  369","line":"    var one = L.Node{ .data = 1 };"},
{"lineNum":"  370","line":"    var two = L.Node{ .data = 2 };"},
{"lineNum":"  371","line":"    var three = L.Node{ .data = 3 };"},
{"lineNum":"  372","line":"    var four = L.Node{ .data = 4 };"},
{"lineNum":"  373","line":"    var five = L.Node{ .data = 5 };"},
{"lineNum":"  374","line":""},
{"lineNum":"  375","line":"    list1.append(&one);"},
{"lineNum":"  376","line":"    list1.append(&two);"},
{"lineNum":"  377","line":"    list2.append(&three);"},
{"lineNum":"  378","line":"    list2.append(&four);"},
{"lineNum":"  379","line":"    list2.append(&five);"},
{"lineNum":"  380","line":""},
{"lineNum":"  381","line":"    list1.concatByMoving(&list2);"},
{"lineNum":"  382","line":""},
{"lineNum":"  383","line":"    try testing.expect(list1.last == &five);"},
{"lineNum":"  384","line":"    try testing.expect(list1.len == 5);"},
{"lineNum":"  385","line":"    try testing.expect(list2.first == null);"},
{"lineNum":"  386","line":"    try testing.expect(list2.last == null);"},
{"lineNum":"  387","line":"    try testing.expect(list2.len == 0);"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"    // Traverse forwards."},
{"lineNum":"  390","line":"    {"},
{"lineNum":"  391","line":"        var it = list1.first;"},
{"lineNum":"  392","line":"        var index: u32 = 1;"},
{"lineNum":"  393","line":"        while (it) |node| : (it = node.next) {"},
{"lineNum":"  394","line":"            try testing.expect(node.data == index);"},
{"lineNum":"  395","line":"            index += 1;"},
{"lineNum":"  396","line":"        }"},
{"lineNum":"  397","line":"    }"},
{"lineNum":"  398","line":""},
{"lineNum":"  399","line":"    // Traverse backwards."},
{"lineNum":"  400","line":"    {"},
{"lineNum":"  401","line":"        var it = list1.last;"},
{"lineNum":"  402","line":"        var index: u32 = 1;"},
{"lineNum":"  403","line":"        while (it) |node| : (it = node.prev) {"},
{"lineNum":"  404","line":"            try testing.expect(node.data == (6 - index));"},
{"lineNum":"  405","line":"            index += 1;"},
{"lineNum":"  406","line":"        }"},
{"lineNum":"  407","line":"    }"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    // Swap them back, this verifies that concating to an empty list works."},
{"lineNum":"  410","line":"    list2.concatByMoving(&list1);"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    // Traverse forwards."},
{"lineNum":"  413","line":"    {"},
{"lineNum":"  414","line":"        var it = list2.first;"},
{"lineNum":"  415","line":"        var index: u32 = 1;"},
{"lineNum":"  416","line":"        while (it) |node| : (it = node.next) {"},
{"lineNum":"  417","line":"            try testing.expect(node.data == index);"},
{"lineNum":"  418","line":"            index += 1;"},
{"lineNum":"  419","line":"        }"},
{"lineNum":"  420","line":"    }"},
{"lineNum":"  421","line":""},
{"lineNum":"  422","line":"    // Traverse backwards."},
{"lineNum":"  423","line":"    {"},
{"lineNum":"  424","line":"        var it = list2.last;"},
{"lineNum":"  425","line":"        var index: u32 = 1;"},
{"lineNum":"  426","line":"        while (it) |node| : (it = node.prev) {"},
{"lineNum":"  427","line":"            try testing.expect(node.data == (6 - index));"},
{"lineNum":"  428","line":"            index += 1;"},
{"lineNum":"  429","line":"        }"},
{"lineNum":"  430","line":"    }"},
{"lineNum":"  431","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 3, "covered" : 3,};
var merged_data = [];
