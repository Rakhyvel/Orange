var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const math = std.math;"},
{"lineNum":"    4","line":"const mem = std.mem;"},
{"lineNum":"    5","line":"const io = std.io;"},
{"lineNum":"    6","line":"const os = std.os;"},
{"lineNum":"    7","line":"const fs = std.fs;"},
{"lineNum":"    8","line":"const process = std.process;"},
{"lineNum":"    9","line":"const testing = std.testing;"},
{"lineNum":"   10","line":"const elf = std.elf;"},
{"lineNum":"   11","line":"const DW = std.dwarf;"},
{"lineNum":"   12","line":"const macho = std.macho;"},
{"lineNum":"   13","line":"const coff = std.coff;"},
{"lineNum":"   14","line":"const pdb = std.pdb;"},
{"lineNum":"   15","line":"const ArrayList = std.ArrayList;"},
{"lineNum":"   16","line":"const root = @import(\"root\");"},
{"lineNum":"   17","line":"const maxInt = std.math.maxInt;"},
{"lineNum":"   18","line":"const File = std.fs.File;"},
{"lineNum":"   19","line":"const windows = std.os.windows;"},
{"lineNum":"   20","line":"const native_arch = builtin.cpu.arch;"},
{"lineNum":"   21","line":"const native_os = builtin.os.tag;"},
{"lineNum":"   22","line":"const native_endian = native_arch.endian();"},
{"lineNum":"   23","line":""},
{"lineNum":"   24","line":"pub const runtime_safety = switch (builtin.mode) {"},
{"lineNum":"   25","line":"    .Debug, .ReleaseSafe => true,"},
{"lineNum":"   26","line":"    .ReleaseFast, .ReleaseSmall => false,"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"pub const sys_can_stack_trace = switch (builtin.cpu.arch) {"},
{"lineNum":"   30","line":"    // Observed to go into an infinite loop."},
{"lineNum":"   31","line":"    // TODO: Make this work."},
{"lineNum":"   32","line":"    .mips,"},
{"lineNum":"   33","line":"    .mipsel,"},
{"lineNum":"   34","line":"    => false,"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    // `@returnAddress()` in LLVM 10 gives"},
{"lineNum":"   37","line":"    // \"Non-Emscripten WebAssembly hasn\'t implemented __builtin_return_address\"."},
{"lineNum":"   38","line":"    .wasm32,"},
{"lineNum":"   39","line":"    .wasm64,"},
{"lineNum":"   40","line":"    => builtin.os.tag == .emscripten,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    // `@returnAddress()` is unsupported in LLVM 13."},
{"lineNum":"   43","line":"    .bpfel,"},
{"lineNum":"   44","line":"    .bpfeb,"},
{"lineNum":"   45","line":"    => false,"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    else => true,"},
{"lineNum":"   48","line":"};"},
{"lineNum":"   49","line":""},
{"lineNum":"   50","line":"pub const LineInfo = struct {"},
{"lineNum":"   51","line":"    line: u64,"},
{"lineNum":"   52","line":"    column: u64,"},
{"lineNum":"   53","line":"    file_name: []const u8,"},
{"lineNum":"   54","line":""},
{"lineNum":"   55","line":"    pub fn deinit(self: LineInfo, allocator: mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"        allocator.free(self.file_name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   57","line":"    }"},
{"lineNum":"   58","line":"};"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"pub const SymbolInfo = struct {"},
{"lineNum":"   61","line":"    symbol_name: []const u8 = \"???\","},
{"lineNum":"   62","line":"    compile_unit_name: []const u8 = \"???\","},
{"lineNum":"   63","line":"    line_info: ?LineInfo = null,"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"    pub fn deinit(self: SymbolInfo, allocator: mem.Allocator) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   66","line":"        if (self.line_info) |li| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   67","line":"            li.deinit(allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"        }"},
{"lineNum":"   69","line":"    }"},
{"lineNum":"   70","line":"};"},
{"lineNum":"   71","line":"const PdbOrDwarf = union(enum) {"},
{"lineNum":"   72","line":"    pdb: pdb.Pdb,"},
{"lineNum":"   73","line":"    dwarf: DW.DwarfInfo,"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    fn deinit(self: *PdbOrDwarf, allocator: mem.Allocator) void {"},
{"lineNum":"   76","line":"        switch (self.*) {"},
{"lineNum":"   77","line":"            .pdb => |*inner| inner.deinit(),"},
{"lineNum":"   78","line":"            .dwarf => |*inner| inner.deinit(allocator),"},
{"lineNum":"   79","line":"        }"},
{"lineNum":"   80","line":"    }"},
{"lineNum":"   81","line":"};"},
{"lineNum":"   82","line":""},
{"lineNum":"   83","line":"var stderr_mutex = std.Thread.Mutex{};"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"pub const warn = @compileError(\"deprecated; use `std.log` functions for logging or `std.debug.print` for \'printf debugging\'\");"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"/// Print to stderr, unbuffered, and silently returning on failure. Intended"},
{"lineNum":"   88","line":"/// for use in \"printf debugging.\" Use `std.log` functions for proper logging."},
{"lineNum":"   89","line":"pub fn print(comptime fmt: []const u8, args: anytype) void {","class":"linePartCov","hits":"1","order":"2083","possible_hits":"35",},
{"lineNum":"   90","line":"    stderr_mutex.lock();","class":"linePartCov","hits":"1","order":"2084","possible_hits":"35",},
{"lineNum":"   91","line":"    defer stderr_mutex.unlock();","class":"lineNoCov","hits":"0","possible_hits":"35",},
{"lineNum":"   92","line":"    const stderr = io.getStdErr().writer();","class":"linePartCov","hits":"1","order":"2085","possible_hits":"35",},
{"lineNum":"   93","line":"    nosuspend stderr.print(fmt, args) catch return;","class":"linePartCov","hits":"1","order":"2088","possible_hits":"35",},
{"lineNum":"   94","line":"}"},
{"lineNum":"   95","line":""},
{"lineNum":"   96","line":"pub fn getStderrMutex() *std.Thread.Mutex {"},
{"lineNum":"   97","line":"    return &stderr_mutex;"},
{"lineNum":"   98","line":"}"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"/// TODO multithreaded awareness"},
{"lineNum":"  101","line":"var self_debug_info: ?DebugInfo = null;"},
{"lineNum":"  102","line":""},
{"lineNum":"  103","line":"pub fn getSelfDebugInfo() !*DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"    if (self_debug_info) |*info| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"        return info;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"    } else {"},
{"lineNum":"  107","line":"        self_debug_info = try openSelfDebugInfo(getDebugInfoAllocator());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"        return &self_debug_info.?;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":"}"},
{"lineNum":"  111","line":""},
{"lineNum":"  112","line":"pub fn detectTTYConfig(file: std.fs.File) TTY.Config {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"    if (builtin.os.tag == .wasi) {"},
{"lineNum":"  114","line":"        // Per https://github.com/WebAssembly/WASI/issues/162 ANSI codes"},
{"lineNum":"  115","line":"        // aren\'t currently supported."},
{"lineNum":"  116","line":"        return .no_color;"},
{"lineNum":"  117","line":"    } else if (process.hasEnvVarConstant(\"ZIG_DEBUG_COLOR\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"        return .escape_codes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"    } else if (process.hasEnvVarConstant(\"NO_COLOR\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  120","line":"        return .no_color;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"    } else if (file.supportsAnsiEscapeCodes()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  122","line":"        return .escape_codes;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"    } else if (native_os == .windows and file.isTty()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"        var info: windows.CONSOLE_SCREEN_BUFFER_INFO = undefined;"},
{"lineNum":"  125","line":"        if (windows.kernel32.GetConsoleScreenBufferInfo(file.handle, &info) != windows.TRUE) {"},
{"lineNum":"  126","line":"            // TODO: Should this return an error instead?"},
{"lineNum":"  127","line":"            return .no_color;"},
{"lineNum":"  128","line":"        }"},
{"lineNum":"  129","line":"        return .{ .windows_api = .{"},
{"lineNum":"  130","line":"            .handle = file.handle,"},
{"lineNum":"  131","line":"            .reset_attributes = info.wAttributes,"},
{"lineNum":"  132","line":"        } };"},
{"lineNum":"  133","line":"    }"},
{"lineNum":"  134","line":"    return .no_color;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  135","line":"}"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"/// Tries to print the current stack trace to stderr, unbuffered, and ignores any error returned."},
{"lineNum":"  138","line":"/// TODO multithreaded awareness"},
{"lineNum":"  139","line":"pub fn dumpCurrentStackTrace(start_addr: ?usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  140","line":"    nosuspend {"},
{"lineNum":"  141","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  142","line":"            if (native_os == .wasi) {"},
{"lineNum":"  143","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  144","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":"            return;"},
{"lineNum":"  147","line":"        }"},
{"lineNum":"  148","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  150","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  151","line":"            return;"},
{"lineNum":"  152","line":"        }"},
{"lineNum":"  153","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  155","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"        };"},
{"lineNum":"  157","line":"        writeCurrentStackTrace(stderr, debug_info, detectTTYConfig(io.getStdErr()), start_addr) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"            stderr.print(\"Unable to dump stack trace: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"        };"},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":"}"},
{"lineNum":"  163","line":""},
{"lineNum":"  164","line":"/// Tries to print the stack trace starting from the supplied base pointer to stderr,"},
{"lineNum":"  165","line":"/// unbuffered, and ignores any error returned."},
{"lineNum":"  166","line":"/// TODO multithreaded awareness"},
{"lineNum":"  167","line":"pub fn dumpStackTraceFromBase(bp: usize, ip: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"    nosuspend {"},
{"lineNum":"  169","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  170","line":"            if (native_os == .wasi) {"},
{"lineNum":"  171","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  172","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  173","line":"            }"},
{"lineNum":"  174","line":"            return;"},
{"lineNum":"  175","line":"        }"},
{"lineNum":"  176","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  178","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  179","line":"            return;"},
{"lineNum":"  180","line":"        }"},
{"lineNum":"  181","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"        };"},
{"lineNum":"  185","line":"        const tty_config = detectTTYConfig(io.getStdErr());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"        printSourceAtAddress(debug_info, stderr, ip, tty_config) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"        var it = StackIterator.init(null, bp);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"        while (it.next()) |return_address| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"            // On arm64 macOS, the address of the last frame is 0x0 rather than 0x1 as on x86_64 macOS,"},
{"lineNum":"  190","line":"            // therefore, we do a check for `return_address == 0` before subtracting 1 from it to avoid"},
{"lineNum":"  191","line":"            // an overflow. We do not need to signal `StackIterator` as it will correctly detect this"},
{"lineNum":"  192","line":"            // condition on the subsequent iteration and return `null` thus terminating the loop."},
{"lineNum":"  193","line":"            // same behaviour for x86-windows-msvc"},
{"lineNum":"  194","line":"            const address = if (return_address == 0) return_address else return_address - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  195","line":"            printSourceAtAddress(debug_info, stderr, address, tty_config) catch return;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  196","line":"        }"},
{"lineNum":"  197","line":"    }"},
{"lineNum":"  198","line":"}"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"/// Returns a slice with the same pointer as addresses, with a potentially smaller len."},
{"lineNum":"  201","line":"/// On Windows, when first_address is not null, we ask for at least 32 stack frames,"},
{"lineNum":"  202","line":"/// and then try to find the first address. If addresses.len is more than 32, we"},
{"lineNum":"  203","line":"/// capture that many stack frames exactly, and then look for the first address,"},
{"lineNum":"  204","line":"/// chopping off the irrelevant frames and shifting so that the returned addresses pointer"},
{"lineNum":"  205","line":"/// equals the passed in addresses pointer."},
{"lineNum":"  206","line":"pub fn captureStackTrace(first_address: ?usize, stack_trace: *std.builtin.StackTrace) void {","class":"lineCov","hits":"1","order":"923","possible_hits":"1",},
{"lineNum":"  207","line":"    if (native_os == .windows) {"},
{"lineNum":"  208","line":"        const addrs = stack_trace.instruction_addresses;"},
{"lineNum":"  209","line":"        const first_addr = first_address orelse {"},
{"lineNum":"  210","line":"            stack_trace.index = walkStackWindows(addrs[0..]);"},
{"lineNum":"  211","line":"            return;"},
{"lineNum":"  212","line":"        };"},
{"lineNum":"  213","line":"        var addr_buf_stack: [32]usize = undefined;"},
{"lineNum":"  214","line":"        const addr_buf = if (addr_buf_stack.len > addrs.len) addr_buf_stack[0..] else addrs;"},
{"lineNum":"  215","line":"        const n = walkStackWindows(addr_buf[0..]);"},
{"lineNum":"  216","line":"        const first_index = for (addr_buf[0..n], 0..) |addr, i| {"},
{"lineNum":"  217","line":"            if (addr == first_addr) {"},
{"lineNum":"  218","line":"                break i;"},
{"lineNum":"  219","line":"            }"},
{"lineNum":"  220","line":"        } else {"},
{"lineNum":"  221","line":"            stack_trace.index = 0;"},
{"lineNum":"  222","line":"            return;"},
{"lineNum":"  223","line":"        };"},
{"lineNum":"  224","line":"        const end_index = math.min(first_index + addrs.len, n);"},
{"lineNum":"  225","line":"        const slice = addr_buf[first_index..end_index];"},
{"lineNum":"  226","line":"        // We use a for loop here because slice and addrs may alias."},
{"lineNum":"  227","line":"        for (slice, 0..) |addr, i| {"},
{"lineNum":"  228","line":"            addrs[i] = addr;"},
{"lineNum":"  229","line":"        }"},
{"lineNum":"  230","line":"        stack_trace.index = slice.len;"},
{"lineNum":"  231","line":"    } else {"},
{"lineNum":"  232","line":"        var it = StackIterator.init(first_address, null);","class":"lineCov","hits":"1","order":"924","possible_hits":"1",},
{"lineNum":"  233","line":"        for (stack_trace.instruction_addresses, 0..) |*addr, i| {","class":"lineCov","hits":"1","order":"927","possible_hits":"1",},
{"lineNum":"  234","line":"            addr.* = it.next() orelse {","class":"lineCov","hits":"2","order":"928","possible_hits":"2",},
{"lineNum":"  235","line":"                stack_trace.index = i;","class":"lineCov","hits":"1","order":"1595","possible_hits":"1",},
{"lineNum":"  236","line":"                return;","class":"lineCov","hits":"2","order":"958","possible_hits":"2",},
{"lineNum":"  237","line":"            };"},
{"lineNum":"  238","line":"        }"},
{"lineNum":"  239","line":"        stack_trace.index = stack_trace.instruction_addresses.len;","class":"lineCov","hits":"1","order":"959","possible_hits":"1",},
{"lineNum":"  240","line":"    }"},
{"lineNum":"  241","line":"}"},
{"lineNum":"  242","line":""},
{"lineNum":"  243","line":"/// Tries to print a stack trace to stderr, unbuffered, and ignores any error returned."},
{"lineNum":"  244","line":"/// TODO multithreaded awareness"},
{"lineNum":"  245","line":"pub fn dumpStackTrace(stack_trace: std.builtin.StackTrace) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"    nosuspend {"},
{"lineNum":"  247","line":"        if (comptime builtin.target.isWasm()) {"},
{"lineNum":"  248","line":"            if (native_os == .wasi) {"},
{"lineNum":"  249","line":"                const stderr = io.getStdErr().writer();"},
{"lineNum":"  250","line":"                stderr.print(\"Unable to dump stack trace: not implemented for Wasm\\n\", .{}) catch return;"},
{"lineNum":"  251","line":"            }"},
{"lineNum":"  252","line":"            return;"},
{"lineNum":"  253","line":"        }"},
{"lineNum":"  254","line":"        const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"        if (builtin.strip_debug_info) {"},
{"lineNum":"  256","line":"            stderr.print(\"Unable to dump stack trace: debug info stripped\\n\", .{}) catch return;"},
{"lineNum":"  257","line":"            return;"},
{"lineNum":"  258","line":"        }"},
{"lineNum":"  259","line":"        const debug_info = getSelfDebugInfo() catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"            stderr.print(\"Unable to dump stack trace: Unable to open debug info: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"        };"},
{"lineNum":"  263","line":"        writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, detectTTYConfig(io.getStdErr())) catch |err| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"            stderr.print(\"Unable to dump stack trace: {s}\\n\", .{@errorName(err)}) catch return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"            return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  266","line":"        };"},
{"lineNum":"  267","line":"    }"},
{"lineNum":"  268","line":"}"},
{"lineNum":"  269","line":""},
{"lineNum":"  270","line":"/// This function invokes undefined behavior when `ok` is `false`."},
{"lineNum":"  271","line":"/// In Debug and ReleaseSafe modes, calls to this function are always"},
{"lineNum":"  272","line":"/// generated, and the `unreachable` statement triggers a panic."},
{"lineNum":"  273","line":"/// In ReleaseFast and ReleaseSmall modes, calls to this function are"},
{"lineNum":"  274","line":"/// optimized away, and in fact the optimizer is able to use the assertion"},
{"lineNum":"  275","line":"/// in its heuristics."},
{"lineNum":"  276","line":"/// Inside a test block, it is best to use the `std.testing` module rather"},
{"lineNum":"  277","line":"/// than this function, because this function may not detect a test failure"},
{"lineNum":"  278","line":"/// in ReleaseFast and ReleaseSmall mode. Outside of a test block, this assert"},
{"lineNum":"  279","line":"/// function is the correct function to use."},
{"lineNum":"  280","line":"pub fn assert(ok: bool) void {","class":"lineCov","hits":"1","order":"53","possible_hits":"1",},
{"lineNum":"  281","line":"    if (!ok) unreachable; // assertion failure","class":"lineCov","hits":"1","order":"54","possible_hits":"1",},
{"lineNum":"  282","line":"}"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"pub fn panic(comptime format: []const u8, args: anytype) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"    @setCold(true);"},
{"lineNum":"  286","line":""},
{"lineNum":"  287","line":"    panicExtra(null, null, format, args);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"}"},
{"lineNum":"  289","line":""},
{"lineNum":"  290","line":"/// `panicExtra` is useful when you want to print out an `@errorReturnTrace`"},
{"lineNum":"  291","line":"/// and also print out some values."},
{"lineNum":"  292","line":"pub fn panicExtra("},
{"lineNum":"  293","line":"    trace: ?*std.builtin.StackTrace,"},
{"lineNum":"  294","line":"    ret_addr: ?usize,"},
{"lineNum":"  295","line":"    comptime format: []const u8,"},
{"lineNum":"  296","line":"    args: anytype,"},
{"lineNum":"  297","line":") noreturn {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  298","line":"    @setCold(true);"},
{"lineNum":"  299","line":""},
{"lineNum":"  300","line":"    const size = 0x1000;"},
{"lineNum":"  301","line":"    const trunc_msg = \"(msg truncated)\";","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  302","line":"    var buf: [size + trunc_msg.len]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  303","line":"    // a minor annoyance with this is that it will result in the NoSpaceLeft"},
{"lineNum":"  304","line":"    // error being part of the @panic stack trace (but that error should"},
{"lineNum":"  305","line":"    // only happen rarely)"},
{"lineNum":"  306","line":"    const msg = std.fmt.bufPrint(buf[0..size], format, args) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"14",},
{"lineNum":"  307","line":"        std.fmt.BufPrintError.NoSpaceLeft => blk: {"},
{"lineNum":"  308","line":"            std.mem.copy(u8, buf[size..], trunc_msg);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  309","line":"            break :blk &buf;"},
{"lineNum":"  310","line":"        },"},
{"lineNum":"  311","line":"    };"},
{"lineNum":"  312","line":"    std.builtin.panic(msg, trace, ret_addr);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"  313","line":"}"},
{"lineNum":"  314","line":""},
{"lineNum":"  315","line":"/// Non-zero whenever the program triggered a panic."},
{"lineNum":"  316","line":"/// The counter is incremented/decremented atomically."},
{"lineNum":"  317","line":"var panicking = std.atomic.Atomic(u8).init(0);"},
{"lineNum":"  318","line":""},
{"lineNum":"  319","line":"// Locked to avoid interleaving panic messages from multiple threads."},
{"lineNum":"  320","line":"var panic_mutex = std.Thread.Mutex{};"},
{"lineNum":"  321","line":""},
{"lineNum":"  322","line":"/// Counts how many times the panic handler is invoked by this thread."},
{"lineNum":"  323","line":"/// This is used to catch and handle panics triggered by the panic handler."},
{"lineNum":"  324","line":"threadlocal var panic_stage: usize = 0;"},
{"lineNum":"  325","line":""},
{"lineNum":"  326","line":"// `panicImpl` could be useful in implementing a custom panic handler which"},
{"lineNum":"  327","line":"// calls the default handler (on supported platforms)"},
{"lineNum":"  328","line":"pub fn panicImpl(trace: ?*const std.builtin.StackTrace, first_trace_addr: ?usize, msg: []const u8) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"    @setCold(true);"},
{"lineNum":"  330","line":""},
{"lineNum":"  331","line":"    if (enable_segfault_handler) {"},
{"lineNum":"  332","line":"        // If a segfault happens while panicking, we want it to actually segfault, not trigger"},
{"lineNum":"  333","line":"        // the handler."},
{"lineNum":"  334","line":"        resetSegfaultHandler();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  335","line":"    }"},
{"lineNum":"  336","line":""},
{"lineNum":"  337","line":"    // Note there is similar logic in handleSegfaultPosix and handleSegfaultWindowsExtra."},
{"lineNum":"  338","line":"    nosuspend switch (panic_stage) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  339","line":"        0 => {"},
{"lineNum":"  340","line":"            panic_stage = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  341","line":""},
{"lineNum":"  342","line":"            _ = panicking.fetchAdd(1, .SeqCst);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  343","line":""},
{"lineNum":"  344","line":"            // Make sure to release the mutex when done"},
{"lineNum":"  345","line":"            {"},
{"lineNum":"  346","line":"                panic_mutex.lock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  347","line":"                defer panic_mutex.unlock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  348","line":""},
{"lineNum":"  349","line":"                const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  350","line":"                if (builtin.single_threaded) {"},
{"lineNum":"  351","line":"                    stderr.print(\"panic: \", .{}) catch os.abort();"},
{"lineNum":"  352","line":"                } else {"},
{"lineNum":"  353","line":"                    const current_thread_id = std.Thread.getCurrentId();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  354","line":"                    stderr.print(\"thread {} panic: \", .{current_thread_id}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  355","line":"                }"},
{"lineNum":"  356","line":"                stderr.print(\"{s}\\n\", .{msg}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  357","line":"                if (trace) |t| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  358","line":"                    dumpStackTrace(t.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  359","line":"                }"},
{"lineNum":"  360","line":"                dumpCurrentStackTrace(first_trace_addr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  361","line":"            }"},
{"lineNum":"  362","line":""},
{"lineNum":"  363","line":"            waitForOtherThreadToFinishPanicking();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  364","line":"        },"},
{"lineNum":"  365","line":"        1 => {"},
{"lineNum":"  366","line":"            panic_stage = 2;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  367","line":""},
{"lineNum":"  368","line":"            // A panic happened while trying to print a previous panic message,"},
{"lineNum":"  369","line":"            // we\'re still holding the mutex but that\'s fine as we\'re going to"},
{"lineNum":"  370","line":"            // call abort()"},
{"lineNum":"  371","line":"            const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  372","line":"            stderr.print(\"Panicked during a panic. Aborting.\\n\", .{}) catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  373","line":"        },"},
{"lineNum":"  374","line":"        else => {"},
{"lineNum":"  375","line":"            // Panicked while printing \"Panicked during a panic.\""},
{"lineNum":"  376","line":"        },"},
{"lineNum":"  377","line":"    };"},
{"lineNum":"  378","line":""},
{"lineNum":"  379","line":"    os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  380","line":"}"},
{"lineNum":"  381","line":""},
{"lineNum":"  382","line":"/// Must be called only after adding 1 to `panicking`. There are three callsites."},
{"lineNum":"  383","line":"fn waitForOtherThreadToFinishPanicking() void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  384","line":"    if (panicking.fetchSub(1, .SeqCst) != 1) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  385","line":"        // Another thread is panicking, wait for the last one to finish"},
{"lineNum":"  386","line":"        // and call abort()"},
{"lineNum":"  387","line":"        if (builtin.single_threaded) unreachable;"},
{"lineNum":"  388","line":""},
{"lineNum":"  389","line":"        // Sleep forever without hammering the CPU"},
{"lineNum":"  390","line":"        var futex = std.atomic.Atomic(u32).init(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  391","line":"        while (true) std.Thread.Futex.wait(&futex, 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  392","line":"        unreachable;"},
{"lineNum":"  393","line":"    }"},
{"lineNum":"  394","line":"}"},
{"lineNum":"  395","line":""},
{"lineNum":"  396","line":"pub fn writeStackTrace("},
{"lineNum":"  397","line":"    stack_trace: std.builtin.StackTrace,"},
{"lineNum":"  398","line":"    out_stream: anytype,"},
{"lineNum":"  399","line":"    allocator: mem.Allocator,"},
{"lineNum":"  400","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  401","line":"    tty_config: TTY.Config,"},
{"lineNum":"  402","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  403","line":"    _ = allocator;"},
{"lineNum":"  404","line":"    if (builtin.strip_debug_info) return error.MissingDebugInfo;"},
{"lineNum":"  405","line":"    var frame_index: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  406","line":"    var frames_left: usize = std.math.min(stack_trace.index, stack_trace.instruction_addresses.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  407","line":""},
{"lineNum":"  408","line":"    while (frames_left != 0) : ({","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  409","line":"        frames_left -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  410","line":"        frame_index = (frame_index + 1) % stack_trace.instruction_addresses.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  411","line":"    }) {"},
{"lineNum":"  412","line":"        const return_address = stack_trace.instruction_addresses[frame_index];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  413","line":"        try printSourceAtAddress(debug_info, out_stream, return_address - 1, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  414","line":"    }"},
{"lineNum":"  415","line":""},
{"lineNum":"  416","line":"    if (stack_trace.index > stack_trace.instruction_addresses.len) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  417","line":"        const dropped_frames = stack_trace.index - stack_trace.instruction_addresses.len;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"        tty_config.setColor(out_stream, .Bold) catch {};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  420","line":"        try out_stream.print(\"({d} additional stack frames skipped...)\\n\", .{dropped_frames});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  421","line":"        tty_config.setColor(out_stream, .Reset) catch {};","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":"    }"},
{"lineNum":"  423","line":"}"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"pub const StackIterator = struct {"},
{"lineNum":"  426","line":"    // Skip every frame before this address is found."},
{"lineNum":"  427","line":"    first_address: ?usize,"},
{"lineNum":"  428","line":"    // Last known value of the frame pointer register."},
{"lineNum":"  429","line":"    fp: usize,"},
{"lineNum":"  430","line":""},
{"lineNum":"  431","line":"    pub fn init(first_address: ?usize, fp: ?usize) StackIterator {","class":"lineCov","hits":"1","order":"925","possible_hits":"1",},
{"lineNum":"  432","line":"        if (native_arch == .sparc64) {"},
{"lineNum":"  433","line":"            // Flush all the register windows on stack."},
{"lineNum":"  434","line":"            asm volatile ("},
{"lineNum":"  435","line":"                \\\\ flushw"},
{"lineNum":"  436","line":"                ::: \"memory\");"},
{"lineNum":"  437","line":"        }"},
{"lineNum":"  438","line":""},
{"lineNum":"  439","line":"        return StackIterator{","class":"lineCov","hits":"1","order":"926","possible_hits":"1",},
{"lineNum":"  440","line":"            .first_address = first_address,"},
{"lineNum":"  441","line":"            .fp = fp orelse @frameAddress(),"},
{"lineNum":"  442","line":"        };"},
{"lineNum":"  443","line":"    }"},
{"lineNum":"  444","line":""},
{"lineNum":"  445","line":"    // Offset of the saved BP wrt the frame pointer."},
{"lineNum":"  446","line":"    const fp_offset = if (native_arch.isRISCV())"},
{"lineNum":"  447","line":"        // On RISC-V the frame pointer points to the top of the saved register"},
{"lineNum":"  448","line":"        // area, on pretty much every other architecture it points to the stack"},
{"lineNum":"  449","line":"        // slot where the previous frame pointer is saved."},
{"lineNum":"  450","line":"        2 * @sizeOf(usize)"},
{"lineNum":"  451","line":"    else if (native_arch.isSPARC())"},
{"lineNum":"  452","line":"        // On SPARC the previous frame pointer is stored at 14 slots past %fp+BIAS."},
{"lineNum":"  453","line":"        14 * @sizeOf(usize)"},
{"lineNum":"  454","line":"    else"},
{"lineNum":"  455","line":"        0;"},
{"lineNum":"  456","line":""},
{"lineNum":"  457","line":"    const fp_bias = if (native_arch.isSPARC())"},
{"lineNum":"  458","line":"        // On SPARC frame pointers are biased by a constant."},
{"lineNum":"  459","line":"        2047"},
{"lineNum":"  460","line":"    else"},
{"lineNum":"  461","line":"        0;"},
{"lineNum":"  462","line":""},
{"lineNum":"  463","line":"    // Positive offset of the saved PC wrt the frame pointer."},
{"lineNum":"  464","line":"    const pc_offset = if (native_arch == .powerpc64le)"},
{"lineNum":"  465","line":"        2 * @sizeOf(usize)"},
{"lineNum":"  466","line":"    else"},
{"lineNum":"  467","line":"        @sizeOf(usize);"},
{"lineNum":"  468","line":""},
{"lineNum":"  469","line":"    pub fn next(self: *StackIterator) ?usize {","class":"lineCov","hits":"1","order":"929","possible_hits":"1",},
{"lineNum":"  470","line":"        var address = self.next_internal() orelse return null;","class":"lineCov","hits":"1","order":"930","possible_hits":"1",},
{"lineNum":"  471","line":""},
{"lineNum":"  472","line":"        if (self.first_address) |first_address| {","class":"lineCov","hits":"1","order":"953","possible_hits":"1",},
{"lineNum":"  473","line":"            while (address != first_address) {","class":"lineCov","hits":"1","order":"954","possible_hits":"1",},
{"lineNum":"  474","line":"                address = self.next_internal() orelse return null;","class":"lineCov","hits":"1","order":"955","possible_hits":"1",},
{"lineNum":"  475","line":"            }"},
{"lineNum":"  476","line":"            self.first_address = null;","class":"lineCov","hits":"2","order":"956","possible_hits":"2",},
{"lineNum":"  477","line":"        }"},
{"lineNum":"  478","line":""},
{"lineNum":"  479","line":"        return address;","class":"lineCov","hits":"1","order":"957","possible_hits":"1",},
{"lineNum":"  480","line":"    }"},
{"lineNum":"  481","line":""},
{"lineNum":"  482","line":"    fn isValidMemory(address: usize) bool {","class":"lineCov","hits":"1","order":"938","possible_hits":"1",},
{"lineNum":"  483","line":"        // We are unable to determine validity of memory for freestanding targets"},
{"lineNum":"  484","line":"        if (native_os == .freestanding) return true;"},
{"lineNum":"  485","line":""},
{"lineNum":"  486","line":"        const aligned_address = address & ~@intCast(usize, (mem.page_size - 1));","class":"lineCov","hits":"1","order":"939","possible_hits":"1",},
{"lineNum":"  487","line":"        const aligned_memory = @intToPtr([*]align(mem.page_size) u8, aligned_address)[0..mem.page_size];","class":"lineCov","hits":"1","order":"940","possible_hits":"1",},
{"lineNum":"  488","line":""},
{"lineNum":"  489","line":"        if (native_os != .windows) {"},
{"lineNum":"  490","line":"            if (native_os != .wasi) {"},
{"lineNum":"  491","line":"                os.msync(aligned_memory, os.MSF.ASYNC) catch |err| {","class":"lineCov","hits":"1","order":"941","possible_hits":"1",},
{"lineNum":"  492","line":"                    switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  493","line":"                        os.MSyncError.UnmappedMemory => {"},
{"lineNum":"  494","line":"                            return false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  495","line":"                        },"},
{"lineNum":"  496","line":"                        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  497","line":"                    }"},
{"lineNum":"  498","line":"                };"},
{"lineNum":"  499","line":"            }"},
{"lineNum":"  500","line":""},
{"lineNum":"  501","line":"            return true;","class":"lineCov","hits":"1","order":"947","possible_hits":"1",},
{"lineNum":"  502","line":"        } else {"},
{"lineNum":"  503","line":"            const w = os.windows;"},
{"lineNum":"  504","line":"            var memory_info: w.MEMORY_BASIC_INFORMATION = undefined;"},
{"lineNum":"  505","line":""},
{"lineNum":"  506","line":"            // The only error this function can throw is ERROR_INVALID_PARAMETER."},
{"lineNum":"  507","line":"            // supply an address that invalid i\'ll be thrown."},
{"lineNum":"  508","line":"            const rc = w.VirtualQuery(aligned_memory, &memory_info, aligned_memory.len) catch {"},
{"lineNum":"  509","line":"                return false;"},
{"lineNum":"  510","line":"            };"},
{"lineNum":"  511","line":""},
{"lineNum":"  512","line":"            // Result code has to be bigger than zero (number of bytes written)"},
{"lineNum":"  513","line":"            if (rc == 0) {"},
{"lineNum":"  514","line":"                return false;"},
{"lineNum":"  515","line":"            }"},
{"lineNum":"  516","line":""},
{"lineNum":"  517","line":"            // Free pages cannot be read, they are unmapped"},
{"lineNum":"  518","line":"            if (memory_info.State == w.MEM_FREE) {"},
{"lineNum":"  519","line":"                return false;"},
{"lineNum":"  520","line":"            }"},
{"lineNum":"  521","line":""},
{"lineNum":"  522","line":"            return true;"},
{"lineNum":"  523","line":"        }"},
{"lineNum":"  524","line":"    }"},
{"lineNum":"  525","line":""},
{"lineNum":"  526","line":"    fn next_internal(self: *StackIterator) ?usize {","class":"lineCov","hits":"1","order":"931","possible_hits":"1",},
{"lineNum":"  527","line":"        const fp = if (comptime native_arch.isSPARC())"},
{"lineNum":"  528","line":"            // On SPARC the offset is positive. (!)"},
{"lineNum":"  529","line":"            math.add(usize, self.fp, fp_offset) catch return null"},
{"lineNum":"  530","line":"        else"},
{"lineNum":"  531","line":"            math.sub(usize, self.fp, fp_offset) catch return null;","class":"lineCov","hits":"1","order":"932","possible_hits":"1",},
{"lineNum":"  532","line":""},
{"lineNum":"  533","line":"        // Sanity check."},
{"lineNum":"  534","line":"        if (fp == 0 or !mem.isAligned(fp, @alignOf(usize)) or !isValidMemory(fp))","class":"lineCov","hits":"1","order":"937","possible_hits":"1",},
{"lineNum":"  535","line":"            return null;","class":"lineCov","hits":"1","order":"1594","possible_hits":"1",},
{"lineNum":"  536","line":""},
{"lineNum":"  537","line":"        const new_fp = math.add(usize, @intToPtr(*const usize, fp).*, fp_bias) catch return null;","class":"lineCov","hits":"1","order":"948","possible_hits":"1",},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"        // Sanity check: the stack grows down thus all the parent frames must be"},
{"lineNum":"  540","line":"        // be at addresses that are greater (or equal) than the previous one."},
{"lineNum":"  541","line":"        // A zero frame pointer often signals this is the last frame, that case"},
{"lineNum":"  542","line":"        // is gracefully handled by the next call to next_internal."},
{"lineNum":"  543","line":"        if (new_fp != 0 and new_fp < self.fp)","class":"lineCov","hits":"1","order":"949","possible_hits":"1",},
{"lineNum":"  544","line":"            return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  545","line":""},
{"lineNum":"  546","line":"        const new_pc = @intToPtr("},
{"lineNum":"  547","line":"            *const usize,"},
{"lineNum":"  548","line":"            math.add(usize, fp, pc_offset) catch return null,","class":"lineCov","hits":"1","order":"950","possible_hits":"1",},
{"lineNum":"  549","line":"        ).*;"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"        self.fp = new_fp;","class":"lineCov","hits":"1","order":"951","possible_hits":"1",},
{"lineNum":"  552","line":""},
{"lineNum":"  553","line":"        return new_pc;","class":"lineCov","hits":"1","order":"952","possible_hits":"1",},
{"lineNum":"  554","line":"    }"},
{"lineNum":"  555","line":"};"},
{"lineNum":"  556","line":""},
{"lineNum":"  557","line":"pub fn writeCurrentStackTrace("},
{"lineNum":"  558","line":"    out_stream: anytype,"},
{"lineNum":"  559","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  560","line":"    tty_config: TTY.Config,"},
{"lineNum":"  561","line":"    start_addr: ?usize,"},
{"lineNum":"  562","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"    if (native_os == .windows) {"},
{"lineNum":"  564","line":"        return writeCurrentStackTraceWindows(out_stream, debug_info, tty_config, start_addr);"},
{"lineNum":"  565","line":"    }"},
{"lineNum":"  566","line":"    var it = StackIterator.init(start_addr, null);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  567","line":"    while (it.next()) |return_address| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  568","line":"        // On arm64 macOS, the address of the last frame is 0x0 rather than 0x1 as on x86_64 macOS,"},
{"lineNum":"  569","line":"        // therefore, we do a check for `return_address == 0` before subtracting 1 from it to avoid"},
{"lineNum":"  570","line":"        // an overflow. We do not need to signal `StackIterator` as it will correctly detect this"},
{"lineNum":"  571","line":"        // condition on the subsequent iteration and return `null` thus terminating the loop."},
{"lineNum":"  572","line":"        // same behaviour for x86-windows-msvc"},
{"lineNum":"  573","line":"        const address = if (return_address == 0) return_address else return_address - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  574","line":"        try printSourceAtAddress(debug_info, out_stream, address, tty_config);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  575","line":"    }"},
{"lineNum":"  576","line":"}"},
{"lineNum":"  577","line":""},
{"lineNum":"  578","line":"pub noinline fn walkStackWindows(addresses: []usize) usize {"},
{"lineNum":"  579","line":"    if (builtin.cpu.arch == .x86) {"},
{"lineNum":"  580","line":"        // RtlVirtualUnwind doesn\'t exist on x86"},
{"lineNum":"  581","line":"        return windows.ntdll.RtlCaptureStackBackTrace(0, addresses.len, @ptrCast(**anyopaque, addresses.ptr), null);"},
{"lineNum":"  582","line":"    }"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"    const tib = @ptrCast(*const windows.NT_TIB, &windows.teb().Reserved1);"},
{"lineNum":"  585","line":""},
{"lineNum":"  586","line":"    var context: windows.CONTEXT = std.mem.zeroes(windows.CONTEXT);"},
{"lineNum":"  587","line":"    windows.ntdll.RtlCaptureContext(&context);"},
{"lineNum":"  588","line":""},
{"lineNum":"  589","line":"    var i: usize = 0;"},
{"lineNum":"  590","line":"    var image_base: usize = undefined;"},
{"lineNum":"  591","line":"    var history_table: windows.UNWIND_HISTORY_TABLE = std.mem.zeroes(windows.UNWIND_HISTORY_TABLE);"},
{"lineNum":"  592","line":""},
{"lineNum":"  593","line":"    while (i < addresses.len) : (i += 1) {"},
{"lineNum":"  594","line":"        const current_regs = context.getRegs();"},
{"lineNum":"  595","line":"        if (windows.ntdll.RtlLookupFunctionEntry(current_regs.ip, &image_base, &history_table)) |runtime_function| {"},
{"lineNum":"  596","line":"            var handler_data: ?*anyopaque = null;"},
{"lineNum":"  597","line":"            var establisher_frame: u64 = undefined;"},
{"lineNum":"  598","line":"            _ = windows.ntdll.RtlVirtualUnwind(windows.UNW_FLAG_NHANDLER, image_base, current_regs.ip, runtime_function, &context, &handler_data, &establisher_frame, null);"},
{"lineNum":"  599","line":"        } else {"},
{"lineNum":"  600","line":"            // leaf function"},
{"lineNum":"  601","line":"            context.setIp(@intToPtr(*u64, current_regs.sp).*);"},
{"lineNum":"  602","line":"            context.setSp(current_regs.sp + @sizeOf(usize));"},
{"lineNum":"  603","line":"        }"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"        const next_regs = context.getRegs();"},
{"lineNum":"  606","line":"        if (next_regs.sp < @ptrToInt(tib.StackLimit) or next_regs.sp > @ptrToInt(tib.StackBase)) {"},
{"lineNum":"  607","line":"            break;"},
{"lineNum":"  608","line":"        }"},
{"lineNum":"  609","line":""},
{"lineNum":"  610","line":"        if (next_regs.ip == 0) {"},
{"lineNum":"  611","line":"            break;"},
{"lineNum":"  612","line":"        }"},
{"lineNum":"  613","line":""},
{"lineNum":"  614","line":"        addresses[i] = next_regs.ip;"},
{"lineNum":"  615","line":"    }"},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"    return i;"},
{"lineNum":"  618","line":"}"},
{"lineNum":"  619","line":""},
{"lineNum":"  620","line":"pub fn writeCurrentStackTraceWindows("},
{"lineNum":"  621","line":"    out_stream: anytype,"},
{"lineNum":"  622","line":"    debug_info: *DebugInfo,"},
{"lineNum":"  623","line":"    tty_config: TTY.Config,"},
{"lineNum":"  624","line":"    start_addr: ?usize,"},
{"lineNum":"  625","line":") !void {"},
{"lineNum":"  626","line":"    var addr_buf: [1024]usize = undefined;"},
{"lineNum":"  627","line":"    const n = walkStackWindows(addr_buf[0..]);"},
{"lineNum":"  628","line":"    const addrs = addr_buf[0..n];"},
{"lineNum":"  629","line":"    var start_i: usize = if (start_addr) |saddr| blk: {"},
{"lineNum":"  630","line":"        for (addrs, 0..) |addr, i| {"},
{"lineNum":"  631","line":"            if (addr == saddr) break :blk i;"},
{"lineNum":"  632","line":"        }"},
{"lineNum":"  633","line":"        return;"},
{"lineNum":"  634","line":"    } else 0;"},
{"lineNum":"  635","line":"    for (addrs[start_i..]) |addr| {"},
{"lineNum":"  636","line":"        try printSourceAtAddress(debug_info, out_stream, addr - 1, tty_config);"},
{"lineNum":"  637","line":"    }"},
{"lineNum":"  638","line":"}"},
{"lineNum":"  639","line":""},
{"lineNum":"  640","line":"pub const TTY = struct {"},
{"lineNum":"  641","line":"    pub const Color = enum {"},
{"lineNum":"  642","line":"        Red,"},
{"lineNum":"  643","line":"        Green,"},
{"lineNum":"  644","line":"        Yellow,"},
{"lineNum":"  645","line":"        Cyan,"},
{"lineNum":"  646","line":"        White,"},
{"lineNum":"  647","line":"        Dim,"},
{"lineNum":"  648","line":"        Bold,"},
{"lineNum":"  649","line":"        Reset,"},
{"lineNum":"  650","line":"    };"},
{"lineNum":"  651","line":""},
{"lineNum":"  652","line":"    pub const Config = union(enum) {"},
{"lineNum":"  653","line":"        no_color,"},
{"lineNum":"  654","line":"        escape_codes,"},
{"lineNum":"  655","line":"        windows_api: if (native_os == .windows) WindowsContext else void,"},
{"lineNum":"  656","line":""},
{"lineNum":"  657","line":"        pub const WindowsContext = struct {"},
{"lineNum":"  658","line":"            handle: File.Handle,"},
{"lineNum":"  659","line":"            reset_attributes: u16,"},
{"lineNum":"  660","line":"        };"},
{"lineNum":"  661","line":""},
{"lineNum":"  662","line":"        pub fn setColor(conf: Config, out_stream: anytype, color: Color) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"            nosuspend switch (conf) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  664","line":"                .no_color => return,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  665","line":"                .escape_codes => {"},
{"lineNum":"  666","line":"                    const color_string = switch (color) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"                        .Red => \"\\x1b[31;1m\","},
{"lineNum":"  668","line":"                        .Green => \"\\x1b[32;1m\","},
{"lineNum":"  669","line":"                        .Yellow => \"\\x1b[33;1m\","},
{"lineNum":"  670","line":"                        .Cyan => \"\\x1b[36;1m\","},
{"lineNum":"  671","line":"                        .White => \"\\x1b[37;1m\","},
{"lineNum":"  672","line":"                        .Bold => \"\\x1b[1m\","},
{"lineNum":"  673","line":"                        .Dim => \"\\x1b[2m\","},
{"lineNum":"  674","line":"                        .Reset => \"\\x1b[0m\","},
{"lineNum":"  675","line":"                    };"},
{"lineNum":"  676","line":"                    try out_stream.writeAll(color_string);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  677","line":"                },"},
{"lineNum":"  678","line":"                .windows_api => |ctx| if (native_os == .windows) {"},
{"lineNum":"  679","line":"                    const attributes = switch (color) {"},
{"lineNum":"  680","line":"                        .Red => windows.FOREGROUND_RED | windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  681","line":"                        .Green => windows.FOREGROUND_GREEN | windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  682","line":"                        .Yellow => windows.FOREGROUND_RED | windows.FOREGROUND_GREEN | windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  683","line":"                        .Cyan => windows.FOREGROUND_GREEN | windows.FOREGROUND_BLUE | windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  684","line":"                        .White, .Bold => windows.FOREGROUND_RED | windows.FOREGROUND_GREEN | windows.FOREGROUND_BLUE | windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  685","line":"                        .Dim => windows.FOREGROUND_INTENSITY,"},
{"lineNum":"  686","line":"                        .Reset => ctx.reset_attributes,"},
{"lineNum":"  687","line":"                    };"},
{"lineNum":"  688","line":"                    try windows.SetConsoleTextAttribute(ctx.handle, attributes);"},
{"lineNum":"  689","line":"                } else {"},
{"lineNum":"  690","line":"                    unreachable;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  691","line":"                },"},
{"lineNum":"  692","line":"            };"},
{"lineNum":"  693","line":"        }"},
{"lineNum":"  694","line":""},
{"lineNum":"  695","line":"        pub fn writeDEC(conf: Config, writer: anytype, codepoint: u8) !void {"},
{"lineNum":"  696","line":"            const bytes = switch (conf) {"},
{"lineNum":"  697","line":"                .no_color, .windows_api => switch (codepoint) {"},
{"lineNum":"  698","line":"                    0x50...0x5e => @as(*const [1]u8, &codepoint),"},
{"lineNum":"  699","line":"                    0x6a => \"+\", // ┘"},
{"lineNum":"  700","line":"                    0x6b => \"+\", // ┐"},
{"lineNum":"  701","line":"                    0x6c => \"+\", // ┌"},
{"lineNum":"  702","line":"                    0x6d => \"+\", // └"},
{"lineNum":"  703","line":"                    0x6e => \"+\", // ┼"},
{"lineNum":"  704","line":"                    0x71 => \"-\", // ─"},
{"lineNum":"  705","line":"                    0x74 => \"+\", // ├"},
{"lineNum":"  706","line":"                    0x75 => \"+\", // ┤"},
{"lineNum":"  707","line":"                    0x76 => \"+\", // ┴"},
{"lineNum":"  708","line":"                    0x77 => \"+\", // ┬"},
{"lineNum":"  709","line":"                    0x78 => \"|\", // │"},
{"lineNum":"  710","line":"                    else => \" \", // TODO"},
{"lineNum":"  711","line":"                },"},
{"lineNum":"  712","line":"                .escape_codes => switch (codepoint) {"},
{"lineNum":"  713","line":"                    // Here we avoid writing the DEC beginning sequence and"},
{"lineNum":"  714","line":"                    // ending sequence in separate syscalls by putting the"},
{"lineNum":"  715","line":"                    // beginning and ending sequence into the same string"},
{"lineNum":"  716","line":"                    // literals, to prevent terminals ending up in bad states"},
{"lineNum":"  717","line":"                    // in case a crash happens between syscalls."},
{"lineNum":"  718","line":"                    inline 0x50...0x7f => |x| \"\\x1B\\x28\\x30\" ++ [1]u8{x} ++ \"\\x1B\\x28\\x42\","},
{"lineNum":"  719","line":"                    else => unreachable,"},
{"lineNum":"  720","line":"                },"},
{"lineNum":"  721","line":"            };"},
{"lineNum":"  722","line":"            return writer.writeAll(bytes);"},
{"lineNum":"  723","line":"        }"},
{"lineNum":"  724","line":"    };"},
{"lineNum":"  725","line":"};"},
{"lineNum":"  726","line":""},
{"lineNum":"  727","line":"fn machoSearchSymbols(symbols: []const MachoSymbol, address: usize) ?*const MachoSymbol {"},
{"lineNum":"  728","line":"    var min: usize = 0;"},
{"lineNum":"  729","line":"    var max: usize = symbols.len - 1;"},
{"lineNum":"  730","line":"    while (min < max) {"},
{"lineNum":"  731","line":"        const mid = min + (max - min) / 2;"},
{"lineNum":"  732","line":"        const curr = &symbols[mid];"},
{"lineNum":"  733","line":"        const next = &symbols[mid + 1];"},
{"lineNum":"  734","line":"        if (address >= next.address()) {"},
{"lineNum":"  735","line":"            min = mid + 1;"},
{"lineNum":"  736","line":"        } else if (address < curr.address()) {"},
{"lineNum":"  737","line":"            max = mid;"},
{"lineNum":"  738","line":"        } else {"},
{"lineNum":"  739","line":"            return curr;"},
{"lineNum":"  740","line":"        }"},
{"lineNum":"  741","line":"    }"},
{"lineNum":"  742","line":""},
{"lineNum":"  743","line":"    const max_sym = &symbols[symbols.len - 1];"},
{"lineNum":"  744","line":"    if (address >= max_sym.address())"},
{"lineNum":"  745","line":"        return max_sym;"},
{"lineNum":"  746","line":""},
{"lineNum":"  747","line":"    return null;"},
{"lineNum":"  748","line":"}"},
{"lineNum":"  749","line":""},
{"lineNum":"  750","line":"test \"machoSearchSymbols\" {"},
{"lineNum":"  751","line":"    const symbols = [_]MachoSymbol{"},
{"lineNum":"  752","line":"        .{ .addr = 100, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  753","line":"        .{ .addr = 200, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  754","line":"        .{ .addr = 300, .strx = undefined, .size = undefined, .ofile = undefined },"},
{"lineNum":"  755","line":"    };"},
{"lineNum":"  756","line":""},
{"lineNum":"  757","line":"    try testing.expectEqual(@as(?*const MachoSymbol, null), machoSearchSymbols(&symbols, 0));"},
{"lineNum":"  758","line":"    try testing.expectEqual(@as(?*const MachoSymbol, null), machoSearchSymbols(&symbols, 99));"},
{"lineNum":"  759","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 100).?);"},
{"lineNum":"  760","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 150).?);"},
{"lineNum":"  761","line":"    try testing.expectEqual(&symbols[0], machoSearchSymbols(&symbols, 199).?);"},
{"lineNum":"  762","line":""},
{"lineNum":"  763","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 200).?);"},
{"lineNum":"  764","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 250).?);"},
{"lineNum":"  765","line":"    try testing.expectEqual(&symbols[1], machoSearchSymbols(&symbols, 299).?);"},
{"lineNum":"  766","line":""},
{"lineNum":"  767","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 300).?);"},
{"lineNum":"  768","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 301).?);"},
{"lineNum":"  769","line":"    try testing.expectEqual(&symbols[2], machoSearchSymbols(&symbols, 5000).?);"},
{"lineNum":"  770","line":"}"},
{"lineNum":"  771","line":""},
{"lineNum":"  772","line":"pub fn printSourceAtAddress(debug_info: *DebugInfo, out_stream: anytype, address: usize, tty_config: TTY.Config) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  773","line":"    const module = debug_info.getModuleForAddress(address) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"        error.MissingDebugInfo, error.InvalidDebugInfo => {"},
{"lineNum":"  775","line":"            return printLineInfo(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  776","line":"                out_stream,"},
{"lineNum":"  777","line":"                null,"},
{"lineNum":"  778","line":"                address,"},
{"lineNum":"  779","line":"                \"???\","},
{"lineNum":"  780","line":"                \"???\","},
{"lineNum":"  781","line":"                tty_config,"},
{"lineNum":"  782","line":"                printLineFromFileAnyOs,"},
{"lineNum":"  783","line":"            );"},
{"lineNum":"  784","line":"        },"},
{"lineNum":"  785","line":"        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  786","line":"    };"},
{"lineNum":"  787","line":""},
{"lineNum":"  788","line":"    const symbol_info = try module.getSymbolAtAddress(debug_info.allocator, address);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  789","line":"    defer symbol_info.deinit(debug_info.allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"    return printLineInfo(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"        out_stream,"},
{"lineNum":"  793","line":"        symbol_info.line_info,"},
{"lineNum":"  794","line":"        address,"},
{"lineNum":"  795","line":"        symbol_info.symbol_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  796","line":"        symbol_info.compile_unit_name,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  797","line":"        tty_config,"},
{"lineNum":"  798","line":"        printLineFromFileAnyOs,"},
{"lineNum":"  799","line":"    );"},
{"lineNum":"  800","line":"}"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"fn printLineInfo("},
{"lineNum":"  803","line":"    out_stream: anytype,"},
{"lineNum":"  804","line":"    line_info: ?LineInfo,"},
{"lineNum":"  805","line":"    address: usize,"},
{"lineNum":"  806","line":"    symbol_name: []const u8,"},
{"lineNum":"  807","line":"    compile_unit_name: []const u8,"},
{"lineNum":"  808","line":"    tty_config: TTY.Config,"},
{"lineNum":"  809","line":"    comptime printLineFromFile: anytype,"},
{"lineNum":"  810","line":") !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  811","line":"    nosuspend {"},
{"lineNum":"  812","line":"        try tty_config.setColor(out_stream, .Bold);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"        if (line_info) |*li| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  815","line":"            try out_stream.print(\"{s}:{d}:{d}\", .{ li.file_name, li.line, li.column });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  816","line":"        } else {"},
{"lineNum":"  817","line":"            try out_stream.writeAll(\"???:?:?\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  818","line":"        }"},
{"lineNum":"  819","line":""},
{"lineNum":"  820","line":"        try tty_config.setColor(out_stream, .Reset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  821","line":"        try out_stream.writeAll(\": \");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  822","line":"        try tty_config.setColor(out_stream, .Dim);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  823","line":"        try out_stream.print(\"0x{x} in {s} ({s})\", .{ address, symbol_name, compile_unit_name });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  824","line":"        try tty_config.setColor(out_stream, .Reset);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  825","line":"        try out_stream.writeAll(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  826","line":""},
{"lineNum":"  827","line":"        // Show the matching source code line if possible"},
{"lineNum":"  828","line":"        if (line_info) |li| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  829","line":"            if (printLineFromFile(out_stream, li)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  830","line":"                if (li.column > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  831","line":"                    // The caret already takes one char"},
{"lineNum":"  832","line":"                    const space_needed = @intCast(usize, li.column - 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  833","line":""},
{"lineNum":"  834","line":"                    try out_stream.writeByteNTimes(\' \', space_needed);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  835","line":"                    try tty_config.setColor(out_stream, .Green);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  836","line":"                    try out_stream.writeAll(\"^\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  837","line":"                    try tty_config.setColor(out_stream, .Reset);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  838","line":"                }"},
{"lineNum":"  839","line":"                try out_stream.writeAll(\"\\n\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  840","line":"            } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  841","line":"                error.EndOfFile, error.FileNotFound => {},"},
{"lineNum":"  842","line":"                error.BadPathName => {},"},
{"lineNum":"  843","line":"                error.AccessDenied => {},"},
{"lineNum":"  844","line":"                else => return err,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  845","line":"            }"},
{"lineNum":"  846","line":"        }"},
{"lineNum":"  847","line":"    }"},
{"lineNum":"  848","line":"}"},
{"lineNum":"  849","line":""},
{"lineNum":"  850","line":"pub const OpenSelfDebugInfoError = error{"},
{"lineNum":"  851","line":"    MissingDebugInfo,"},
{"lineNum":"  852","line":"    UnsupportedOperatingSystem,"},
{"lineNum":"  853","line":"} || @typeInfo(@typeInfo(@TypeOf(DebugInfo.init)).Fn.return_type.?).ErrorUnion.error_set;"},
{"lineNum":"  854","line":""},
{"lineNum":"  855","line":"pub fn openSelfDebugInfo(allocator: mem.Allocator) OpenSelfDebugInfoError!DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  856","line":"    nosuspend {"},
{"lineNum":"  857","line":"        if (builtin.strip_debug_info)"},
{"lineNum":"  858","line":"            return error.MissingDebugInfo;"},
{"lineNum":"  859","line":"        if (@hasDecl(root, \"os\") and @hasDecl(root.os, \"debug\") and @hasDecl(root.os.debug, \"openSelfDebugInfo\")) {"},
{"lineNum":"  860","line":"            return root.os.debug.openSelfDebugInfo(allocator);"},
{"lineNum":"  861","line":"        }"},
{"lineNum":"  862","line":"        switch (native_os) {"},
{"lineNum":"  863","line":"            .linux,"},
{"lineNum":"  864","line":"            .freebsd,"},
{"lineNum":"  865","line":"            .netbsd,"},
{"lineNum":"  866","line":"            .dragonfly,"},
{"lineNum":"  867","line":"            .openbsd,"},
{"lineNum":"  868","line":"            .macos,"},
{"lineNum":"  869","line":"            .solaris,"},
{"lineNum":"  870","line":"            .windows,"},
{"lineNum":"  871","line":"            => return try DebugInfo.init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  872","line":"            else => return error.UnsupportedOperatingSystem,"},
{"lineNum":"  873","line":"        }"},
{"lineNum":"  874","line":"    }"},
{"lineNum":"  875","line":"}"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"fn readCoffDebugInfo(allocator: mem.Allocator, coff_bytes: []const u8) !ModuleDebugInfo {"},
{"lineNum":"  878","line":"    nosuspend {"},
{"lineNum":"  879","line":"        const coff_obj = try allocator.create(coff.Coff);"},
{"lineNum":"  880","line":"        defer allocator.destroy(coff_obj);"},
{"lineNum":"  881","line":"        coff_obj.* = try coff.Coff.init(coff_bytes);"},
{"lineNum":"  882","line":""},
{"lineNum":"  883","line":"        var di = ModuleDebugInfo{"},
{"lineNum":"  884","line":"            .base_address = undefined,"},
{"lineNum":"  885","line":"            .coff_image_base = coff_obj.getImageBase(),"},
{"lineNum":"  886","line":"            .coff_section_headers = undefined,"},
{"lineNum":"  887","line":"            .debug_data = undefined,"},
{"lineNum":"  888","line":"        };"},
{"lineNum":"  889","line":""},
{"lineNum":"  890","line":"        if (coff_obj.getSectionByName(\".debug_info\")) |sec| {"},
{"lineNum":"  891","line":"            // This coff file has embedded DWARF debug info"},
{"lineNum":"  892","line":"            _ = sec;"},
{"lineNum":"  893","line":""},
{"lineNum":"  894","line":"            const debug_info = coff_obj.getSectionDataAlloc(\".debug_info\", allocator) catch return error.MissingDebugInfo;"},
{"lineNum":"  895","line":"            errdefer allocator.free(debug_info);"},
{"lineNum":"  896","line":"            const debug_abbrev = coff_obj.getSectionDataAlloc(\".debug_abbrev\", allocator) catch return error.MissingDebugInfo;"},
{"lineNum":"  897","line":"            errdefer allocator.free(debug_abbrev);"},
{"lineNum":"  898","line":"            const debug_str = coff_obj.getSectionDataAlloc(\".debug_str\", allocator) catch return error.MissingDebugInfo;"},
{"lineNum":"  899","line":"            errdefer allocator.free(debug_str);"},
{"lineNum":"  900","line":"            const debug_line = coff_obj.getSectionDataAlloc(\".debug_line\", allocator) catch return error.MissingDebugInfo;"},
{"lineNum":"  901","line":"            errdefer allocator.free(debug_line);"},
{"lineNum":"  902","line":""},
{"lineNum":"  903","line":"            const debug_str_offsets = coff_obj.getSectionDataAlloc(\".debug_str_offsets\", allocator) catch null;"},
{"lineNum":"  904","line":"            const debug_line_str = coff_obj.getSectionDataAlloc(\".debug_line_str\", allocator) catch null;"},
{"lineNum":"  905","line":"            const debug_ranges = coff_obj.getSectionDataAlloc(\".debug_ranges\", allocator) catch null;"},
{"lineNum":"  906","line":"            const debug_loclists = coff_obj.getSectionDataAlloc(\".debug_loclists\", allocator) catch null;"},
{"lineNum":"  907","line":"            const debug_rnglists = coff_obj.getSectionDataAlloc(\".debug_rnglists\", allocator) catch null;"},
{"lineNum":"  908","line":"            const debug_addr = coff_obj.getSectionDataAlloc(\".debug_addr\", allocator) catch null;"},
{"lineNum":"  909","line":"            const debug_names = coff_obj.getSectionDataAlloc(\".debug_names\", allocator) catch null;"},
{"lineNum":"  910","line":"            const debug_frame = coff_obj.getSectionDataAlloc(\".debug_frame\", allocator) catch null;"},
{"lineNum":"  911","line":""},
{"lineNum":"  912","line":"            var dwarf = DW.DwarfInfo{"},
{"lineNum":"  913","line":"                .endian = native_endian,"},
{"lineNum":"  914","line":"                .debug_info = debug_info,"},
{"lineNum":"  915","line":"                .debug_abbrev = debug_abbrev,"},
{"lineNum":"  916","line":"                .debug_str = debug_str,"},
{"lineNum":"  917","line":"                .debug_str_offsets = debug_str_offsets,"},
{"lineNum":"  918","line":"                .debug_line = debug_line,"},
{"lineNum":"  919","line":"                .debug_line_str = debug_line_str,"},
{"lineNum":"  920","line":"                .debug_ranges = debug_ranges,"},
{"lineNum":"  921","line":"                .debug_loclists = debug_loclists,"},
{"lineNum":"  922","line":"                .debug_rnglists = debug_rnglists,"},
{"lineNum":"  923","line":"                .debug_addr = debug_addr,"},
{"lineNum":"  924","line":"                .debug_names = debug_names,"},
{"lineNum":"  925","line":"                .debug_frame = debug_frame,"},
{"lineNum":"  926","line":"            };"},
{"lineNum":"  927","line":""},
{"lineNum":"  928","line":"            DW.openDwarfDebugInfo(&dwarf, allocator) catch |err| {"},
{"lineNum":"  929","line":"                if (debug_str_offsets) |d| allocator.free(d);"},
{"lineNum":"  930","line":"                if (debug_line_str) |d| allocator.free(d);"},
{"lineNum":"  931","line":"                if (debug_ranges) |d| allocator.free(d);"},
{"lineNum":"  932","line":"                if (debug_loclists) |d| allocator.free(d);"},
{"lineNum":"  933","line":"                if (debug_rnglists) |d| allocator.free(d);"},
{"lineNum":"  934","line":"                if (debug_addr) |d| allocator.free(d);"},
{"lineNum":"  935","line":"                if (debug_names) |d| allocator.free(d);"},
{"lineNum":"  936","line":"                if (debug_frame) |d| allocator.free(d);"},
{"lineNum":"  937","line":"                return err;"},
{"lineNum":"  938","line":"            };"},
{"lineNum":"  939","line":""},
{"lineNum":"  940","line":"            di.debug_data = PdbOrDwarf{ .dwarf = dwarf };"},
{"lineNum":"  941","line":"            return di;"},
{"lineNum":"  942","line":"        }"},
{"lineNum":"  943","line":""},
{"lineNum":"  944","line":"        // Only used by pdb path"},
{"lineNum":"  945","line":"        di.coff_section_headers = try coff_obj.getSectionHeadersAlloc(allocator);"},
{"lineNum":"  946","line":""},
{"lineNum":"  947","line":"        var path_buf: [windows.MAX_PATH]u8 = undefined;"},
{"lineNum":"  948","line":"        const len = try coff_obj.getPdbPath(path_buf[0..]);"},
{"lineNum":"  949","line":"        const raw_path = path_buf[0..len];"},
{"lineNum":"  950","line":""},
{"lineNum":"  951","line":"        const path = try fs.path.resolve(allocator, &[_][]const u8{raw_path});"},
{"lineNum":"  952","line":"        defer allocator.free(path);"},
{"lineNum":"  953","line":""},
{"lineNum":"  954","line":"        di.debug_data = PdbOrDwarf{ .pdb = undefined };"},
{"lineNum":"  955","line":"        di.debug_data.pdb = pdb.Pdb.init(allocator, path) catch |err| switch (err) {"},
{"lineNum":"  956","line":"            error.FileNotFound, error.IsDir => return error.MissingDebugInfo,"},
{"lineNum":"  957","line":"            else => return err,"},
{"lineNum":"  958","line":"        };"},
{"lineNum":"  959","line":"        try di.debug_data.pdb.parseInfoStream();"},
{"lineNum":"  960","line":"        try di.debug_data.pdb.parseDbiStream();"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"        if (!mem.eql(u8, &coff_obj.guid, &di.debug_data.pdb.guid) or coff_obj.age != di.debug_data.pdb.age)"},
{"lineNum":"  963","line":"            return error.InvalidDebugInfo;"},
{"lineNum":"  964","line":""},
{"lineNum":"  965","line":"        return di;"},
{"lineNum":"  966","line":"    }"},
{"lineNum":"  967","line":"}"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"fn chopSlice(ptr: []const u8, offset: u64, size: u64) error{Overflow}![]const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  970","line":"    const start = math.cast(usize, offset) orelse return error.Overflow;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  971","line":"    const end = start + (math.cast(usize, size) orelse return error.Overflow);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  972","line":"    return ptr[start..end];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  973","line":"}"},
{"lineNum":"  974","line":""},
{"lineNum":"  975","line":"/// This takes ownership of elf_file: users of this function should not close"},
{"lineNum":"  976","line":"/// it themselves, even on error."},
{"lineNum":"  977","line":"/// TODO it\'s weird to take ownership even on error, rework this code."},
{"lineNum":"  978","line":"pub fn readElfDebugInfo(allocator: mem.Allocator, elf_file: File) !ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  979","line":"    nosuspend {"},
{"lineNum":"  980","line":"        const mapped_mem = try mapWholeFile(elf_file);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  981","line":"        const hdr = @ptrCast(*const elf.Ehdr, &mapped_mem[0]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"        if (!mem.eql(u8, hdr.e_ident[0..4], elf.MAGIC)) return error.InvalidElfMagic;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  983","line":"        if (hdr.e_ident[elf.EI_VERSION] != 1) return error.InvalidElfVersion;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  984","line":""},
{"lineNum":"  985","line":"        const endian: std.builtin.Endian = switch (hdr.e_ident[elf.EI_DATA]) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  986","line":"            elf.ELFDATA2LSB => .Little,"},
{"lineNum":"  987","line":"            elf.ELFDATA2MSB => .Big,"},
{"lineNum":"  988","line":"            else => return error.InvalidElfEndian,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  989","line":"        };"},
{"lineNum":"  990","line":"        assert(endian == native_endian); // this is our own debug info","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"        const shoff = hdr.e_shoff;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  993","line":"        const str_section_off = shoff + @as(u64, hdr.e_shentsize) * @as(u64, hdr.e_shstrndx);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  994","line":"        const str_shdr = @ptrCast("},
{"lineNum":"  995","line":"            *const elf.Shdr,"},
{"lineNum":"  996","line":"            @alignCast(@alignOf(elf.Shdr), &mapped_mem[math.cast(usize, str_section_off) orelse return error.Overflow]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  997","line":"        );"},
{"lineNum":"  998","line":"        const header_strings = mapped_mem[str_shdr.sh_offset .. str_shdr.sh_offset + str_shdr.sh_size];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  999","line":"        const shdrs = @ptrCast("},
{"lineNum":" 1000","line":"            [*]const elf.Shdr,"},
{"lineNum":" 1001","line":"            @alignCast(@alignOf(elf.Shdr), &mapped_mem[shoff]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1002","line":"        )[0..hdr.e_shnum];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1003","line":""},
{"lineNum":" 1004","line":"        var opt_debug_info: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1005","line":"        var opt_debug_abbrev: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1006","line":"        var opt_debug_str: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1007","line":"        var opt_debug_str_offsets: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1008","line":"        var opt_debug_line: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1009","line":"        var opt_debug_line_str: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1010","line":"        var opt_debug_ranges: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1011","line":"        var opt_debug_loclists: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1012","line":"        var opt_debug_rnglists: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1013","line":"        var opt_debug_addr: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1014","line":"        var opt_debug_names: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1015","line":"        var opt_debug_frame: ?[]const u8 = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"        for (shdrs) |*shdr| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1018","line":"            if (shdr.sh_type == elf.SHT_NULL) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1019","line":""},
{"lineNum":" 1020","line":"            const name = mem.sliceTo(header_strings[shdr.sh_name..], 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1021","line":"            if (mem.eql(u8, name, \".debug_info\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1022","line":"                opt_debug_info = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1023","line":"            } else if (mem.eql(u8, name, \".debug_abbrev\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1024","line":"                opt_debug_abbrev = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1025","line":"            } else if (mem.eql(u8, name, \".debug_str\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1026","line":"                opt_debug_str = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1027","line":"            } else if (mem.eql(u8, name, \".debug_str_offsets\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1028","line":"                opt_debug_str_offsets = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1029","line":"            } else if (mem.eql(u8, name, \".debug_line\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1030","line":"                opt_debug_line = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1031","line":"            } else if (mem.eql(u8, name, \".debug_line_str\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1032","line":"                opt_debug_line_str = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1033","line":"            } else if (mem.eql(u8, name, \".debug_ranges\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1034","line":"                opt_debug_ranges = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1035","line":"            } else if (mem.eql(u8, name, \".debug_loclists\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1036","line":"                opt_debug_loclists = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1037","line":"            } else if (mem.eql(u8, name, \".debug_rnglists\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1038","line":"                opt_debug_rnglists = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1039","line":"            } else if (mem.eql(u8, name, \".debug_addr\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1040","line":"                opt_debug_addr = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1041","line":"            } else if (mem.eql(u8, name, \".debug_names\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1042","line":"                opt_debug_names = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1043","line":"            } else if (mem.eql(u8, name, \".debug_frame\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1044","line":"                opt_debug_frame = try chopSlice(mapped_mem, shdr.sh_offset, shdr.sh_size);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1045","line":"            }"},
{"lineNum":" 1046","line":"        }"},
{"lineNum":" 1047","line":""},
{"lineNum":" 1048","line":"        var di = DW.DwarfInfo{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1049","line":"            .endian = endian,"},
{"lineNum":" 1050","line":"            .debug_info = opt_debug_info orelse return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1051","line":"            .debug_abbrev = opt_debug_abbrev orelse return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1052","line":"            .debug_str = opt_debug_str orelse return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1053","line":"            .debug_str_offsets = opt_debug_str_offsets,"},
{"lineNum":" 1054","line":"            .debug_line = opt_debug_line orelse return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1055","line":"            .debug_line_str = opt_debug_line_str,"},
{"lineNum":" 1056","line":"            .debug_ranges = opt_debug_ranges,"},
{"lineNum":" 1057","line":"            .debug_loclists = opt_debug_loclists,"},
{"lineNum":" 1058","line":"            .debug_rnglists = opt_debug_rnglists,"},
{"lineNum":" 1059","line":"            .debug_addr = opt_debug_addr,"},
{"lineNum":" 1060","line":"            .debug_names = opt_debug_names,"},
{"lineNum":" 1061","line":"            .debug_frame = opt_debug_frame,"},
{"lineNum":" 1062","line":"        };"},
{"lineNum":" 1063","line":""},
{"lineNum":" 1064","line":"        try DW.openDwarfDebugInfo(&di, allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1065","line":""},
{"lineNum":" 1066","line":"        return ModuleDebugInfo{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1067","line":"            .base_address = undefined,"},
{"lineNum":" 1068","line":"            .dwarf = di,"},
{"lineNum":" 1069","line":"            .mapped_memory = mapped_mem,"},
{"lineNum":" 1070","line":"        };"},
{"lineNum":" 1071","line":"    }"},
{"lineNum":" 1072","line":"}"},
{"lineNum":" 1073","line":""},
{"lineNum":" 1074","line":"/// This takes ownership of macho_file: users of this function should not close"},
{"lineNum":" 1075","line":"/// it themselves, even on error."},
{"lineNum":" 1076","line":"/// TODO it\'s weird to take ownership even on error, rework this code."},
{"lineNum":" 1077","line":"fn readMachODebugInfo(allocator: mem.Allocator, macho_file: File) !ModuleDebugInfo {"},
{"lineNum":" 1078","line":"    const mapped_mem = try mapWholeFile(macho_file);"},
{"lineNum":" 1079","line":""},
{"lineNum":" 1080","line":"    const hdr = @ptrCast("},
{"lineNum":" 1081","line":"        *const macho.mach_header_64,"},
{"lineNum":" 1082","line":"        @alignCast(@alignOf(macho.mach_header_64), mapped_mem.ptr),"},
{"lineNum":" 1083","line":"    );"},
{"lineNum":" 1084","line":"    if (hdr.magic != macho.MH_MAGIC_64)"},
{"lineNum":" 1085","line":"        return error.InvalidDebugInfo;"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    var it = macho.LoadCommandIterator{"},
{"lineNum":" 1088","line":"        .ncmds = hdr.ncmds,"},
{"lineNum":" 1089","line":"        .buffer = mapped_mem[@sizeOf(macho.mach_header_64)..][0..hdr.sizeofcmds],"},
{"lineNum":" 1090","line":"    };"},
{"lineNum":" 1091","line":"    const symtab = while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1092","line":"        .SYMTAB => break cmd.cast(macho.symtab_command).?,"},
{"lineNum":" 1093","line":"        else => {},"},
{"lineNum":" 1094","line":"    } else return error.MissingDebugInfo;"},
{"lineNum":" 1095","line":""},
{"lineNum":" 1096","line":"    const syms = @ptrCast("},
{"lineNum":" 1097","line":"        [*]const macho.nlist_64,"},
{"lineNum":" 1098","line":"        @alignCast(@alignOf(macho.nlist_64), &mapped_mem[symtab.symoff]),"},
{"lineNum":" 1099","line":"    )[0..symtab.nsyms];"},
{"lineNum":" 1100","line":"    const strings = mapped_mem[symtab.stroff..][0 .. symtab.strsize - 1 :0];"},
{"lineNum":" 1101","line":""},
{"lineNum":" 1102","line":"    const symbols_buf = try allocator.alloc(MachoSymbol, syms.len);"},
{"lineNum":" 1103","line":""},
{"lineNum":" 1104","line":"    var ofile: u32 = undefined;"},
{"lineNum":" 1105","line":"    var last_sym: MachoSymbol = undefined;"},
{"lineNum":" 1106","line":"    var symbol_index: usize = 0;"},
{"lineNum":" 1107","line":"    var state: enum {"},
{"lineNum":" 1108","line":"        init,"},
{"lineNum":" 1109","line":"        oso_open,"},
{"lineNum":" 1110","line":"        oso_close,"},
{"lineNum":" 1111","line":"        bnsym,"},
{"lineNum":" 1112","line":"        fun_strx,"},
{"lineNum":" 1113","line":"        fun_size,"},
{"lineNum":" 1114","line":"        ensym,"},
{"lineNum":" 1115","line":"    } = .init;"},
{"lineNum":" 1116","line":""},
{"lineNum":" 1117","line":"    for (syms) |*sym| {"},
{"lineNum":" 1118","line":"        if (!sym.stab()) continue;"},
{"lineNum":" 1119","line":""},
{"lineNum":" 1120","line":"        // TODO handle globals N_GSYM, and statics N_STSYM"},
{"lineNum":" 1121","line":"        switch (sym.n_type) {"},
{"lineNum":" 1122","line":"            macho.N_OSO => {"},
{"lineNum":" 1123","line":"                switch (state) {"},
{"lineNum":" 1124","line":"                    .init, .oso_close => {"},
{"lineNum":" 1125","line":"                        state = .oso_open;"},
{"lineNum":" 1126","line":"                        ofile = sym.n_strx;"},
{"lineNum":" 1127","line":"                    },"},
{"lineNum":" 1128","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1129","line":"                }"},
{"lineNum":" 1130","line":"            },"},
{"lineNum":" 1131","line":"            macho.N_BNSYM => {"},
{"lineNum":" 1132","line":"                switch (state) {"},
{"lineNum":" 1133","line":"                    .oso_open, .ensym => {"},
{"lineNum":" 1134","line":"                        state = .bnsym;"},
{"lineNum":" 1135","line":"                        last_sym = .{"},
{"lineNum":" 1136","line":"                            .strx = 0,"},
{"lineNum":" 1137","line":"                            .addr = sym.n_value,"},
{"lineNum":" 1138","line":"                            .size = 0,"},
{"lineNum":" 1139","line":"                            .ofile = ofile,"},
{"lineNum":" 1140","line":"                        };"},
{"lineNum":" 1141","line":"                    },"},
{"lineNum":" 1142","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1143","line":"                }"},
{"lineNum":" 1144","line":"            },"},
{"lineNum":" 1145","line":"            macho.N_FUN => {"},
{"lineNum":" 1146","line":"                switch (state) {"},
{"lineNum":" 1147","line":"                    .bnsym => {"},
{"lineNum":" 1148","line":"                        state = .fun_strx;"},
{"lineNum":" 1149","line":"                        last_sym.strx = sym.n_strx;"},
{"lineNum":" 1150","line":"                    },"},
{"lineNum":" 1151","line":"                    .fun_strx => {"},
{"lineNum":" 1152","line":"                        state = .fun_size;"},
{"lineNum":" 1153","line":"                        last_sym.size = @intCast(u32, sym.n_value);"},
{"lineNum":" 1154","line":"                    },"},
{"lineNum":" 1155","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1156","line":"                }"},
{"lineNum":" 1157","line":"            },"},
{"lineNum":" 1158","line":"            macho.N_ENSYM => {"},
{"lineNum":" 1159","line":"                switch (state) {"},
{"lineNum":" 1160","line":"                    .fun_size => {"},
{"lineNum":" 1161","line":"                        state = .ensym;"},
{"lineNum":" 1162","line":"                        symbols_buf[symbol_index] = last_sym;"},
{"lineNum":" 1163","line":"                        symbol_index += 1;"},
{"lineNum":" 1164","line":"                    },"},
{"lineNum":" 1165","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1166","line":"                }"},
{"lineNum":" 1167","line":"            },"},
{"lineNum":" 1168","line":"            macho.N_SO => {"},
{"lineNum":" 1169","line":"                switch (state) {"},
{"lineNum":" 1170","line":"                    .init, .oso_close => {},"},
{"lineNum":" 1171","line":"                    .oso_open, .ensym => {"},
{"lineNum":" 1172","line":"                        state = .oso_close;"},
{"lineNum":" 1173","line":"                    },"},
{"lineNum":" 1174","line":"                    else => return error.InvalidDebugInfo,"},
{"lineNum":" 1175","line":"                }"},
{"lineNum":" 1176","line":"            },"},
{"lineNum":" 1177","line":"            else => {},"},
{"lineNum":" 1178","line":"        }"},
{"lineNum":" 1179","line":"    }"},
{"lineNum":" 1180","line":""},
{"lineNum":" 1181","line":"    switch (state) {"},
{"lineNum":" 1182","line":"        .init => return error.MissingDebugInfo,"},
{"lineNum":" 1183","line":"        .oso_close => {},"},
{"lineNum":" 1184","line":"        else => return error.InvalidDebugInfo,"},
{"lineNum":" 1185","line":"    }"},
{"lineNum":" 1186","line":""},
{"lineNum":" 1187","line":"    const symbols = try allocator.realloc(symbols_buf, symbol_index);"},
{"lineNum":" 1188","line":""},
{"lineNum":" 1189","line":"    // Even though lld emits symbols in ascending order, this debug code"},
{"lineNum":" 1190","line":"    // should work for programs linked in any valid way."},
{"lineNum":" 1191","line":"    // This sort is so that we can binary search later."},
{"lineNum":" 1192","line":"    std.sort.sort(MachoSymbol, symbols, {}, MachoSymbol.addressLessThan);"},
{"lineNum":" 1193","line":""},
{"lineNum":" 1194","line":"    return ModuleDebugInfo{"},
{"lineNum":" 1195","line":"        .base_address = undefined,"},
{"lineNum":" 1196","line":"        .mapped_memory = mapped_mem,"},
{"lineNum":" 1197","line":"        .ofiles = ModuleDebugInfo.OFileTable.init(allocator),"},
{"lineNum":" 1198","line":"        .symbols = symbols,"},
{"lineNum":" 1199","line":"        .strings = strings,"},
{"lineNum":" 1200","line":"    };"},
{"lineNum":" 1201","line":"}"},
{"lineNum":" 1202","line":""},
{"lineNum":" 1203","line":"fn printLineFromFileAnyOs(out_stream: anytype, line_info: LineInfo) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1204","line":"    // Need this to always block even in async I/O mode, because this could potentially"},
{"lineNum":" 1205","line":"    // be called from e.g. the event loop code crashing."},
{"lineNum":" 1206","line":"    var f = try fs.cwd().openFile(line_info.file_name, .{ .intended_io_mode = .blocking });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1207","line":"    defer f.close();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1208","line":"    // TODO fstat and make sure that the file has the correct size"},
{"lineNum":" 1209","line":""},
{"lineNum":" 1210","line":"    var buf: [mem.page_size]u8 = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1211","line":"    var line: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1212","line":"    var column: usize = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1213","line":"    while (true) {"},
{"lineNum":" 1214","line":"        const amt_read = try f.read(buf[0..]);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1215","line":"        const slice = buf[0..amt_read];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1216","line":""},
{"lineNum":" 1217","line":"        for (slice) |byte| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1218","line":"            if (line == line_info.line) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1219","line":"                switch (byte) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1220","line":"                    \'\\t\' => try out_stream.writeByte(\' \'),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1221","line":"                    else => try out_stream.writeByte(byte),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1222","line":"                }"},
{"lineNum":" 1223","line":"                if (byte == \'\\n\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1224","line":"                    return;"},
{"lineNum":" 1225","line":"                }"},
{"lineNum":" 1226","line":"            }"},
{"lineNum":" 1227","line":"            if (byte == \'\\n\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1228","line":"                line += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1229","line":"                column = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1230","line":"            } else {"},
{"lineNum":" 1231","line":"                column += 1;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1232","line":"            }"},
{"lineNum":" 1233","line":"        }"},
{"lineNum":" 1234","line":""},
{"lineNum":" 1235","line":"        if (amt_read < buf.len) return error.EndOfFile;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1236","line":"    }"},
{"lineNum":" 1237","line":"}"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"const MachoSymbol = struct {"},
{"lineNum":" 1240","line":"    strx: u32,"},
{"lineNum":" 1241","line":"    addr: u64,"},
{"lineNum":" 1242","line":"    size: u32,"},
{"lineNum":" 1243","line":"    ofile: u32,"},
{"lineNum":" 1244","line":""},
{"lineNum":" 1245","line":"    /// Returns the address from the macho file"},
{"lineNum":" 1246","line":"    fn address(self: MachoSymbol) u64 {"},
{"lineNum":" 1247","line":"        return self.addr;"},
{"lineNum":" 1248","line":"    }"},
{"lineNum":" 1249","line":""},
{"lineNum":" 1250","line":"    fn addressLessThan(context: void, lhs: MachoSymbol, rhs: MachoSymbol) bool {"},
{"lineNum":" 1251","line":"        _ = context;"},
{"lineNum":" 1252","line":"        return lhs.addr < rhs.addr;"},
{"lineNum":" 1253","line":"    }"},
{"lineNum":" 1254","line":"};"},
{"lineNum":" 1255","line":""},
{"lineNum":" 1256","line":"/// `file` is expected to have been opened with .intended_io_mode == .blocking."},
{"lineNum":" 1257","line":"/// Takes ownership of file, even on error."},
{"lineNum":" 1258","line":"/// TODO it\'s weird to take ownership even on error, rework this code."},
{"lineNum":" 1259","line":"fn mapWholeFile(file: File) ![]align(mem.page_size) const u8 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1260","line":"    nosuspend {"},
{"lineNum":" 1261","line":"        defer file.close();","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1262","line":""},
{"lineNum":" 1263","line":"        const file_len = math.cast(usize, try file.getEndPos()) orelse math.maxInt(usize);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1264","line":"        const mapped_mem = try os.mmap(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1265","line":"            null,"},
{"lineNum":" 1266","line":"            file_len,"},
{"lineNum":" 1267","line":"            os.PROT.READ,"},
{"lineNum":" 1268","line":"            os.MAP.SHARED,"},
{"lineNum":" 1269","line":"            file.handle,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1270","line":"            0,"},
{"lineNum":" 1271","line":"        );"},
{"lineNum":" 1272","line":"        errdefer os.munmap(mapped_mem);"},
{"lineNum":" 1273","line":""},
{"lineNum":" 1274","line":"        return mapped_mem;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1275","line":"    }"},
{"lineNum":" 1276","line":"}"},
{"lineNum":" 1277","line":""},
{"lineNum":" 1278","line":"pub const ModuleInfo = struct {"},
{"lineNum":" 1279","line":"    base_address: usize,"},
{"lineNum":" 1280","line":"    size: u32,"},
{"lineNum":" 1281","line":"};"},
{"lineNum":" 1282","line":""},
{"lineNum":" 1283","line":"pub const DebugInfo = struct {"},
{"lineNum":" 1284","line":"    allocator: mem.Allocator,"},
{"lineNum":" 1285","line":"    address_map: std.AutoHashMap(usize, *ModuleDebugInfo),"},
{"lineNum":" 1286","line":"    modules: if (native_os == .windows) std.ArrayListUnmanaged(ModuleInfo) else void,"},
{"lineNum":" 1287","line":""},
{"lineNum":" 1288","line":"    pub fn init(allocator: mem.Allocator) !DebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1289","line":"        var debug_info = DebugInfo{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1290","line":"            .allocator = allocator,"},
{"lineNum":" 1291","line":"            .address_map = std.AutoHashMap(usize, *ModuleDebugInfo).init(allocator),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1292","line":"            .modules = if (native_os == .windows) .{} else {},"},
{"lineNum":" 1293","line":"        };"},
{"lineNum":" 1294","line":""},
{"lineNum":" 1295","line":"        if (native_os == .windows) {"},
{"lineNum":" 1296","line":"            const handle = windows.kernel32.CreateToolhelp32Snapshot(windows.TH32CS_SNAPMODULE | windows.TH32CS_SNAPMODULE32, 0);"},
{"lineNum":" 1297","line":"            if (handle == windows.INVALID_HANDLE_VALUE) {"},
{"lineNum":" 1298","line":"                switch (windows.kernel32.GetLastError()) {"},
{"lineNum":" 1299","line":"                    else => |err| return windows.unexpectedError(err),"},
{"lineNum":" 1300","line":"                }"},
{"lineNum":" 1301","line":"            }"},
{"lineNum":" 1302","line":""},
{"lineNum":" 1303","line":"            defer windows.CloseHandle(handle);"},
{"lineNum":" 1304","line":""},
{"lineNum":" 1305","line":"            var module_entry: windows.MODULEENTRY32 = undefined;"},
{"lineNum":" 1306","line":"            module_entry.dwSize = @sizeOf(windows.MODULEENTRY32);"},
{"lineNum":" 1307","line":"            if (windows.kernel32.Module32First(handle, &module_entry) == 0) {"},
{"lineNum":" 1308","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1309","line":"            }"},
{"lineNum":" 1310","line":""},
{"lineNum":" 1311","line":"            var module_valid = true;"},
{"lineNum":" 1312","line":"            while (module_valid) {"},
{"lineNum":" 1313","line":"                const module_info = try debug_info.modules.addOne(allocator);"},
{"lineNum":" 1314","line":"                module_info.base_address = @ptrToInt(module_entry.modBaseAddr);"},
{"lineNum":" 1315","line":"                module_info.size = module_entry.modBaseSize;"},
{"lineNum":" 1316","line":"                module_valid = windows.kernel32.Module32Next(handle, &module_entry) == 1;"},
{"lineNum":" 1317","line":"            }"},
{"lineNum":" 1318","line":"        }"},
{"lineNum":" 1319","line":""},
{"lineNum":" 1320","line":"        return debug_info;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1321","line":"    }"},
{"lineNum":" 1322","line":""},
{"lineNum":" 1323","line":"    pub fn deinit(self: *DebugInfo) void {"},
{"lineNum":" 1324","line":"        var it = self.address_map.iterator();"},
{"lineNum":" 1325","line":"        while (it.next()) |entry| {"},
{"lineNum":" 1326","line":"            const mdi = entry.value_ptr.*;"},
{"lineNum":" 1327","line":"            mdi.deinit(self.allocator);"},
{"lineNum":" 1328","line":"            self.allocator.destroy(mdi);"},
{"lineNum":" 1329","line":"        }"},
{"lineNum":" 1330","line":"        self.address_map.deinit();"},
{"lineNum":" 1331","line":"        if (native_os == .windows) self.modules.deinit(self.allocator);"},
{"lineNum":" 1332","line":"    }"},
{"lineNum":" 1333","line":""},
{"lineNum":" 1334","line":"    pub fn getModuleForAddress(self: *DebugInfo, address: usize) !*ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1335","line":"        if (builtin.zig_backend == .stage2_c) {"},
{"lineNum":" 1336","line":"            return @as(error{"},
{"lineNum":" 1337","line":"                InvalidDebugInfo,"},
{"lineNum":" 1338","line":"                MissingDebugInfo,"},
{"lineNum":" 1339","line":"                UnsupportedBackend,"},
{"lineNum":" 1340","line":"            }, error.UnsupportedBackend);"},
{"lineNum":" 1341","line":"        } else if (comptime builtin.target.isDarwin()) {"},
{"lineNum":" 1342","line":"            return self.lookupModuleDyld(address);"},
{"lineNum":" 1343","line":"        } else if (native_os == .windows) {"},
{"lineNum":" 1344","line":"            return self.lookupModuleWin32(address);"},
{"lineNum":" 1345","line":"        } else if (native_os == .haiku) {"},
{"lineNum":" 1346","line":"            return self.lookupModuleHaiku(address);"},
{"lineNum":" 1347","line":"        } else if (comptime builtin.target.isWasm()) {"},
{"lineNum":" 1348","line":"            return self.lookupModuleWasm(address);"},
{"lineNum":" 1349","line":"        } else {"},
{"lineNum":" 1350","line":"            return self.lookupModuleDl(address);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1351","line":"        }"},
{"lineNum":" 1352","line":"    }"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"    fn lookupModuleDyld(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1355","line":"        const image_count = std.c._dyld_image_count();"},
{"lineNum":" 1356","line":""},
{"lineNum":" 1357","line":"        var i: u32 = 0;"},
{"lineNum":" 1358","line":"        while (i < image_count) : (i += 1) {"},
{"lineNum":" 1359","line":"            const base_address = std.c._dyld_get_image_vmaddr_slide(i);"},
{"lineNum":" 1360","line":""},
{"lineNum":" 1361","line":"            if (address < base_address) continue;"},
{"lineNum":" 1362","line":""},
{"lineNum":" 1363","line":"            const header = std.c._dyld_get_image_header(i) orelse continue;"},
{"lineNum":" 1364","line":""},
{"lineNum":" 1365","line":"            var it = macho.LoadCommandIterator{"},
{"lineNum":" 1366","line":"                .ncmds = header.ncmds,"},
{"lineNum":" 1367","line":"                .buffer = @alignCast(@alignOf(u64), @intToPtr("},
{"lineNum":" 1368","line":"                    [*]u8,"},
{"lineNum":" 1369","line":"                    @ptrToInt(header) + @sizeOf(macho.mach_header_64),"},
{"lineNum":" 1370","line":"                ))[0..header.sizeofcmds],"},
{"lineNum":" 1371","line":"            };"},
{"lineNum":" 1372","line":"            while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1373","line":"                .SEGMENT_64 => {"},
{"lineNum":" 1374","line":"                    const segment_cmd = cmd.cast(macho.segment_command_64).?;"},
{"lineNum":" 1375","line":"                    const rebased_address = address - base_address;"},
{"lineNum":" 1376","line":"                    const seg_start = segment_cmd.vmaddr;"},
{"lineNum":" 1377","line":"                    const seg_end = seg_start + segment_cmd.vmsize;"},
{"lineNum":" 1378","line":""},
{"lineNum":" 1379","line":"                    if (rebased_address >= seg_start and rebased_address < seg_end) {"},
{"lineNum":" 1380","line":"                        if (self.address_map.get(base_address)) |obj_di| {"},
{"lineNum":" 1381","line":"                            return obj_di;"},
{"lineNum":" 1382","line":"                        }"},
{"lineNum":" 1383","line":""},
{"lineNum":" 1384","line":"                        const obj_di = try self.allocator.create(ModuleDebugInfo);"},
{"lineNum":" 1385","line":"                        errdefer self.allocator.destroy(obj_di);"},
{"lineNum":" 1386","line":""},
{"lineNum":" 1387","line":"                        const macho_path = mem.sliceTo(std.c._dyld_get_image_name(i), 0);"},
{"lineNum":" 1388","line":"                        const macho_file = fs.cwd().openFile(macho_path, .{"},
{"lineNum":" 1389","line":"                            .intended_io_mode = .blocking,"},
{"lineNum":" 1390","line":"                        }) catch |err| switch (err) {"},
{"lineNum":" 1391","line":"                            error.FileNotFound => return error.MissingDebugInfo,"},
{"lineNum":" 1392","line":"                            else => return err,"},
{"lineNum":" 1393","line":"                        };"},
{"lineNum":" 1394","line":"                        obj_di.* = try readMachODebugInfo(self.allocator, macho_file);"},
{"lineNum":" 1395","line":"                        obj_di.base_address = base_address;"},
{"lineNum":" 1396","line":""},
{"lineNum":" 1397","line":"                        try self.address_map.putNoClobber(base_address, obj_di);"},
{"lineNum":" 1398","line":""},
{"lineNum":" 1399","line":"                        return obj_di;"},
{"lineNum":" 1400","line":"                    }"},
{"lineNum":" 1401","line":"                },"},
{"lineNum":" 1402","line":"                else => {},"},
{"lineNum":" 1403","line":"            };"},
{"lineNum":" 1404","line":"        }"},
{"lineNum":" 1405","line":""},
{"lineNum":" 1406","line":"        return error.MissingDebugInfo;"},
{"lineNum":" 1407","line":"    }"},
{"lineNum":" 1408","line":""},
{"lineNum":" 1409","line":"    fn lookupModuleWin32(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1410","line":"        for (self.modules.items) |module| {"},
{"lineNum":" 1411","line":"            if (address >= module.base_address and address < module.base_address + module.size) {"},
{"lineNum":" 1412","line":"                if (self.address_map.get(module.base_address)) |obj_di| {"},
{"lineNum":" 1413","line":"                    return obj_di;"},
{"lineNum":" 1414","line":"                }"},
{"lineNum":" 1415","line":""},
{"lineNum":" 1416","line":"                const mapped_module = @intToPtr([*]const u8, module.base_address)[0..module.size];"},
{"lineNum":" 1417","line":"                const obj_di = try self.allocator.create(ModuleDebugInfo);"},
{"lineNum":" 1418","line":"                errdefer self.allocator.destroy(obj_di);"},
{"lineNum":" 1419","line":""},
{"lineNum":" 1420","line":"                obj_di.* = try readCoffDebugInfo(self.allocator, mapped_module);"},
{"lineNum":" 1421","line":"                obj_di.base_address = module.base_address;"},
{"lineNum":" 1422","line":""},
{"lineNum":" 1423","line":"                try self.address_map.putNoClobber(module.base_address, obj_di);"},
{"lineNum":" 1424","line":"                return obj_di;"},
{"lineNum":" 1425","line":"            }"},
{"lineNum":" 1426","line":"        }"},
{"lineNum":" 1427","line":""},
{"lineNum":" 1428","line":"        return error.MissingDebugInfo;"},
{"lineNum":" 1429","line":"    }"},
{"lineNum":" 1430","line":""},
{"lineNum":" 1431","line":"    fn lookupModuleDl(self: *DebugInfo, address: usize) !*ModuleDebugInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1432","line":"        var ctx: struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1433","line":"            // Input"},
{"lineNum":" 1434","line":"            address: usize,"},
{"lineNum":" 1435","line":"            // Output"},
{"lineNum":" 1436","line":"            base_address: usize = undefined,"},
{"lineNum":" 1437","line":"            name: []const u8 = undefined,"},
{"lineNum":" 1438","line":"        } = .{ .address = address };"},
{"lineNum":" 1439","line":"        const CtxTy = @TypeOf(ctx);"},
{"lineNum":" 1440","line":""},
{"lineNum":" 1441","line":"        if (os.dl_iterate_phdr(&ctx, error{Found}, struct {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1442","line":"            fn callback(info: *os.dl_phdr_info, size: usize, context: *CtxTy) !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1443","line":"                _ = size;"},
{"lineNum":" 1444","line":"                // The base address is too high"},
{"lineNum":" 1445","line":"                if (context.address < info.dlpi_addr)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1446","line":"                    return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1447","line":""},
{"lineNum":" 1448","line":"                const phdrs = info.dlpi_phdr[0..info.dlpi_phnum];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1449","line":"                for (phdrs) |*phdr| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1450","line":"                    if (phdr.p_type != elf.PT_LOAD) continue;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1451","line":""},
{"lineNum":" 1452","line":"                    const seg_start = info.dlpi_addr + phdr.p_vaddr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1453","line":"                    const seg_end = seg_start + phdr.p_memsz;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1454","line":""},
{"lineNum":" 1455","line":"                    if (context.address >= seg_start and context.address < seg_end) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1456","line":"                        // Android libc uses NULL instead of an empty string to mark the"},
{"lineNum":" 1457","line":"                        // main program"},
{"lineNum":" 1458","line":"                        context.name = mem.sliceTo(info.dlpi_name, 0) orelse \"\";","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1459","line":"                        context.base_address = info.dlpi_addr;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1460","line":"                        // Stop the iteration"},
{"lineNum":" 1461","line":"                        return error.Found;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1462","line":"                    }"},
{"lineNum":" 1463","line":"                }"},
{"lineNum":" 1464","line":"            }"},
{"lineNum":" 1465","line":"        }.callback)) {"},
{"lineNum":" 1466","line":"            return error.MissingDebugInfo;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1467","line":"        } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1468","line":"            error.Found => {},"},
{"lineNum":" 1469","line":"        }"},
{"lineNum":" 1470","line":""},
{"lineNum":" 1471","line":"        if (self.address_map.get(ctx.base_address)) |obj_di| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1472","line":"            return obj_di;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1473","line":"        }"},
{"lineNum":" 1474","line":""},
{"lineNum":" 1475","line":"        const obj_di = try self.allocator.create(ModuleDebugInfo);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1476","line":"        errdefer self.allocator.destroy(obj_di);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":" 1477","line":""},
{"lineNum":" 1478","line":"        // TODO https://github.com/ziglang/zig/issues/5525"},
{"lineNum":" 1479","line":"        const copy = if (ctx.name.len > 0)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1480","line":"            fs.cwd().openFile(ctx.name, .{ .intended_io_mode = .blocking })","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1481","line":"        else"},
{"lineNum":" 1482","line":"            fs.openSelfExe(.{ .intended_io_mode = .blocking });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1483","line":""},
{"lineNum":" 1484","line":"        const elf_file = copy catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1485","line":"            error.FileNotFound => return error.MissingDebugInfo,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1486","line":"            else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1487","line":"        };"},
{"lineNum":" 1488","line":""},
{"lineNum":" 1489","line":"        obj_di.* = try readElfDebugInfo(self.allocator, elf_file);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1490","line":"        obj_di.base_address = ctx.base_address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1491","line":""},
{"lineNum":" 1492","line":"        try self.address_map.putNoClobber(ctx.base_address, obj_di);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1493","line":""},
{"lineNum":" 1494","line":"        return obj_di;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1495","line":"    }"},
{"lineNum":" 1496","line":""},
{"lineNum":" 1497","line":"    fn lookupModuleHaiku(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1498","line":"        _ = self;"},
{"lineNum":" 1499","line":"        _ = address;"},
{"lineNum":" 1500","line":"        @panic(\"TODO implement lookup module for Haiku\");"},
{"lineNum":" 1501","line":"    }"},
{"lineNum":" 1502","line":""},
{"lineNum":" 1503","line":"    fn lookupModuleWasm(self: *DebugInfo, address: usize) !*ModuleDebugInfo {"},
{"lineNum":" 1504","line":"        _ = self;"},
{"lineNum":" 1505","line":"        _ = address;"},
{"lineNum":" 1506","line":"        @panic(\"TODO implement lookup module for Wasm\");"},
{"lineNum":" 1507","line":"    }"},
{"lineNum":" 1508","line":"};"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"pub const ModuleDebugInfo = switch (native_os) {"},
{"lineNum":" 1511","line":"    .macos, .ios, .watchos, .tvos => struct {"},
{"lineNum":" 1512","line":"        base_address: usize,"},
{"lineNum":" 1513","line":"        mapped_memory: []align(mem.page_size) const u8,"},
{"lineNum":" 1514","line":"        symbols: []const MachoSymbol,"},
{"lineNum":" 1515","line":"        strings: [:0]const u8,"},
{"lineNum":" 1516","line":"        ofiles: OFileTable,"},
{"lineNum":" 1517","line":""},
{"lineNum":" 1518","line":"        const OFileTable = std.StringHashMap(OFileInfo);"},
{"lineNum":" 1519","line":"        const OFileInfo = struct {"},
{"lineNum":" 1520","line":"            di: DW.DwarfInfo,"},
{"lineNum":" 1521","line":"            addr_table: std.StringHashMap(u64),"},
{"lineNum":" 1522","line":"        };"},
{"lineNum":" 1523","line":""},
{"lineNum":" 1524","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 1525","line":"            var it = self.ofiles.iterator();"},
{"lineNum":" 1526","line":"            while (it.next()) |entry| {"},
{"lineNum":" 1527","line":"                const ofile = entry.value_ptr;"},
{"lineNum":" 1528","line":"                ofile.di.deinit(allocator);"},
{"lineNum":" 1529","line":"                ofile.addr_table.deinit();"},
{"lineNum":" 1530","line":"            }"},
{"lineNum":" 1531","line":"            self.ofiles.deinit();"},
{"lineNum":" 1532","line":"            allocator.free(self.symbols);"},
{"lineNum":" 1533","line":"            os.munmap(self.mapped_memory);"},
{"lineNum":" 1534","line":"        }"},
{"lineNum":" 1535","line":""},
{"lineNum":" 1536","line":"        fn loadOFile(self: *@This(), allocator: mem.Allocator, o_file_path: []const u8) !OFileInfo {"},
{"lineNum":" 1537","line":"            const o_file = try fs.cwd().openFile(o_file_path, .{ .intended_io_mode = .blocking });"},
{"lineNum":" 1538","line":"            const mapped_mem = try mapWholeFile(o_file);"},
{"lineNum":" 1539","line":""},
{"lineNum":" 1540","line":"            const hdr = @ptrCast("},
{"lineNum":" 1541","line":"                *const macho.mach_header_64,"},
{"lineNum":" 1542","line":"                @alignCast(@alignOf(macho.mach_header_64), mapped_mem.ptr),"},
{"lineNum":" 1543","line":"            );"},
{"lineNum":" 1544","line":"            if (hdr.magic != std.macho.MH_MAGIC_64)"},
{"lineNum":" 1545","line":"                return error.InvalidDebugInfo;"},
{"lineNum":" 1546","line":""},
{"lineNum":" 1547","line":"            var segcmd: ?macho.LoadCommandIterator.LoadCommand = null;"},
{"lineNum":" 1548","line":"            var symtabcmd: ?macho.symtab_command = null;"},
{"lineNum":" 1549","line":"            var it = macho.LoadCommandIterator{"},
{"lineNum":" 1550","line":"                .ncmds = hdr.ncmds,"},
{"lineNum":" 1551","line":"                .buffer = mapped_mem[@sizeOf(macho.mach_header_64)..][0..hdr.sizeofcmds],"},
{"lineNum":" 1552","line":"            };"},
{"lineNum":" 1553","line":"            while (it.next()) |cmd| switch (cmd.cmd()) {"},
{"lineNum":" 1554","line":"                .SEGMENT_64 => segcmd = cmd,"},
{"lineNum":" 1555","line":"                .SYMTAB => symtabcmd = cmd.cast(macho.symtab_command).?,"},
{"lineNum":" 1556","line":"                else => {},"},
{"lineNum":" 1557","line":"            };"},
{"lineNum":" 1558","line":""},
{"lineNum":" 1559","line":"            if (segcmd == null or symtabcmd == null) return error.MissingDebugInfo;"},
{"lineNum":" 1560","line":""},
{"lineNum":" 1561","line":"            // Parse symbols"},
{"lineNum":" 1562","line":"            const strtab = @ptrCast("},
{"lineNum":" 1563","line":"                [*]const u8,"},
{"lineNum":" 1564","line":"                &mapped_mem[symtabcmd.?.stroff],"},
{"lineNum":" 1565","line":"            )[0 .. symtabcmd.?.strsize - 1 :0];"},
{"lineNum":" 1566","line":"            const symtab = @ptrCast("},
{"lineNum":" 1567","line":"                [*]const macho.nlist_64,"},
{"lineNum":" 1568","line":"                @alignCast("},
{"lineNum":" 1569","line":"                    @alignOf(macho.nlist_64),"},
{"lineNum":" 1570","line":"                    &mapped_mem[symtabcmd.?.symoff],"},
{"lineNum":" 1571","line":"                ),"},
{"lineNum":" 1572","line":"            )[0..symtabcmd.?.nsyms];"},
{"lineNum":" 1573","line":""},
{"lineNum":" 1574","line":"            // TODO handle tentative (common) symbols"},
{"lineNum":" 1575","line":"            var addr_table = std.StringHashMap(u64).init(allocator);"},
{"lineNum":" 1576","line":"            try addr_table.ensureTotalCapacity(@intCast(u32, symtab.len));"},
{"lineNum":" 1577","line":"            for (symtab) |sym| {"},
{"lineNum":" 1578","line":"                if (sym.n_strx == 0) continue;"},
{"lineNum":" 1579","line":"                if (sym.undf() or sym.tentative() or sym.abs()) continue;"},
{"lineNum":" 1580","line":"                const sym_name = mem.sliceTo(strtab[sym.n_strx..], 0);"},
{"lineNum":" 1581","line":"                // TODO is it possible to have a symbol collision?"},
{"lineNum":" 1582","line":"                addr_table.putAssumeCapacityNoClobber(sym_name, sym.n_value);"},
{"lineNum":" 1583","line":"            }"},
{"lineNum":" 1584","line":""},
{"lineNum":" 1585","line":"            var opt_debug_line: ?macho.section_64 = null;"},
{"lineNum":" 1586","line":"            var opt_debug_info: ?macho.section_64 = null;"},
{"lineNum":" 1587","line":"            var opt_debug_abbrev: ?macho.section_64 = null;"},
{"lineNum":" 1588","line":"            var opt_debug_str: ?macho.section_64 = null;"},
{"lineNum":" 1589","line":"            var opt_debug_str_offsets: ?macho.section_64 = null;"},
{"lineNum":" 1590","line":"            var opt_debug_line_str: ?macho.section_64 = null;"},
{"lineNum":" 1591","line":"            var opt_debug_ranges: ?macho.section_64 = null;"},
{"lineNum":" 1592","line":"            var opt_debug_loclists: ?macho.section_64 = null;"},
{"lineNum":" 1593","line":"            var opt_debug_rnglists: ?macho.section_64 = null;"},
{"lineNum":" 1594","line":"            var opt_debug_addr: ?macho.section_64 = null;"},
{"lineNum":" 1595","line":"            var opt_debug_names: ?macho.section_64 = null;"},
{"lineNum":" 1596","line":"            var opt_debug_frame: ?macho.section_64 = null;"},
{"lineNum":" 1597","line":""},
{"lineNum":" 1598","line":"            for (segcmd.?.getSections()) |sect| {"},
{"lineNum":" 1599","line":"                const name = sect.sectName();"},
{"lineNum":" 1600","line":"                if (mem.eql(u8, name, \"__debug_line\")) {"},
{"lineNum":" 1601","line":"                    opt_debug_line = sect;"},
{"lineNum":" 1602","line":"                } else if (mem.eql(u8, name, \"__debug_info\")) {"},
{"lineNum":" 1603","line":"                    opt_debug_info = sect;"},
{"lineNum":" 1604","line":"                } else if (mem.eql(u8, name, \"__debug_abbrev\")) {"},
{"lineNum":" 1605","line":"                    opt_debug_abbrev = sect;"},
{"lineNum":" 1606","line":"                } else if (mem.eql(u8, name, \"__debug_str\")) {"},
{"lineNum":" 1607","line":"                    opt_debug_str = sect;"},
{"lineNum":" 1608","line":"                } else if (mem.eql(u8, name, \"__debug_str_offsets\")) {"},
{"lineNum":" 1609","line":"                    opt_debug_str_offsets = sect;"},
{"lineNum":" 1610","line":"                } else if (mem.eql(u8, name, \"__debug_line_str\")) {"},
{"lineNum":" 1611","line":"                    opt_debug_line_str = sect;"},
{"lineNum":" 1612","line":"                } else if (mem.eql(u8, name, \"__debug_ranges\")) {"},
{"lineNum":" 1613","line":"                    opt_debug_ranges = sect;"},
{"lineNum":" 1614","line":"                } else if (mem.eql(u8, name, \"__debug_loclists\")) {"},
{"lineNum":" 1615","line":"                    opt_debug_loclists = sect;"},
{"lineNum":" 1616","line":"                } else if (mem.eql(u8, name, \"__debug_rnglists\")) {"},
{"lineNum":" 1617","line":"                    opt_debug_rnglists = sect;"},
{"lineNum":" 1618","line":"                } else if (mem.eql(u8, name, \"__debug_addr\")) {"},
{"lineNum":" 1619","line":"                    opt_debug_addr = sect;"},
{"lineNum":" 1620","line":"                } else if (mem.eql(u8, name, \"__debug_names\")) {"},
{"lineNum":" 1621","line":"                    opt_debug_names = sect;"},
{"lineNum":" 1622","line":"                } else if (mem.eql(u8, name, \"__debug_frame\")) {"},
{"lineNum":" 1623","line":"                    opt_debug_frame = sect;"},
{"lineNum":" 1624","line":"                }"},
{"lineNum":" 1625","line":"            }"},
{"lineNum":" 1626","line":""},
{"lineNum":" 1627","line":"            const debug_line = opt_debug_line orelse"},
{"lineNum":" 1628","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1629","line":"            const debug_info = opt_debug_info orelse"},
{"lineNum":" 1630","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1631","line":"            const debug_str = opt_debug_str orelse"},
{"lineNum":" 1632","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1633","line":"            const debug_abbrev = opt_debug_abbrev orelse"},
{"lineNum":" 1634","line":"                return error.MissingDebugInfo;"},
{"lineNum":" 1635","line":""},
{"lineNum":" 1636","line":"            var di = DW.DwarfInfo{"},
{"lineNum":" 1637","line":"                .endian = .Little,"},
{"lineNum":" 1638","line":"                .debug_info = try chopSlice(mapped_mem, debug_info.offset, debug_info.size),"},
{"lineNum":" 1639","line":"                .debug_abbrev = try chopSlice(mapped_mem, debug_abbrev.offset, debug_abbrev.size),"},
{"lineNum":" 1640","line":"                .debug_str = try chopSlice(mapped_mem, debug_str.offset, debug_str.size),"},
{"lineNum":" 1641","line":"                .debug_str_offsets = if (opt_debug_str_offsets) |debug_str_offsets|"},
{"lineNum":" 1642","line":"                    try chopSlice(mapped_mem, debug_str_offsets.offset, debug_str_offsets.size)"},
{"lineNum":" 1643","line":"                else"},
{"lineNum":" 1644","line":"                    null,"},
{"lineNum":" 1645","line":"                .debug_line = try chopSlice(mapped_mem, debug_line.offset, debug_line.size),"},
{"lineNum":" 1646","line":"                .debug_line_str = if (opt_debug_line_str) |debug_line_str|"},
{"lineNum":" 1647","line":"                    try chopSlice(mapped_mem, debug_line_str.offset, debug_line_str.size)"},
{"lineNum":" 1648","line":"                else"},
{"lineNum":" 1649","line":"                    null,"},
{"lineNum":" 1650","line":"                .debug_ranges = if (opt_debug_ranges) |debug_ranges|"},
{"lineNum":" 1651","line":"                    try chopSlice(mapped_mem, debug_ranges.offset, debug_ranges.size)"},
{"lineNum":" 1652","line":"                else"},
{"lineNum":" 1653","line":"                    null,"},
{"lineNum":" 1654","line":"                .debug_loclists = if (opt_debug_loclists) |debug_loclists|"},
{"lineNum":" 1655","line":"                    try chopSlice(mapped_mem, debug_loclists.offset, debug_loclists.size)"},
{"lineNum":" 1656","line":"                else"},
{"lineNum":" 1657","line":"                    null,"},
{"lineNum":" 1658","line":"                .debug_rnglists = if (opt_debug_rnglists) |debug_rnglists|"},
{"lineNum":" 1659","line":"                    try chopSlice(mapped_mem, debug_rnglists.offset, debug_rnglists.size)"},
{"lineNum":" 1660","line":"                else"},
{"lineNum":" 1661","line":"                    null,"},
{"lineNum":" 1662","line":"                .debug_addr = if (opt_debug_addr) |debug_addr|"},
{"lineNum":" 1663","line":"                    try chopSlice(mapped_mem, debug_addr.offset, debug_addr.size)"},
{"lineNum":" 1664","line":"                else"},
{"lineNum":" 1665","line":"                    null,"},
{"lineNum":" 1666","line":"                .debug_names = if (opt_debug_names) |debug_names|"},
{"lineNum":" 1667","line":"                    try chopSlice(mapped_mem, debug_names.offset, debug_names.size)"},
{"lineNum":" 1668","line":"                else"},
{"lineNum":" 1669","line":"                    null,"},
{"lineNum":" 1670","line":"                .debug_frame = if (opt_debug_frame) |debug_frame|"},
{"lineNum":" 1671","line":"                    try chopSlice(mapped_mem, debug_frame.offset, debug_frame.size)"},
{"lineNum":" 1672","line":"                else"},
{"lineNum":" 1673","line":"                    null,"},
{"lineNum":" 1674","line":"            };"},
{"lineNum":" 1675","line":""},
{"lineNum":" 1676","line":"            try DW.openDwarfDebugInfo(&di, allocator);"},
{"lineNum":" 1677","line":"            var info = OFileInfo{"},
{"lineNum":" 1678","line":"                .di = di,"},
{"lineNum":" 1679","line":"                .addr_table = addr_table,"},
{"lineNum":" 1680","line":"            };"},
{"lineNum":" 1681","line":""},
{"lineNum":" 1682","line":"            // Add the debug info to the cache"},
{"lineNum":" 1683","line":"            try self.ofiles.putNoClobber(o_file_path, info);"},
{"lineNum":" 1684","line":""},
{"lineNum":" 1685","line":"            return info;"},
{"lineNum":" 1686","line":"        }"},
{"lineNum":" 1687","line":""},
{"lineNum":" 1688","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 1689","line":"            nosuspend {"},
{"lineNum":" 1690","line":"                // Translate the VA into an address into this object"},
{"lineNum":" 1691","line":"                const relocated_address = address - self.base_address;"},
{"lineNum":" 1692","line":""},
{"lineNum":" 1693","line":"                // Find the .o file where this symbol is defined"},
{"lineNum":" 1694","line":"                const symbol = machoSearchSymbols(self.symbols, relocated_address) orelse"},
{"lineNum":" 1695","line":"                    return SymbolInfo{};"},
{"lineNum":" 1696","line":"                const addr_off = relocated_address - symbol.addr;"},
{"lineNum":" 1697","line":""},
{"lineNum":" 1698","line":"                // Take the symbol name from the N_FUN STAB entry, we\'re going to"},
{"lineNum":" 1699","line":"                // use it if we fail to find the DWARF infos"},
{"lineNum":" 1700","line":"                const stab_symbol = mem.sliceTo(self.strings[symbol.strx..], 0);"},
{"lineNum":" 1701","line":"                const o_file_path = mem.sliceTo(self.strings[symbol.ofile..], 0);"},
{"lineNum":" 1702","line":""},
{"lineNum":" 1703","line":"                // Check if its debug infos are already in the cache"},
{"lineNum":" 1704","line":"                var o_file_info = self.ofiles.get(o_file_path) orelse"},
{"lineNum":" 1705","line":"                    (self.loadOFile(allocator, o_file_path) catch |err| switch (err) {"},
{"lineNum":" 1706","line":"                    error.FileNotFound,"},
{"lineNum":" 1707","line":"                    error.MissingDebugInfo,"},
{"lineNum":" 1708","line":"                    error.InvalidDebugInfo,"},
{"lineNum":" 1709","line":"                    => {"},
{"lineNum":" 1710","line":"                        return SymbolInfo{ .symbol_name = stab_symbol };"},
{"lineNum":" 1711","line":"                    },"},
{"lineNum":" 1712","line":"                    else => return err,"},
{"lineNum":" 1713","line":"                });"},
{"lineNum":" 1714","line":"                const o_file_di = &o_file_info.di;"},
{"lineNum":" 1715","line":""},
{"lineNum":" 1716","line":"                // Translate again the address, this time into an address inside the"},
{"lineNum":" 1717","line":"                // .o file"},
{"lineNum":" 1718","line":"                const relocated_address_o = o_file_info.addr_table.get(stab_symbol) orelse return SymbolInfo{"},
{"lineNum":" 1719","line":"                    .symbol_name = \"???\","},
{"lineNum":" 1720","line":"                };"},
{"lineNum":" 1721","line":""},
{"lineNum":" 1722","line":"                if (o_file_di.findCompileUnit(relocated_address_o)) |compile_unit| {"},
{"lineNum":" 1723","line":"                    return SymbolInfo{"},
{"lineNum":" 1724","line":"                        .symbol_name = o_file_di.getSymbolName(relocated_address_o) orelse \"???\","},
{"lineNum":" 1725","line":"                        .compile_unit_name = compile_unit.die.getAttrString("},
{"lineNum":" 1726","line":"                            o_file_di,"},
{"lineNum":" 1727","line":"                            DW.AT.name,"},
{"lineNum":" 1728","line":"                            o_file_di.debug_str,"},
{"lineNum":" 1729","line":"                            compile_unit.*,"},
{"lineNum":" 1730","line":"                        ) catch |err| switch (err) {"},
{"lineNum":" 1731","line":"                            error.MissingDebugInfo, error.InvalidDebugInfo => \"???\","},
{"lineNum":" 1732","line":"                        },"},
{"lineNum":" 1733","line":"                        .line_info = o_file_di.getLineNumberInfo("},
{"lineNum":" 1734","line":"                            allocator,"},
{"lineNum":" 1735","line":"                            compile_unit.*,"},
{"lineNum":" 1736","line":"                            relocated_address_o + addr_off,"},
{"lineNum":" 1737","line":"                        ) catch |err| switch (err) {"},
{"lineNum":" 1738","line":"                            error.MissingDebugInfo, error.InvalidDebugInfo => null,"},
{"lineNum":" 1739","line":"                            else => return err,"},
{"lineNum":" 1740","line":"                        },"},
{"lineNum":" 1741","line":"                    };"},
{"lineNum":" 1742","line":"                } else |err| switch (err) {"},
{"lineNum":" 1743","line":"                    error.MissingDebugInfo, error.InvalidDebugInfo => {"},
{"lineNum":" 1744","line":"                        return SymbolInfo{ .symbol_name = stab_symbol };"},
{"lineNum":" 1745","line":"                    },"},
{"lineNum":" 1746","line":"                    else => return err,"},
{"lineNum":" 1747","line":"                }"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"                unreachable;"},
{"lineNum":" 1750","line":"            }"},
{"lineNum":" 1751","line":"        }"},
{"lineNum":" 1752","line":"    },"},
{"lineNum":" 1753","line":"    .uefi, .windows => struct {"},
{"lineNum":" 1754","line":"        base_address: usize,"},
{"lineNum":" 1755","line":"        debug_data: PdbOrDwarf,"},
{"lineNum":" 1756","line":"        coff_image_base: u64,"},
{"lineNum":" 1757","line":"        coff_section_headers: []coff.SectionHeader,"},
{"lineNum":" 1758","line":""},
{"lineNum":" 1759","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 1760","line":"            switch (self.debug_data) {"},
{"lineNum":" 1761","line":"                .dwarf => |*dwarf| {"},
{"lineNum":" 1762","line":"                    allocator.free(dwarf.debug_info);"},
{"lineNum":" 1763","line":"                    allocator.free(dwarf.debug_abbrev);"},
{"lineNum":" 1764","line":"                    allocator.free(dwarf.debug_str);"},
{"lineNum":" 1765","line":"                    allocator.free(dwarf.debug_line);"},
{"lineNum":" 1766","line":"                    if (dwarf.debug_str_offsets) |d| allocator.free(d);"},
{"lineNum":" 1767","line":"                    if (dwarf.debug_line_str) |d| allocator.free(d);"},
{"lineNum":" 1768","line":"                    if (dwarf.debug_ranges) |d| allocator.free(d);"},
{"lineNum":" 1769","line":"                    if (dwarf.debug_loclists) |d| allocator.free(d);"},
{"lineNum":" 1770","line":"                    if (dwarf.debug_rnglists) |d| allocator.free(d);"},
{"lineNum":" 1771","line":"                    if (dwarf.debug_addr) |d| allocator.free(d);"},
{"lineNum":" 1772","line":"                    if (dwarf.debug_names) |d| allocator.free(d);"},
{"lineNum":" 1773","line":"                    if (dwarf.debug_frame) |d| allocator.free(d);"},
{"lineNum":" 1774","line":"                },"},
{"lineNum":" 1775","line":"                .pdb => {"},
{"lineNum":" 1776","line":"                    allocator.free(self.coff_section_headers);"},
{"lineNum":" 1777","line":"                },"},
{"lineNum":" 1778","line":"            }"},
{"lineNum":" 1779","line":""},
{"lineNum":" 1780","line":"            self.debug_data.deinit(allocator);"},
{"lineNum":" 1781","line":"        }"},
{"lineNum":" 1782","line":""},
{"lineNum":" 1783","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 1784","line":"            // Translate the VA into an address into this object"},
{"lineNum":" 1785","line":"            const relocated_address = address - self.base_address;"},
{"lineNum":" 1786","line":""},
{"lineNum":" 1787","line":"            switch (self.debug_data) {"},
{"lineNum":" 1788","line":"                .dwarf => |*dwarf| {"},
{"lineNum":" 1789","line":"                    const dwarf_address = relocated_address + self.coff_image_base;"},
{"lineNum":" 1790","line":"                    return getSymbolFromDwarf(allocator, dwarf_address, dwarf);"},
{"lineNum":" 1791","line":"                },"},
{"lineNum":" 1792","line":"                .pdb => {"},
{"lineNum":" 1793","line":"                    // fallthrough to pdb handling"},
{"lineNum":" 1794","line":"                },"},
{"lineNum":" 1795","line":"            }"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"            var coff_section: *align(1) const coff.SectionHeader = undefined;"},
{"lineNum":" 1798","line":"            const mod_index = for (self.debug_data.pdb.sect_contribs) |sect_contrib| {"},
{"lineNum":" 1799","line":"                if (sect_contrib.Section > self.coff_section_headers.len) continue;"},
{"lineNum":" 1800","line":"                // Remember that SectionContribEntry.Section is 1-based."},
{"lineNum":" 1801","line":"                coff_section = &self.coff_section_headers[sect_contrib.Section - 1];"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"                const vaddr_start = coff_section.virtual_address + sect_contrib.Offset;"},
{"lineNum":" 1804","line":"                const vaddr_end = vaddr_start + sect_contrib.Size;"},
{"lineNum":" 1805","line":"                if (relocated_address >= vaddr_start and relocated_address < vaddr_end) {"},
{"lineNum":" 1806","line":"                    break sect_contrib.ModuleIndex;"},
{"lineNum":" 1807","line":"                }"},
{"lineNum":" 1808","line":"            } else {"},
{"lineNum":" 1809","line":"                // we have no information to add to the address"},
{"lineNum":" 1810","line":"                return SymbolInfo{};"},
{"lineNum":" 1811","line":"            };"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"            const module = (try self.debug_data.pdb.getModule(mod_index)) orelse"},
{"lineNum":" 1814","line":"                return error.InvalidDebugInfo;"},
{"lineNum":" 1815","line":"            const obj_basename = fs.path.basename(module.obj_file_name);"},
{"lineNum":" 1816","line":""},
{"lineNum":" 1817","line":"            const symbol_name = self.debug_data.pdb.getSymbolName("},
{"lineNum":" 1818","line":"                module,"},
{"lineNum":" 1819","line":"                relocated_address - coff_section.virtual_address,"},
{"lineNum":" 1820","line":"            ) orelse \"???\";"},
{"lineNum":" 1821","line":"            const opt_line_info = try self.debug_data.pdb.getLineNumberInfo("},
{"lineNum":" 1822","line":"                module,"},
{"lineNum":" 1823","line":"                relocated_address - coff_section.virtual_address,"},
{"lineNum":" 1824","line":"            );"},
{"lineNum":" 1825","line":""},
{"lineNum":" 1826","line":"            return SymbolInfo{"},
{"lineNum":" 1827","line":"                .symbol_name = symbol_name,"},
{"lineNum":" 1828","line":"                .compile_unit_name = obj_basename,"},
{"lineNum":" 1829","line":"                .line_info = opt_line_info,"},
{"lineNum":" 1830","line":"            };"},
{"lineNum":" 1831","line":"        }"},
{"lineNum":" 1832","line":"    },"},
{"lineNum":" 1833","line":"    .linux, .netbsd, .freebsd, .dragonfly, .openbsd, .haiku, .solaris => struct {"},
{"lineNum":" 1834","line":"        base_address: usize,"},
{"lineNum":" 1835","line":"        dwarf: DW.DwarfInfo,"},
{"lineNum":" 1836","line":"        mapped_memory: []align(mem.page_size) const u8,"},
{"lineNum":" 1837","line":""},
{"lineNum":" 1838","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 1839","line":"            self.dwarf.deinit(allocator);"},
{"lineNum":" 1840","line":"            os.munmap(self.mapped_memory);"},
{"lineNum":" 1841","line":"        }"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1844","line":"            // Translate the VA into an address into this object"},
{"lineNum":" 1845","line":"            const relocated_address = address - self.base_address;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1846","line":"            return getSymbolFromDwarf(allocator, relocated_address, &self.dwarf);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1847","line":"        }"},
{"lineNum":" 1848","line":"    },"},
{"lineNum":" 1849","line":"    .wasi => struct {"},
{"lineNum":" 1850","line":"        fn deinit(self: *@This(), allocator: mem.Allocator) void {"},
{"lineNum":" 1851","line":"            _ = self;"},
{"lineNum":" 1852","line":"            _ = allocator;"},
{"lineNum":" 1853","line":"        }"},
{"lineNum":" 1854","line":""},
{"lineNum":" 1855","line":"        pub fn getSymbolAtAddress(self: *@This(), allocator: mem.Allocator, address: usize) !SymbolInfo {"},
{"lineNum":" 1856","line":"            _ = self;"},
{"lineNum":" 1857","line":"            _ = allocator;"},
{"lineNum":" 1858","line":"            _ = address;"},
{"lineNum":" 1859","line":"            return SymbolInfo{};"},
{"lineNum":" 1860","line":"        }"},
{"lineNum":" 1861","line":"    },"},
{"lineNum":" 1862","line":"    else => DW.DwarfInfo,"},
{"lineNum":" 1863","line":"};"},
{"lineNum":" 1864","line":""},
{"lineNum":" 1865","line":"fn getSymbolFromDwarf(allocator: mem.Allocator, address: u64, di: *DW.DwarfInfo) !SymbolInfo {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1866","line":"    if (nosuspend di.findCompileUnit(address)) |compile_unit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1867","line":"        return SymbolInfo{","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":" 1868","line":"            .symbol_name = nosuspend di.getSymbolName(address) orelse \"???\",","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1869","line":"            .compile_unit_name = compile_unit.die.getAttrString(di, DW.AT.name, di.debug_str, compile_unit.*) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1870","line":"                error.MissingDebugInfo, error.InvalidDebugInfo => \"???\","},
{"lineNum":" 1871","line":"            },"},
{"lineNum":" 1872","line":"            .line_info = nosuspend di.getLineNumberInfo(allocator, compile_unit.*, address) catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1873","line":"                error.MissingDebugInfo, error.InvalidDebugInfo => null,"},
{"lineNum":" 1874","line":"                else => return err,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 1875","line":"            },"},
{"lineNum":" 1876","line":"        };"},
{"lineNum":" 1877","line":"    } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1878","line":"        error.MissingDebugInfo, error.InvalidDebugInfo => {"},
{"lineNum":" 1879","line":"            return SymbolInfo{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1880","line":"        },"},
{"lineNum":" 1881","line":"        else => return err,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1882","line":"    }"},
{"lineNum":" 1883","line":"}"},
{"lineNum":" 1884","line":""},
{"lineNum":" 1885","line":"/// TODO multithreaded awareness"},
{"lineNum":" 1886","line":"var debug_info_allocator: ?mem.Allocator = null;"},
{"lineNum":" 1887","line":"var debug_info_arena_allocator: std.heap.ArenaAllocator = undefined;"},
{"lineNum":" 1888","line":"fn getDebugInfoAllocator() mem.Allocator {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1889","line":"    if (debug_info_allocator) |a| return a;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1890","line":""},
{"lineNum":" 1891","line":"    debug_info_arena_allocator = std.heap.ArenaAllocator.init(std.heap.page_allocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1892","line":"    const allocator = debug_info_arena_allocator.allocator();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1893","line":"    debug_info_allocator = allocator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1894","line":"    return allocator;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1895","line":"}"},
{"lineNum":" 1896","line":""},
{"lineNum":" 1897","line":"/// Whether or not the current target can print useful debug information when a segfault occurs."},
{"lineNum":" 1898","line":"pub const have_segfault_handling_support = switch (native_os) {"},
{"lineNum":" 1899","line":"    .linux,"},
{"lineNum":" 1900","line":"    .macos,"},
{"lineNum":" 1901","line":"    .netbsd,"},
{"lineNum":" 1902","line":"    .solaris,"},
{"lineNum":" 1903","line":"    .windows,"},
{"lineNum":" 1904","line":"    => true,"},
{"lineNum":" 1905","line":""},
{"lineNum":" 1906","line":"    .freebsd, .openbsd => @hasDecl(os.system, \"ucontext_t\"),"},
{"lineNum":" 1907","line":"    else => false,"},
{"lineNum":" 1908","line":"};"},
{"lineNum":" 1909","line":""},
{"lineNum":" 1910","line":"const enable_segfault_handler = std.options.enable_segfault_handler;"},
{"lineNum":" 1911","line":"pub const default_enable_segfault_handler = runtime_safety and have_segfault_handling_support;"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"pub fn maybeEnableSegfaultHandler() void {","class":"lineCov","hits":"1","order":"120","possible_hits":"1",},
{"lineNum":" 1914","line":"    if (enable_segfault_handler) {"},
{"lineNum":" 1915","line":"        std.debug.attachSegfaultHandler();","class":"lineCov","hits":"1","order":"121","possible_hits":"1",},
{"lineNum":" 1916","line":"    }"},
{"lineNum":" 1917","line":"}"},
{"lineNum":" 1918","line":""},
{"lineNum":" 1919","line":"var windows_segfault_handle: ?windows.HANDLE = null;"},
{"lineNum":" 1920","line":""},
{"lineNum":" 1921","line":"pub fn updateSegfaultHandler(act: ?*const os.Sigaction) error{OperationNotSupported}!void {","class":"lineCov","hits":"1","order":"125","possible_hits":"1",},
{"lineNum":" 1922","line":"    try os.sigaction(os.SIG.SEGV, act, null);","class":"lineCov","hits":"1","order":"126","possible_hits":"1",},
{"lineNum":" 1923","line":"    try os.sigaction(os.SIG.ILL, act, null);","class":"lineCov","hits":"1","order":"150","possible_hits":"1",},
{"lineNum":" 1924","line":"    try os.sigaction(os.SIG.BUS, act, null);","class":"lineCov","hits":"1","order":"151","possible_hits":"1",},
{"lineNum":" 1925","line":"    try os.sigaction(os.SIG.FPE, act, null);","class":"lineCov","hits":"1","order":"152","possible_hits":"1",},
{"lineNum":" 1926","line":"}"},
{"lineNum":" 1927","line":""},
{"lineNum":" 1928","line":"/// Attaches a global SIGSEGV handler which calls @panic(\"segmentation fault\");"},
{"lineNum":" 1929","line":"pub fn attachSegfaultHandler() void {","class":"lineCov","hits":"1","order":"122","possible_hits":"1",},
{"lineNum":" 1930","line":"    if (!have_segfault_handling_support) {"},
{"lineNum":" 1931","line":"        @compileError(\"segfault handler not supported for this target\");"},
{"lineNum":" 1932","line":"    }"},
{"lineNum":" 1933","line":"    if (native_os == .windows) {"},
{"lineNum":" 1934","line":"        windows_segfault_handle = windows.kernel32.AddVectoredExceptionHandler(0, handleSegfaultWindows);"},
{"lineNum":" 1935","line":"        return;"},
{"lineNum":" 1936","line":"    }"},
{"lineNum":" 1937","line":"    var act = os.Sigaction{","class":"lineCov","hits":"1","order":"123","possible_hits":"1",},
{"lineNum":" 1938","line":"        .handler = .{ .sigaction = handleSegfaultPosix },"},
{"lineNum":" 1939","line":"        .mask = os.empty_sigset,"},
{"lineNum":" 1940","line":"        .flags = (os.SA.SIGINFO | os.SA.RESTART | os.SA.RESETHAND),"},
{"lineNum":" 1941","line":"    };"},
{"lineNum":" 1942","line":""},
{"lineNum":" 1943","line":"    updateSegfaultHandler(&act) catch {","class":"lineCov","hits":"1","order":"124","possible_hits":"1",},
{"lineNum":" 1944","line":"        @panic(\"unable to install segfault handler, maybe adjust have_segfault_handling_support in std/debug.zig\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1945","line":"    };"},
{"lineNum":" 1946","line":"}"},
{"lineNum":" 1947","line":""},
{"lineNum":" 1948","line":"fn resetSegfaultHandler() void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1949","line":"    if (native_os == .windows) {"},
{"lineNum":" 1950","line":"        if (windows_segfault_handle) |handle| {"},
{"lineNum":" 1951","line":"            assert(windows.kernel32.RemoveVectoredExceptionHandler(handle) != 0);"},
{"lineNum":" 1952","line":"            windows_segfault_handle = null;"},
{"lineNum":" 1953","line":"        }"},
{"lineNum":" 1954","line":"        return;"},
{"lineNum":" 1955","line":"    }"},
{"lineNum":" 1956","line":"    var act = os.Sigaction{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1957","line":"        .handler = .{ .handler = os.SIG.DFL },"},
{"lineNum":" 1958","line":"        .mask = os.empty_sigset,"},
{"lineNum":" 1959","line":"        .flags = 0,"},
{"lineNum":" 1960","line":"    };"},
{"lineNum":" 1961","line":"    // To avoid a double-panic, do nothing if an error happens here."},
{"lineNum":" 1962","line":"    updateSegfaultHandler(&act) catch {};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1963","line":"}"},
{"lineNum":" 1964","line":""},
{"lineNum":" 1965","line":"fn handleSegfaultPosix(sig: i32, info: *const os.siginfo_t, ctx_ptr: ?*const anyopaque) callconv(.C) noreturn {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1966","line":"    // Reset to the default handler so that if a segfault happens in this handler it will crash"},
{"lineNum":" 1967","line":"    // the process. Also when this handler returns, the original instruction will be repeated"},
{"lineNum":" 1968","line":"    // and the resulting segfault will crash the process rather than continually dump stack traces."},
{"lineNum":" 1969","line":"    resetSegfaultHandler();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1970","line":""},
{"lineNum":" 1971","line":"    const addr = switch (native_os) {"},
{"lineNum":" 1972","line":"        .linux => @ptrToInt(info.fields.sigfault.addr),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1973","line":"        .freebsd, .macos => @ptrToInt(info.addr),"},
{"lineNum":" 1974","line":"        .netbsd => @ptrToInt(info.info.reason.fault.addr),"},
{"lineNum":" 1975","line":"        .openbsd => @ptrToInt(info.data.fault.addr),"},
{"lineNum":" 1976","line":"        .solaris => @ptrToInt(info.reason.fault.addr),"},
{"lineNum":" 1977","line":"        else => unreachable,"},
{"lineNum":" 1978","line":"    };"},
{"lineNum":" 1979","line":""},
{"lineNum":" 1980","line":"    nosuspend switch (panic_stage) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1981","line":"        0 => {"},
{"lineNum":" 1982","line":"            panic_stage = 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1983","line":"            _ = panicking.fetchAdd(1, .SeqCst);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1984","line":""},
{"lineNum":" 1985","line":"            {"},
{"lineNum":" 1986","line":"                panic_mutex.lock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1987","line":"                defer panic_mutex.unlock();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"                dumpSegfaultInfoPosix(sig, addr, ctx_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1990","line":"            }"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"            waitForOtherThreadToFinishPanicking();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1993","line":"        },"},
{"lineNum":" 1994","line":"        else => {"},
{"lineNum":" 1995","line":"            // panic mutex already locked"},
{"lineNum":" 1996","line":"            dumpSegfaultInfoPosix(sig, addr, ctx_ptr);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1997","line":"        },"},
{"lineNum":" 1998","line":"    };"},
{"lineNum":" 1999","line":""},
{"lineNum":" 2000","line":"    // We cannot allow the signal handler to return because when it runs the original instruction"},
{"lineNum":" 2001","line":"    // again, the memory may be mapped and undefined behavior would occur rather than repeating"},
{"lineNum":" 2002","line":"    // the segfault. So we simply abort here."},
{"lineNum":" 2003","line":"    os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2004","line":"}"},
{"lineNum":" 2005","line":""},
{"lineNum":" 2006","line":"fn dumpSegfaultInfoPosix(sig: i32, addr: usize, ctx_ptr: ?*const anyopaque) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2007","line":"    const stderr = io.getStdErr().writer();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2008","line":"    _ = switch (sig) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2009","line":"        os.SIG.SEGV => stderr.print(\"Segmentation fault at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2010","line":"        os.SIG.ILL => stderr.print(\"Illegal instruction at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2011","line":"        os.SIG.BUS => stderr.print(\"Bus error at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2012","line":"        os.SIG.FPE => stderr.print(\"Arithmetic exception at address 0x{x}\\n\", .{addr}),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2013","line":"        else => unreachable,","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":" 2014","line":"    } catch os.abort();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2015","line":""},
{"lineNum":" 2016","line":"    switch (native_arch) {"},
{"lineNum":" 2017","line":"        .x86 => {"},
{"lineNum":" 2018","line":"            const ctx = @ptrCast(*const os.ucontext_t, @alignCast(@alignOf(os.ucontext_t), ctx_ptr));"},
{"lineNum":" 2019","line":"            const ip = @intCast(usize, ctx.mcontext.gregs[os.REG.EIP]);"},
{"lineNum":" 2020","line":"            const bp = @intCast(usize, ctx.mcontext.gregs[os.REG.EBP]);"},
{"lineNum":" 2021","line":"            dumpStackTraceFromBase(bp, ip);"},
{"lineNum":" 2022","line":"        },"},
{"lineNum":" 2023","line":"        .x86_64 => {"},
{"lineNum":" 2024","line":"            const ctx = @ptrCast(*const os.ucontext_t, @alignCast(@alignOf(os.ucontext_t), ctx_ptr));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2025","line":"            const ip = switch (native_os) {"},
{"lineNum":" 2026","line":"                .linux, .netbsd, .solaris => @intCast(usize, ctx.mcontext.gregs[os.REG.RIP]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2027","line":"                .freebsd => @intCast(usize, ctx.mcontext.rip),"},
{"lineNum":" 2028","line":"                .openbsd => @intCast(usize, ctx.sc_rip),"},
{"lineNum":" 2029","line":"                .macos => @intCast(usize, ctx.mcontext.ss.rip),"},
{"lineNum":" 2030","line":"                else => unreachable,"},
{"lineNum":" 2031","line":"            };"},
{"lineNum":" 2032","line":"            const bp = switch (native_os) {"},
{"lineNum":" 2033","line":"                .linux, .netbsd, .solaris => @intCast(usize, ctx.mcontext.gregs[os.REG.RBP]),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2034","line":"                .openbsd => @intCast(usize, ctx.sc_rbp),"},
{"lineNum":" 2035","line":"                .freebsd => @intCast(usize, ctx.mcontext.rbp),"},
{"lineNum":" 2036","line":"                .macos => @intCast(usize, ctx.mcontext.ss.rbp),"},
{"lineNum":" 2037","line":"                else => unreachable,"},
{"lineNum":" 2038","line":"            };"},
{"lineNum":" 2039","line":"            dumpStackTraceFromBase(bp, ip);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 2040","line":"        },"},
{"lineNum":" 2041","line":"        .arm => {"},
{"lineNum":" 2042","line":"            const ctx = @ptrCast(*const os.ucontext_t, @alignCast(@alignOf(os.ucontext_t), ctx_ptr));"},
{"lineNum":" 2043","line":"            const ip = @intCast(usize, ctx.mcontext.arm_pc);"},
{"lineNum":" 2044","line":"            const bp = @intCast(usize, ctx.mcontext.arm_fp);"},
{"lineNum":" 2045","line":"            dumpStackTraceFromBase(bp, ip);"},
{"lineNum":" 2046","line":"        },"},
{"lineNum":" 2047","line":"        .aarch64 => {"},
{"lineNum":" 2048","line":"            const ctx = @ptrCast(*const os.ucontext_t, @alignCast(@alignOf(os.ucontext_t), ctx_ptr));"},
{"lineNum":" 2049","line":"            const ip = switch (native_os) {"},
{"lineNum":" 2050","line":"                .macos => @intCast(usize, ctx.mcontext.ss.pc),"},
{"lineNum":" 2051","line":"                .netbsd => @intCast(usize, ctx.mcontext.gregs[os.REG.PC]),"},
{"lineNum":" 2052","line":"                .freebsd => @intCast(usize, ctx.mcontext.gpregs.elr),"},
{"lineNum":" 2053","line":"                else => @intCast(usize, ctx.mcontext.pc),"},
{"lineNum":" 2054","line":"            };"},
{"lineNum":" 2055","line":"            // x29 is the ABI-designated frame pointer"},
{"lineNum":" 2056","line":"            const bp = switch (native_os) {"},
{"lineNum":" 2057","line":"                .macos => @intCast(usize, ctx.mcontext.ss.fp),"},
{"lineNum":" 2058","line":"                .netbsd => @intCast(usize, ctx.mcontext.gregs[os.REG.FP]),"},
{"lineNum":" 2059","line":"                .freebsd => @intCast(usize, ctx.mcontext.gpregs.x[os.REG.FP]),"},
{"lineNum":" 2060","line":"                else => @intCast(usize, ctx.mcontext.regs[29]),"},
{"lineNum":" 2061","line":"            };"},
{"lineNum":" 2062","line":"            dumpStackTraceFromBase(bp, ip);"},
{"lineNum":" 2063","line":"        },"},
{"lineNum":" 2064","line":"        else => {},"},
{"lineNum":" 2065","line":"    }"},
{"lineNum":" 2066","line":"}"},
{"lineNum":" 2067","line":""},
{"lineNum":" 2068","line":"fn handleSegfaultWindows(info: *windows.EXCEPTION_POINTERS) callconv(windows.WINAPI) c_long {"},
{"lineNum":" 2069","line":"    switch (info.ExceptionRecord.ExceptionCode) {"},
{"lineNum":" 2070","line":"        windows.EXCEPTION_DATATYPE_MISALIGNMENT => handleSegfaultWindowsExtra(info, 0, \"Unaligned Memory Access\"),"},
{"lineNum":" 2071","line":"        windows.EXCEPTION_ACCESS_VIOLATION => handleSegfaultWindowsExtra(info, 1, null),"},
{"lineNum":" 2072","line":"        windows.EXCEPTION_ILLEGAL_INSTRUCTION => handleSegfaultWindowsExtra(info, 2, null),"},
{"lineNum":" 2073","line":"        windows.EXCEPTION_STACK_OVERFLOW => handleSegfaultWindowsExtra(info, 0, \"Stack Overflow\"),"},
{"lineNum":" 2074","line":"        else => return windows.EXCEPTION_CONTINUE_SEARCH,"},
{"lineNum":" 2075","line":"    }"},
{"lineNum":" 2076","line":"}"},
{"lineNum":" 2077","line":""},
{"lineNum":" 2078","line":"fn handleSegfaultWindowsExtra("},
{"lineNum":" 2079","line":"    info: *windows.EXCEPTION_POINTERS,"},
{"lineNum":" 2080","line":"    msg: u8,"},
{"lineNum":" 2081","line":"    label: ?[]const u8,"},
{"lineNum":" 2082","line":") noreturn {"},
{"lineNum":" 2083","line":"    const exception_address = @ptrToInt(info.ExceptionRecord.ExceptionAddress);"},
{"lineNum":" 2084","line":"    if (@hasDecl(windows, \"CONTEXT\")) {"},
{"lineNum":" 2085","line":"        nosuspend switch (panic_stage) {"},
{"lineNum":" 2086","line":"            0 => {"},
{"lineNum":" 2087","line":"                panic_stage = 1;"},
{"lineNum":" 2088","line":"                _ = panicking.fetchAdd(1, .SeqCst);"},
{"lineNum":" 2089","line":""},
{"lineNum":" 2090","line":"                {"},
{"lineNum":" 2091","line":"                    panic_mutex.lock();"},
{"lineNum":" 2092","line":"                    defer panic_mutex.unlock();"},
{"lineNum":" 2093","line":""},
{"lineNum":" 2094","line":"                    dumpSegfaultInfoWindows(info, msg, label);"},
{"lineNum":" 2095","line":"                }"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"                waitForOtherThreadToFinishPanicking();"},
{"lineNum":" 2098","line":"            },"},
{"lineNum":" 2099","line":"            else => {"},
{"lineNum":" 2100","line":"                // panic mutex already locked"},
{"lineNum":" 2101","line":"                dumpSegfaultInfoWindows(info, msg, label);"},
{"lineNum":" 2102","line":"            },"},
{"lineNum":" 2103","line":"        };"},
{"lineNum":" 2104","line":"        os.abort();"},
{"lineNum":" 2105","line":"    } else {"},
{"lineNum":" 2106","line":"        switch (msg) {"},
{"lineNum":" 2107","line":"            0 => panicImpl(null, exception_address, \"{s}\", label.?),"},
{"lineNum":" 2108","line":"            1 => {"},
{"lineNum":" 2109","line":"                const format_item = \"Segmentation fault at address 0x{x}\";"},
{"lineNum":" 2110","line":"                var buf: [format_item.len + 64]u8 = undefined; // 64 is arbitrary, but sufficiently large"},
{"lineNum":" 2111","line":"                const to_print = std.fmt.bufPrint(buf[0..buf.len], format_item, .{info.ExceptionRecord.ExceptionInformation[1]}) catch unreachable;"},
{"lineNum":" 2112","line":"                panicImpl(null, exception_address, to_print);"},
{"lineNum":" 2113","line":"            },"},
{"lineNum":" 2114","line":"            2 => panicImpl(null, exception_address, \"Illegal Instruction\"),"},
{"lineNum":" 2115","line":"            else => unreachable,"},
{"lineNum":" 2116","line":"        }"},
{"lineNum":" 2117","line":"    }"},
{"lineNum":" 2118","line":"}"},
{"lineNum":" 2119","line":""},
{"lineNum":" 2120","line":"fn dumpSegfaultInfoWindows(info: *windows.EXCEPTION_POINTERS, msg: u8, label: ?[]const u8) void {"},
{"lineNum":" 2121","line":"    const regs = info.ContextRecord.getRegs();"},
{"lineNum":" 2122","line":"    const stderr = io.getStdErr().writer();"},
{"lineNum":" 2123","line":"    _ = switch (msg) {"},
{"lineNum":" 2124","line":"        0 => stderr.print(\"{s}\\n\", .{label.?}),"},
{"lineNum":" 2125","line":"        1 => stderr.print(\"Segmentation fault at address 0x{x}\\n\", .{info.ExceptionRecord.ExceptionInformation[1]}),"},
{"lineNum":" 2126","line":"        2 => stderr.print(\"Illegal instruction at address 0x{x}\\n\", .{regs.ip}),"},
{"lineNum":" 2127","line":"        else => unreachable,"},
{"lineNum":" 2128","line":"    } catch os.abort();"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"    dumpStackTraceFromBase(regs.bp, regs.ip);"},
{"lineNum":" 2131","line":"}"},
{"lineNum":" 2132","line":""},
{"lineNum":" 2133","line":"pub fn dumpStackPointerAddr(prefix: []const u8) void {"},
{"lineNum":" 2134","line":"    const sp = asm (\"\""},
{"lineNum":" 2135","line":"        : [argc] \"={rsp}\" (-> usize),"},
{"lineNum":" 2136","line":"    );"},
{"lineNum":" 2137","line":"    std.debug.print(\"{} sp = 0x{x}\\n\", .{ prefix, sp });"},
{"lineNum":" 2138","line":"}"},
{"lineNum":" 2139","line":""},
{"lineNum":" 2140","line":"test \"manage resources correctly\" {"},
{"lineNum":" 2141","line":"    if (builtin.os.tag == .wasi) return error.SkipZigTest;"},
{"lineNum":" 2142","line":""},
{"lineNum":" 2143","line":"    if (builtin.os.tag == .windows and builtin.cpu.arch == .x86_64) {"},
{"lineNum":" 2144","line":"        // https://github.com/ziglang/zig/issues/13963"},
{"lineNum":" 2145","line":"        return error.SkipZigTest;"},
{"lineNum":" 2146","line":"    }"},
{"lineNum":" 2147","line":""},
{"lineNum":" 2148","line":"    const writer = std.io.null_writer;"},
{"lineNum":" 2149","line":"    var di = try openSelfDebugInfo(testing.allocator);"},
{"lineNum":" 2150","line":"    defer di.deinit();"},
{"lineNum":" 2151","line":"    try printSourceAtAddress(&di, writer, showMyTrace(), detectTTYConfig(std.io.getStdErr()));"},
{"lineNum":" 2152","line":"}"},
{"lineNum":" 2153","line":""},
{"lineNum":" 2154","line":"noinline fn showMyTrace() usize {"},
{"lineNum":" 2155","line":"    return @returnAddress();"},
{"lineNum":" 2156","line":"}"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"/// This API helps you track where a value originated and where it was mutated,"},
{"lineNum":" 2159","line":"/// or any other points of interest."},
{"lineNum":" 2160","line":"/// In debug mode, it adds a small size penalty (104 bytes on 64-bit architectures)"},
{"lineNum":" 2161","line":"/// to the aggregate that you add it to."},
{"lineNum":" 2162","line":"/// In release mode, it is size 0 and all methods are no-ops."},
{"lineNum":" 2163","line":"/// This is a pre-made type with default settings."},
{"lineNum":" 2164","line":"/// For more advanced usage, see `ConfigurableTrace`."},
{"lineNum":" 2165","line":"pub const Trace = ConfigurableTrace(2, 4, builtin.mode == .Debug);"},
{"lineNum":" 2166","line":""},
{"lineNum":" 2167","line":"pub fn ConfigurableTrace(comptime size: usize, comptime stack_frame_count: usize, comptime is_enabled: bool) type {"},
{"lineNum":" 2168","line":"    return struct {"},
{"lineNum":" 2169","line":"        addrs: [actual_size][stack_frame_count]usize = undefined,"},
{"lineNum":" 2170","line":"        notes: [actual_size][]const u8 = undefined,"},
{"lineNum":" 2171","line":"        index: Index = 0,"},
{"lineNum":" 2172","line":""},
{"lineNum":" 2173","line":"        const actual_size = if (enabled) size else 0;"},
{"lineNum":" 2174","line":"        const Index = if (enabled) usize else u0;"},
{"lineNum":" 2175","line":""},
{"lineNum":" 2176","line":"        pub const enabled = is_enabled;"},
{"lineNum":" 2177","line":""},
{"lineNum":" 2178","line":"        pub const add = if (enabled) addNoInline else addNoOp;"},
{"lineNum":" 2179","line":""},
{"lineNum":" 2180","line":"        pub noinline fn addNoInline(t: *@This(), note: []const u8) void {"},
{"lineNum":" 2181","line":"            comptime assert(enabled);"},
{"lineNum":" 2182","line":"            return addAddr(t, @returnAddress(), note);"},
{"lineNum":" 2183","line":"        }"},
{"lineNum":" 2184","line":""},
{"lineNum":" 2185","line":"        pub inline fn addNoOp(t: *@This(), note: []const u8) void {"},
{"lineNum":" 2186","line":"            _ = t;"},
{"lineNum":" 2187","line":"            _ = note;"},
{"lineNum":" 2188","line":"            comptime assert(!enabled);"},
{"lineNum":" 2189","line":"        }"},
{"lineNum":" 2190","line":""},
{"lineNum":" 2191","line":"        pub fn addAddr(t: *@This(), addr: usize, note: []const u8) void {"},
{"lineNum":" 2192","line":"            if (!enabled) return;"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"            if (t.index < size) {"},
{"lineNum":" 2195","line":"                t.notes[t.index] = note;"},
{"lineNum":" 2196","line":"                t.addrs[t.index] = [1]usize{0} ** stack_frame_count;"},
{"lineNum":" 2197","line":"                var stack_trace: std.builtin.StackTrace = .{"},
{"lineNum":" 2198","line":"                    .index = 0,"},
{"lineNum":" 2199","line":"                    .instruction_addresses = &t.addrs[t.index],"},
{"lineNum":" 2200","line":"                };"},
{"lineNum":" 2201","line":"                captureStackTrace(addr, &stack_trace);"},
{"lineNum":" 2202","line":"            }"},
{"lineNum":" 2203","line":"            // Keep counting even if the end is reached so that the"},
{"lineNum":" 2204","line":"            // user can find out how much more size they need."},
{"lineNum":" 2205","line":"            t.index += 1;"},
{"lineNum":" 2206","line":"        }"},
{"lineNum":" 2207","line":""},
{"lineNum":" 2208","line":"        pub fn dump(t: @This()) void {"},
{"lineNum":" 2209","line":"            if (!enabled) return;"},
{"lineNum":" 2210","line":""},
{"lineNum":" 2211","line":"            const tty_config = detectTTYConfig(std.io.getStdErr());"},
{"lineNum":" 2212","line":"            const stderr = io.getStdErr().writer();"},
{"lineNum":" 2213","line":"            const end = @min(t.index, size);"},
{"lineNum":" 2214","line":"            const debug_info = getSelfDebugInfo() catch |err| {"},
{"lineNum":" 2215","line":"                stderr.print("},
{"lineNum":" 2216","line":"                    \"Unable to dump stack trace: Unable to open debug info: {s}\\n\","},
{"lineNum":" 2217","line":"                    .{@errorName(err)},"},
{"lineNum":" 2218","line":"                ) catch return;"},
{"lineNum":" 2219","line":"                return;"},
{"lineNum":" 2220","line":"            };"},
{"lineNum":" 2221","line":"            for (t.addrs[0..end], 0..) |frames_array, i| {"},
{"lineNum":" 2222","line":"                stderr.print(\"{s}:\\n\", .{t.notes[i]}) catch return;"},
{"lineNum":" 2223","line":"                var frames_array_mutable = frames_array;"},
{"lineNum":" 2224","line":"                const frames = mem.sliceTo(frames_array_mutable[0..], 0);"},
{"lineNum":" 2225","line":"                const stack_trace: std.builtin.StackTrace = .{"},
{"lineNum":" 2226","line":"                    .index = frames.len,"},
{"lineNum":" 2227","line":"                    .instruction_addresses = frames,"},
{"lineNum":" 2228","line":"                };"},
{"lineNum":" 2229","line":"                writeStackTrace(stack_trace, stderr, getDebugInfoAllocator(), debug_info, tty_config) catch continue;"},
{"lineNum":" 2230","line":"            }"},
{"lineNum":" 2231","line":"            if (t.index > end) {"},
{"lineNum":" 2232","line":"                stderr.print(\"{d} more traces not shown; consider increasing trace size\\n\", .{"},
{"lineNum":" 2233","line":"                    t.index - end,"},
{"lineNum":" 2234","line":"                }) catch return;"},
{"lineNum":" 2235","line":"            }"},
{"lineNum":" 2236","line":"        }"},
{"lineNum":" 2237","line":""},
{"lineNum":" 2238","line":"        pub fn format("},
{"lineNum":" 2239","line":"            t: Trace,"},
{"lineNum":" 2240","line":"            comptime fmt: []const u8,"},
{"lineNum":" 2241","line":"            options: std.fmt.FormatOptions,"},
{"lineNum":" 2242","line":"            writer: anytype,"},
{"lineNum":" 2243","line":"        ) !void {"},
{"lineNum":" 2244","line":"            if (fmt.len != 0) std.fmt.invalidFmtError(fmt, t);"},
{"lineNum":" 2245","line":"            _ = options;"},
{"lineNum":" 2246","line":"            if (enabled) {"},
{"lineNum":" 2247","line":"                try writer.writeAll(\"\\n\");"},
{"lineNum":" 2248","line":"                t.dump();"},
{"lineNum":" 2249","line":"                try writer.writeAll(\"\\n\");"},
{"lineNum":" 2250","line":"            } else {"},
{"lineNum":" 2251","line":"                return writer.writeAll(\"(value tracing disabled)\");"},
{"lineNum":" 2252","line":"            }"},
{"lineNum":" 2253","line":"        }"},
{"lineNum":" 2254","line":"    };"},
{"lineNum":" 2255","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 359, "covered" : 46,};
var merged_data = [];
