var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const math = std.math;"},
{"lineNum":"    3","line":"const common = @import(\"common.zig\");"},
{"lineNum":"    4","line":"const FloatStream = @import(\"FloatStream.zig\");"},
{"lineNum":"    5","line":"const isEightDigits = @import(\"common.zig\").isEightDigits;"},
{"lineNum":"    6","line":"const mantissaType = common.mantissaType;"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"// Arbitrary-precision decimal class for fallback algorithms."},
{"lineNum":"    9","line":"//"},
{"lineNum":"   10","line":"// This is only used if the fast-path (native floats) and"},
{"lineNum":"   11","line":"// the Eisel-Lemire algorithm are unable to unambiguously"},
{"lineNum":"   12","line":"// determine the float."},
{"lineNum":"   13","line":"//"},
{"lineNum":"   14","line":"// The technique used is \"Simple Decimal Conversion\", developed"},
{"lineNum":"   15","line":"// by Nigel Tao and Ken Thompson. A detailed description of the"},
{"lineNum":"   16","line":"// algorithm can be found in \"ParseNumberF64 by Simple Decimal Conversion\","},
{"lineNum":"   17","line":"// available online: <https://nigeltao.github.io/blog/2020/parse-number-f64-simple.html>."},
{"lineNum":"   18","line":"//"},
{"lineNum":"   19","line":"// Big-decimal implementation. We do not use the big.Int routines since we only require a maximum"},
{"lineNum":"   20","line":"// fixed region of memory. Further, we require only a small subset of operations."},
{"lineNum":"   21","line":"//"},
{"lineNum":"   22","line":"// This accepts a floating point parameter and will generate a Decimal which can correctly parse"},
{"lineNum":"   23","line":"// the input with sufficient accuracy. Internally this means either a u64 mantissa (f16, f32 or f64)"},
{"lineNum":"   24","line":"// or a u128 mantissa (f128)."},
{"lineNum":"   25","line":"pub fn Decimal(comptime T: type) type {"},
{"lineNum":"   26","line":"    const MantissaT = mantissaType(T);"},
{"lineNum":"   27","line":"    std.debug.assert(MantissaT == u64 or MantissaT == u128);"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"    return struct {"},
{"lineNum":"   30","line":"        const Self = @This();"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"        /// The maximum number of digits required to unambiguously round a float."},
{"lineNum":"   33","line":"        ///"},
{"lineNum":"   34","line":"        /// For a double-precision IEEE-754 float, this required 767 digits,"},
{"lineNum":"   35","line":"        /// so we store the max digits + 1."},
{"lineNum":"   36","line":"        ///"},
{"lineNum":"   37","line":"        /// We can exactly represent a float in radix `b` from radix 2 if"},
{"lineNum":"   38","line":"        /// `b` is divisible by 2. This function calculates the exact number of"},
{"lineNum":"   39","line":"        /// digits required to exactly represent that float."},
{"lineNum":"   40","line":"        ///"},
{"lineNum":"   41","line":"        /// According to the \"Handbook of Floating Point Arithmetic\","},
{"lineNum":"   42","line":"        /// for IEEE754, with emin being the min exponent, p2 being the"},
{"lineNum":"   43","line":"        /// precision, and b being the radix, the number of digits follows as:"},
{"lineNum":"   44","line":"        ///"},
{"lineNum":"   45","line":"        /// `−emin + p2 + ⌊(emin + 1) log(2, b) − log(1 − 2^(−p2), b)⌋`"},
{"lineNum":"   46","line":"        ///"},
{"lineNum":"   47","line":"        /// For f32, this follows as:"},
{"lineNum":"   48","line":"        ///     emin = -126"},
{"lineNum":"   49","line":"        ///     p2 = 24"},
{"lineNum":"   50","line":"        ///"},
{"lineNum":"   51","line":"        /// For f64, this follows as:"},
{"lineNum":"   52","line":"        ///     emin = -1022"},
{"lineNum":"   53","line":"        ///     p2 = 53"},
{"lineNum":"   54","line":"        ///"},
{"lineNum":"   55","line":"        /// For f128, this follows as:"},
{"lineNum":"   56","line":"        ///     emin = -16383"},
{"lineNum":"   57","line":"        ///     p2 = 112"},
{"lineNum":"   58","line":"        ///"},
{"lineNum":"   59","line":"        /// In Python:"},
{"lineNum":"   60","line":"        ///     `-emin + p2 + math.floor((emin+ 1)*math.log(2, b)-math.log(1-2**(-p2), b))`"},
{"lineNum":"   61","line":"        pub const max_digits = if (MantissaT == u64) 768 else 11564;"},
{"lineNum":"   62","line":"        /// The max digits that can be exactly represented in a 64-bit integer."},
{"lineNum":"   63","line":"        pub const max_digits_without_overflow = if (MantissaT == u64) 19 else 38;"},
{"lineNum":"   64","line":"        pub const decimal_point_range = if (MantissaT == u64) 2047 else 32767;"},
{"lineNum":"   65","line":"        pub const min_exponent = if (MantissaT == u64) -324 else -4966;"},
{"lineNum":"   66","line":"        pub const max_exponent = if (MantissaT == u64) 310 else 4933;"},
{"lineNum":"   67","line":"        pub const max_decimal_digits = if (MantissaT == u64) 18 else 37;"},
{"lineNum":"   68","line":""},
{"lineNum":"   69","line":"        /// The number of significant digits in the decimal."},
{"lineNum":"   70","line":"        num_digits: usize,"},
{"lineNum":"   71","line":"        /// The offset of the decimal point in the significant digits."},
{"lineNum":"   72","line":"        decimal_point: i32,"},
{"lineNum":"   73","line":"        /// If the number of significant digits stored in the decimal is truncated."},
{"lineNum":"   74","line":"        truncated: bool,"},
{"lineNum":"   75","line":"        /// buffer of the raw digits, in the range [0, 9]."},
{"lineNum":"   76","line":"        digits: [max_digits]u8,"},
{"lineNum":"   77","line":""},
{"lineNum":"   78","line":"        pub fn new() Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"            return .{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":"                .num_digits = 0,"},
{"lineNum":"   81","line":"                .decimal_point = 0,"},
{"lineNum":"   82","line":"                .truncated = false,"},
{"lineNum":"   83","line":"                .digits = [_]u8{0} ** max_digits,"},
{"lineNum":"   84","line":"            };"},
{"lineNum":"   85","line":"        }"},
{"lineNum":"   86","line":""},
{"lineNum":"   87","line":"        /// Append a digit to the buffer"},
{"lineNum":"   88","line":"        pub fn tryAddDigit(self: *Self, digit: u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   89","line":"            if (self.num_digits < max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"                self.digits[self.num_digits] = digit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   91","line":"            }"},
{"lineNum":"   92","line":"            self.num_digits += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   93","line":"        }"},
{"lineNum":"   94","line":""},
{"lineNum":"   95","line":"        /// Trim trailing zeroes from the buffer"},
{"lineNum":"   96","line":"        pub fn trim(self: *Self) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"            // All of the following calls to `Self::trim` can\'t panic because:"},
{"lineNum":"   98","line":"            //"},
{"lineNum":"   99","line":"            //  1. `parse_decimal` sets `num_digits` to a max of `max_digits`."},
{"lineNum":"  100","line":"            //  2. `right_shift` sets `num_digits` to `write_index`, which is bounded by `num_digits`."},
{"lineNum":"  101","line":"            //  3. `left_shift` `num_digits` to a max of `max_digits`."},
{"lineNum":"  102","line":"            //"},
{"lineNum":"  103","line":"            // Trim is only called in `right_shift` and `left_shift`."},
{"lineNum":"  104","line":"            std.debug.assert(self.num_digits <= max_digits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  105","line":"            while (self.num_digits != 0 and self.digits[self.num_digits - 1] == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                self.num_digits -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  107","line":"            }"},
{"lineNum":"  108","line":"        }"},
{"lineNum":"  109","line":""},
{"lineNum":"  110","line":"        pub fn round(self: *Self) MantissaT {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  111","line":"            if (self.num_digits == 0 or self.decimal_point < 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"                return 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  113","line":"            } else if (self.decimal_point > max_decimal_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  114","line":"                return math.maxInt(MantissaT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  115","line":"            }"},
{"lineNum":"  116","line":""},
{"lineNum":"  117","line":"            const dp = @intCast(usize, self.decimal_point);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"            var n: MantissaT = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"            var i: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  121","line":"            while (i < dp) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  122","line":"                n *= 10;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  123","line":"                if (i < self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"                    n += @as(MantissaT, self.digits[i]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  125","line":"                }"},
{"lineNum":"  126","line":"            }"},
{"lineNum":"  127","line":""},
{"lineNum":"  128","line":"            var round_up = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"            if (dp < self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"                round_up = self.digits[dp] >= 5;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  131","line":"                if (self.digits[dp] == 5 and dp + 1 == self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  132","line":"                    round_up = self.truncated or ((dp != 0) and (1 & self.digits[dp - 1] != 0));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  133","line":"                }"},
{"lineNum":"  134","line":"            }"},
{"lineNum":"  135","line":"            if (round_up) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  136","line":"                n += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  137","line":"            }"},
{"lineNum":"  138","line":"            return n;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  139","line":"        }"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"        /// Computes decimal * 2^shift."},
{"lineNum":"  142","line":"        pub fn leftShift(self: *Self, shift: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  143","line":"            if (self.num_digits == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  144","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"            }"},
{"lineNum":"  146","line":"            const num_new_digits = self.numberOfDigitsLeftShift(shift);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  147","line":"            var read_index = self.num_digits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  148","line":"            var write_index = self.num_digits + num_new_digits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  149","line":"            var n: MantissaT = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  150","line":"            while (read_index != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  151","line":"                read_index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  152","line":"                write_index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  153","line":"                n += math.shl(MantissaT, self.digits[read_index], shift);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"                const quotient = n / 10;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  156","line":"                const remainder = n - (10 * quotient);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"                if (write_index < max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"                    self.digits[write_index] = @intCast(u8, remainder);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  159","line":"                } else if (remainder > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"                    self.truncated = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"                }"},
{"lineNum":"  162","line":"                n = quotient;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  163","line":"            }"},
{"lineNum":"  164","line":"            while (n > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  165","line":"                write_index -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  166","line":""},
{"lineNum":"  167","line":"                const quotient = n / 10;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  168","line":"                const remainder = n - (10 * quotient);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  169","line":"                if (write_index < max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"                    self.digits[write_index] = @intCast(u8, remainder);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  171","line":"                } else if (remainder > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  172","line":"                    self.truncated = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  173","line":"                }"},
{"lineNum":"  174","line":"                n = quotient;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  175","line":"            }"},
{"lineNum":"  176","line":""},
{"lineNum":"  177","line":"            self.num_digits += num_new_digits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  178","line":"            if (self.num_digits > max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  179","line":"                self.num_digits = max_digits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  180","line":"            }"},
{"lineNum":"  181","line":"            self.decimal_point += @intCast(i32, num_new_digits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  182","line":"            self.trim();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  183","line":"        }"},
{"lineNum":"  184","line":""},
{"lineNum":"  185","line":"        /// Computes decimal * 2^-shift."},
{"lineNum":"  186","line":"        pub fn rightShift(self: *Self, shift: usize) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"            var read_index: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"            var write_index: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  189","line":"            var n: MantissaT = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  190","line":"            while (math.shr(MantissaT, n, shift) == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  191","line":"                if (read_index < self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"                    n = (10 * n) + self.digits[read_index];","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  193","line":"                    read_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                } else if (n == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  195","line":"                    return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"                } else {"},
{"lineNum":"  197","line":"                    while (math.shr(MantissaT, n, shift) == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"                        n *= 10;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  199","line":"                        read_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  200","line":"                    }"},
{"lineNum":"  201","line":"                    break;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  202","line":"                }"},
{"lineNum":"  203","line":"            }"},
{"lineNum":"  204","line":""},
{"lineNum":"  205","line":"            self.decimal_point -= @intCast(i32, read_index) - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  206","line":"            if (self.decimal_point < -decimal_point_range) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"                self.num_digits = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  208","line":"                self.decimal_point = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  209","line":"                self.truncated = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"                return;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  211","line":"            }"},
{"lineNum":"  212","line":""},
{"lineNum":"  213","line":"            const mask = math.shl(MantissaT, 1, shift) - 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  214","line":"            while (read_index < self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  215","line":"                const new_digit = @intCast(u8, math.shr(MantissaT, n, shift));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  216","line":"                n = (10 * (n & mask)) + self.digits[read_index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  217","line":"                read_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  218","line":"                self.digits[write_index] = new_digit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  219","line":"                write_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  220","line":"            }"},
{"lineNum":"  221","line":"            while (n > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  222","line":"                const new_digit = @intCast(u8, math.shr(MantissaT, n, shift));","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  223","line":"                n = 10 * (n & mask);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  224","line":"                if (write_index < max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  225","line":"                    self.digits[write_index] = new_digit;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  226","line":"                    write_index += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  227","line":"                } else if (new_digit > 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  228","line":"                    self.truncated = true;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  229","line":"                }"},
{"lineNum":"  230","line":"            }"},
{"lineNum":"  231","line":"            self.num_digits = write_index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"            self.trim();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  233","line":"        }"},
{"lineNum":"  234","line":""},
{"lineNum":"  235","line":"        /// Parse a bit integer representation of the float as a decimal."},
{"lineNum":"  236","line":"        // We do not verify underscores in this path since these will have been verified"},
{"lineNum":"  237","line":"        // via parse.parseNumber so can assume the number is well-formed."},
{"lineNum":"  238","line":"        // This code-path does not have to handle hex-floats since these will always be handled via another"},
{"lineNum":"  239","line":"        // function prior to this."},
{"lineNum":"  240","line":"        pub fn parse(s: []const u8) Self {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  241","line":"            var d = Self.new();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            var stream = FloatStream.init(s);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  243","line":""},
{"lineNum":"  244","line":"            stream.skipChars2(\'0\', \'_\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  245","line":"            while (stream.scanDigit(10)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  246","line":"                d.tryAddDigit(digit);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  247","line":"            }"},
{"lineNum":"  248","line":""},
{"lineNum":"  249","line":"            if (stream.firstIs(\'.\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  250","line":"                stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"                const marker = stream.offsetTrue();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":""},
{"lineNum":"  253","line":"                // Skip leading zeroes"},
{"lineNum":"  254","line":"                if (d.num_digits == 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  255","line":"                    stream.skipChars(\'0\');","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  256","line":"                }"},
{"lineNum":"  257","line":""},
{"lineNum":"  258","line":"                while (stream.hasLen(8) and d.num_digits + 8 < max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  259","line":"                    const v = stream.readU64Unchecked();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"                    if (!isEightDigits(v)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  261","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  262","line":"                    }"},
{"lineNum":"  263","line":"                    std.mem.writeIntSliceLittle(u64, d.digits[d.num_digits..], v - 0x3030_3030_3030_3030);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  264","line":"                    d.num_digits += 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  265","line":"                    stream.advance(8);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"                }"},
{"lineNum":"  267","line":""},
{"lineNum":"  268","line":"                while (stream.scanDigit(10)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  269","line":"                    d.tryAddDigit(digit);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  270","line":"                }"},
{"lineNum":"  271","line":"                d.decimal_point = @intCast(i32, marker) - @intCast(i32, stream.offsetTrue());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"            }"},
{"lineNum":"  273","line":"            if (d.num_digits != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  274","line":"                // Ignore trailing zeros if any"},
{"lineNum":"  275","line":"                var n_trailing_zeros: usize = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  276","line":"                var i = stream.offsetTrue() - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  277","line":"                while (true) {"},
{"lineNum":"  278","line":"                    if (s[i] == \'0\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  279","line":"                        n_trailing_zeros += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  280","line":"                    } else if (s[i] != \'.\') {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  281","line":"                        break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  282","line":"                    }"},
{"lineNum":"  283","line":""},
{"lineNum":"  284","line":"                    i -= 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  285","line":"                    if (i == 0) break;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  286","line":"                }"},
{"lineNum":"  287","line":"                d.decimal_point += @intCast(i32, n_trailing_zeros);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  288","line":"                d.num_digits -= n_trailing_zeros;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  289","line":"                d.decimal_point += @intCast(i32, d.num_digits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  290","line":"                if (d.num_digits > max_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  291","line":"                    d.truncated = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  292","line":"                    d.num_digits = max_digits;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  293","line":"                }"},
{"lineNum":"  294","line":"            }"},
{"lineNum":"  295","line":"            if (stream.firstIsLower(\'e\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  296","line":"                stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  297","line":"                var neg_exp = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  298","line":"                if (stream.firstIs(\'-\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  299","line":"                    neg_exp = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  300","line":"                    stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  301","line":"                } else if (stream.firstIs(\'+\')) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  302","line":"                    stream.advance(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"                }"},
{"lineNum":"  304","line":"                var exp_num: i32 = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  305","line":"                while (stream.scanDigit(10)) |digit| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  306","line":"                    if (exp_num < 0x10000) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  307","line":"                        exp_num = 10 * exp_num + digit;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  308","line":"                    }"},
{"lineNum":"  309","line":"                }"},
{"lineNum":"  310","line":"                d.decimal_point += if (neg_exp) -exp_num else exp_num;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":"            }"},
{"lineNum":"  312","line":""},
{"lineNum":"  313","line":"            var i = d.num_digits;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"            while (i < max_digits_without_overflow) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  315","line":"                d.digits[i] = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  316","line":"            }"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"            return d;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  319","line":"        }"},
{"lineNum":"  320","line":""},
{"lineNum":"  321","line":"        // Compute the number decimal digits introduced by a base-2 shift. This is performed"},
{"lineNum":"  322","line":"        // by storing the leading digits of 1/2^i = 5^i and using these along with the cut-off"},
{"lineNum":"  323","line":"        // value to quickly determine the decimal shift from binary."},
{"lineNum":"  324","line":"        //"},
{"lineNum":"  325","line":"        // See also https://github.com/golang/go/blob/go1.15.3/src/strconv/decimal.go#L163 for"},
{"lineNum":"  326","line":"        // another description of the method."},
{"lineNum":"  327","line":"        pub fn numberOfDigitsLeftShift(self: *Self, shift: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  328","line":"            const ShiftCutoff = struct {"},
{"lineNum":"  329","line":"                delta: u8,"},
{"lineNum":"  330","line":"                cutoff: []const u8,"},
{"lineNum":"  331","line":"            };"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"            // Leading digits of 1/2^i = 5^i."},
{"lineNum":"  334","line":"            //"},
{"lineNum":"  335","line":"            // ```"},
{"lineNum":"  336","line":"            // import math"},
{"lineNum":"  337","line":"            //"},
{"lineNum":"  338","line":"            // bits = 128"},
{"lineNum":"  339","line":"            // for i in range(bits):"},
{"lineNum":"  340","line":"            //     log2 = math.log(2)/math.log(10)"},
{"lineNum":"  341","line":"            //     print(f\'.{{ .delta = {int(log2*i+1)}, .cutoff = \"{5**i}\" }}, // {2**i}\')"},
{"lineNum":"  342","line":"            // ```"},
{"lineNum":"  343","line":"            const pow2_to_pow5_table = [_]ShiftCutoff{"},
{"lineNum":"  344","line":"                .{ .delta = 0, .cutoff = \"\" },"},
{"lineNum":"  345","line":"                .{ .delta = 1, .cutoff = \"5\" }, // 2"},
{"lineNum":"  346","line":"                .{ .delta = 1, .cutoff = \"25\" }, // 4"},
{"lineNum":"  347","line":"                .{ .delta = 1, .cutoff = \"125\" }, // 8"},
{"lineNum":"  348","line":"                .{ .delta = 2, .cutoff = \"625\" }, // 16"},
{"lineNum":"  349","line":"                .{ .delta = 2, .cutoff = \"3125\" }, // 32"},
{"lineNum":"  350","line":"                .{ .delta = 2, .cutoff = \"15625\" }, // 64"},
{"lineNum":"  351","line":"                .{ .delta = 3, .cutoff = \"78125\" }, // 128"},
{"lineNum":"  352","line":"                .{ .delta = 3, .cutoff = \"390625\" }, // 256"},
{"lineNum":"  353","line":"                .{ .delta = 3, .cutoff = \"1953125\" }, // 512"},
{"lineNum":"  354","line":"                .{ .delta = 4, .cutoff = \"9765625\" }, // 1024"},
{"lineNum":"  355","line":"                .{ .delta = 4, .cutoff = \"48828125\" }, // 2048"},
{"lineNum":"  356","line":"                .{ .delta = 4, .cutoff = \"244140625\" }, // 4096"},
{"lineNum":"  357","line":"                .{ .delta = 4, .cutoff = \"1220703125\" }, // 8192"},
{"lineNum":"  358","line":"                .{ .delta = 5, .cutoff = \"6103515625\" }, // 16384"},
{"lineNum":"  359","line":"                .{ .delta = 5, .cutoff = \"30517578125\" }, // 32768"},
{"lineNum":"  360","line":"                .{ .delta = 5, .cutoff = \"152587890625\" }, // 65536"},
{"lineNum":"  361","line":"                .{ .delta = 6, .cutoff = \"762939453125\" }, // 131072"},
{"lineNum":"  362","line":"                .{ .delta = 6, .cutoff = \"3814697265625\" }, // 262144"},
{"lineNum":"  363","line":"                .{ .delta = 6, .cutoff = \"19073486328125\" }, // 524288"},
{"lineNum":"  364","line":"                .{ .delta = 7, .cutoff = \"95367431640625\" }, // 1048576"},
{"lineNum":"  365","line":"                .{ .delta = 7, .cutoff = \"476837158203125\" }, // 2097152"},
{"lineNum":"  366","line":"                .{ .delta = 7, .cutoff = \"2384185791015625\" }, // 4194304"},
{"lineNum":"  367","line":"                .{ .delta = 7, .cutoff = \"11920928955078125\" }, // 8388608"},
{"lineNum":"  368","line":"                .{ .delta = 8, .cutoff = \"59604644775390625\" }, // 16777216"},
{"lineNum":"  369","line":"                .{ .delta = 8, .cutoff = \"298023223876953125\" }, // 33554432"},
{"lineNum":"  370","line":"                .{ .delta = 8, .cutoff = \"1490116119384765625\" }, // 67108864"},
{"lineNum":"  371","line":"                .{ .delta = 9, .cutoff = \"7450580596923828125\" }, // 134217728"},
{"lineNum":"  372","line":"                .{ .delta = 9, .cutoff = \"37252902984619140625\" }, // 268435456"},
{"lineNum":"  373","line":"                .{ .delta = 9, .cutoff = \"186264514923095703125\" }, // 536870912"},
{"lineNum":"  374","line":"                .{ .delta = 10, .cutoff = \"931322574615478515625\" }, // 1073741824"},
{"lineNum":"  375","line":"                .{ .delta = 10, .cutoff = \"4656612873077392578125\" }, // 2147483648"},
{"lineNum":"  376","line":"                .{ .delta = 10, .cutoff = \"23283064365386962890625\" }, // 4294967296"},
{"lineNum":"  377","line":"                .{ .delta = 10, .cutoff = \"116415321826934814453125\" }, // 8589934592"},
{"lineNum":"  378","line":"                .{ .delta = 11, .cutoff = \"582076609134674072265625\" }, // 17179869184"},
{"lineNum":"  379","line":"                .{ .delta = 11, .cutoff = \"2910383045673370361328125\" }, // 34359738368"},
{"lineNum":"  380","line":"                .{ .delta = 11, .cutoff = \"14551915228366851806640625\" }, // 68719476736"},
{"lineNum":"  381","line":"                .{ .delta = 12, .cutoff = \"72759576141834259033203125\" }, // 137438953472"},
{"lineNum":"  382","line":"                .{ .delta = 12, .cutoff = \"363797880709171295166015625\" }, // 274877906944"},
{"lineNum":"  383","line":"                .{ .delta = 12, .cutoff = \"1818989403545856475830078125\" }, // 549755813888"},
{"lineNum":"  384","line":"                .{ .delta = 13, .cutoff = \"9094947017729282379150390625\" }, // 1099511627776"},
{"lineNum":"  385","line":"                .{ .delta = 13, .cutoff = \"45474735088646411895751953125\" }, // 2199023255552"},
{"lineNum":"  386","line":"                .{ .delta = 13, .cutoff = \"227373675443232059478759765625\" }, // 4398046511104"},
{"lineNum":"  387","line":"                .{ .delta = 13, .cutoff = \"1136868377216160297393798828125\" }, // 8796093022208"},
{"lineNum":"  388","line":"                .{ .delta = 14, .cutoff = \"5684341886080801486968994140625\" }, // 17592186044416"},
{"lineNum":"  389","line":"                .{ .delta = 14, .cutoff = \"28421709430404007434844970703125\" }, // 35184372088832"},
{"lineNum":"  390","line":"                .{ .delta = 14, .cutoff = \"142108547152020037174224853515625\" }, // 70368744177664"},
{"lineNum":"  391","line":"                .{ .delta = 15, .cutoff = \"710542735760100185871124267578125\" }, // 140737488355328"},
{"lineNum":"  392","line":"                .{ .delta = 15, .cutoff = \"3552713678800500929355621337890625\" }, // 281474976710656"},
{"lineNum":"  393","line":"                .{ .delta = 15, .cutoff = \"17763568394002504646778106689453125\" }, // 562949953421312"},
{"lineNum":"  394","line":"                .{ .delta = 16, .cutoff = \"88817841970012523233890533447265625\" }, // 1125899906842624"},
{"lineNum":"  395","line":"                .{ .delta = 16, .cutoff = \"444089209850062616169452667236328125\" }, // 2251799813685248"},
{"lineNum":"  396","line":"                .{ .delta = 16, .cutoff = \"2220446049250313080847263336181640625\" }, // 4503599627370496"},
{"lineNum":"  397","line":"                .{ .delta = 16, .cutoff = \"11102230246251565404236316680908203125\" }, // 9007199254740992"},
{"lineNum":"  398","line":"                .{ .delta = 17, .cutoff = \"55511151231257827021181583404541015625\" }, // 18014398509481984"},
{"lineNum":"  399","line":"                .{ .delta = 17, .cutoff = \"277555756156289135105907917022705078125\" }, // 36028797018963968"},
{"lineNum":"  400","line":"                .{ .delta = 17, .cutoff = \"1387778780781445675529539585113525390625\" }, // 72057594037927936"},
{"lineNum":"  401","line":"                .{ .delta = 18, .cutoff = \"6938893903907228377647697925567626953125\" }, // 144115188075855872"},
{"lineNum":"  402","line":"                .{ .delta = 18, .cutoff = \"34694469519536141888238489627838134765625\" }, // 288230376151711744"},
{"lineNum":"  403","line":"                .{ .delta = 18, .cutoff = \"173472347597680709441192448139190673828125\" }, // 576460752303423488"},
{"lineNum":"  404","line":"                .{ .delta = 19, .cutoff = \"867361737988403547205962240695953369140625\" }, // 1152921504606846976"},
{"lineNum":"  405","line":"                .{ .delta = 19, .cutoff = \"4336808689942017736029811203479766845703125\" }, // 2305843009213693952"},
{"lineNum":"  406","line":"                .{ .delta = 19, .cutoff = \"21684043449710088680149056017398834228515625\" }, // 4611686018427387904"},
{"lineNum":"  407","line":"                .{ .delta = 19, .cutoff = \"108420217248550443400745280086994171142578125\" }, // 9223372036854775808"},
{"lineNum":"  408","line":"                .{ .delta = 20, .cutoff = \"542101086242752217003726400434970855712890625\" }, // 18446744073709551616"},
{"lineNum":"  409","line":"                .{ .delta = 20, .cutoff = \"2710505431213761085018632002174854278564453125\" }, // 36893488147419103232"},
{"lineNum":"  410","line":"                .{ .delta = 20, .cutoff = \"13552527156068805425093160010874271392822265625\" }, // 73786976294838206464"},
{"lineNum":"  411","line":"                .{ .delta = 21, .cutoff = \"67762635780344027125465800054371356964111328125\" }, // 147573952589676412928"},
{"lineNum":"  412","line":"                .{ .delta = 21, .cutoff = \"338813178901720135627329000271856784820556640625\" }, // 295147905179352825856"},
{"lineNum":"  413","line":"                .{ .delta = 21, .cutoff = \"1694065894508600678136645001359283924102783203125\" }, // 590295810358705651712"},
{"lineNum":"  414","line":"                .{ .delta = 22, .cutoff = \"8470329472543003390683225006796419620513916015625\" }, // 1180591620717411303424"},
{"lineNum":"  415","line":"                .{ .delta = 22, .cutoff = \"42351647362715016953416125033982098102569580078125\" }, // 2361183241434822606848"},
{"lineNum":"  416","line":"                .{ .delta = 22, .cutoff = \"211758236813575084767080625169910490512847900390625\" }, // 4722366482869645213696"},
{"lineNum":"  417","line":"                .{ .delta = 22, .cutoff = \"1058791184067875423835403125849552452564239501953125\" }, // 9444732965739290427392"},
{"lineNum":"  418","line":"                .{ .delta = 23, .cutoff = \"5293955920339377119177015629247762262821197509765625\" }, // 18889465931478580854784"},
{"lineNum":"  419","line":"                .{ .delta = 23, .cutoff = \"26469779601696885595885078146238811314105987548828125\" }, // 37778931862957161709568"},
{"lineNum":"  420","line":"                .{ .delta = 23, .cutoff = \"132348898008484427979425390731194056570529937744140625\" }, // 75557863725914323419136"},
{"lineNum":"  421","line":"                .{ .delta = 24, .cutoff = \"661744490042422139897126953655970282852649688720703125\" }, // 151115727451828646838272"},
{"lineNum":"  422","line":"                .{ .delta = 24, .cutoff = \"3308722450212110699485634768279851414263248443603515625\" }, // 302231454903657293676544"},
{"lineNum":"  423","line":"                .{ .delta = 24, .cutoff = \"16543612251060553497428173841399257071316242218017578125\" }, // 604462909807314587353088"},
{"lineNum":"  424","line":"                .{ .delta = 25, .cutoff = \"82718061255302767487140869206996285356581211090087890625\" }, // 1208925819614629174706176"},
{"lineNum":"  425","line":"                .{ .delta = 25, .cutoff = \"413590306276513837435704346034981426782906055450439453125\" }, // 2417851639229258349412352"},
{"lineNum":"  426","line":"                .{ .delta = 25, .cutoff = \"2067951531382569187178521730174907133914530277252197265625\" }, // 4835703278458516698824704"},
{"lineNum":"  427","line":"                .{ .delta = 25, .cutoff = \"10339757656912845935892608650874535669572651386260986328125\" }, // 9671406556917033397649408"},
{"lineNum":"  428","line":"                .{ .delta = 26, .cutoff = \"51698788284564229679463043254372678347863256931304931640625\" }, // 19342813113834066795298816"},
{"lineNum":"  429","line":"                .{ .delta = 26, .cutoff = \"258493941422821148397315216271863391739316284656524658203125\" }, // 38685626227668133590597632"},
{"lineNum":"  430","line":"                .{ .delta = 26, .cutoff = \"1292469707114105741986576081359316958696581423282623291015625\" }, // 77371252455336267181195264"},
{"lineNum":"  431","line":"                .{ .delta = 27, .cutoff = \"6462348535570528709932880406796584793482907116413116455078125\" }, // 154742504910672534362390528"},
{"lineNum":"  432","line":"                .{ .delta = 27, .cutoff = \"32311742677852643549664402033982923967414535582065582275390625\" }, // 309485009821345068724781056"},
{"lineNum":"  433","line":"                .{ .delta = 27, .cutoff = \"161558713389263217748322010169914619837072677910327911376953125\" }, // 618970019642690137449562112"},
{"lineNum":"  434","line":"                .{ .delta = 28, .cutoff = \"807793566946316088741610050849573099185363389551639556884765625\" }, // 1237940039285380274899124224"},
{"lineNum":"  435","line":"                .{ .delta = 28, .cutoff = \"4038967834731580443708050254247865495926816947758197784423828125\" }, // 2475880078570760549798248448"},
{"lineNum":"  436","line":"                .{ .delta = 28, .cutoff = \"20194839173657902218540251271239327479634084738790988922119140625\" }, // 4951760157141521099596496896"},
{"lineNum":"  437","line":"                .{ .delta = 28, .cutoff = \"100974195868289511092701256356196637398170423693954944610595703125\" }, // 9903520314283042199192993792"},
{"lineNum":"  438","line":"                .{ .delta = 29, .cutoff = \"504870979341447555463506281780983186990852118469774723052978515625\" }, // 19807040628566084398385987584"},
{"lineNum":"  439","line":"                .{ .delta = 29, .cutoff = \"2524354896707237777317531408904915934954260592348873615264892578125\" }, // 39614081257132168796771975168"},
{"lineNum":"  440","line":"                .{ .delta = 29, .cutoff = \"12621774483536188886587657044524579674771302961744368076324462890625\" }, // 79228162514264337593543950336"},
{"lineNum":"  441","line":"                .{ .delta = 30, .cutoff = \"63108872417680944432938285222622898373856514808721840381622314453125\" }, // 158456325028528675187087900672"},
{"lineNum":"  442","line":"                .{ .delta = 30, .cutoff = \"315544362088404722164691426113114491869282574043609201908111572265625\" }, // 316912650057057350374175801344"},
{"lineNum":"  443","line":"                .{ .delta = 30, .cutoff = \"1577721810442023610823457130565572459346412870218046009540557861328125\" }, // 633825300114114700748351602688"},
{"lineNum":"  444","line":"                .{ .delta = 31, .cutoff = \"7888609052210118054117285652827862296732064351090230047702789306640625\" }, // 1267650600228229401496703205376"},
{"lineNum":"  445","line":"                .{ .delta = 31, .cutoff = \"39443045261050590270586428264139311483660321755451150238513946533203125\" }, // 2535301200456458802993406410752"},
{"lineNum":"  446","line":"                .{ .delta = 31, .cutoff = \"197215226305252951352932141320696557418301608777255751192569732666015625\" }, // 5070602400912917605986812821504"},
{"lineNum":"  447","line":"                .{ .delta = 32, .cutoff = \"986076131526264756764660706603482787091508043886278755962848663330078125\" }, // 10141204801825835211973625643008"},
{"lineNum":"  448","line":"                .{ .delta = 32, .cutoff = \"4930380657631323783823303533017413935457540219431393779814243316650390625\" }, // 20282409603651670423947251286016"},
{"lineNum":"  449","line":"                .{ .delta = 32, .cutoff = \"24651903288156618919116517665087069677287701097156968899071216583251953125\" }, // 40564819207303340847894502572032"},
{"lineNum":"  450","line":"                .{ .delta = 32, .cutoff = \"123259516440783094595582588325435348386438505485784844495356082916259765625\" }, // 81129638414606681695789005144064"},
{"lineNum":"  451","line":"                .{ .delta = 33, .cutoff = \"616297582203915472977912941627176741932192527428924222476780414581298828125\" }, // 162259276829213363391578010288128"},
{"lineNum":"  452","line":"                .{ .delta = 33, .cutoff = \"3081487911019577364889564708135883709660962637144621112383902072906494140625\" }, // 324518553658426726783156020576256"},
{"lineNum":"  453","line":"                .{ .delta = 33, .cutoff = \"15407439555097886824447823540679418548304813185723105561919510364532470703125\" }, // 649037107316853453566312041152512"},
{"lineNum":"  454","line":"                .{ .delta = 34, .cutoff = \"77037197775489434122239117703397092741524065928615527809597551822662353515625\" }, // 1298074214633706907132624082305024"},
{"lineNum":"  455","line":"                .{ .delta = 34, .cutoff = \"385185988877447170611195588516985463707620329643077639047987759113311767578125\" }, // 2596148429267413814265248164610048"},
{"lineNum":"  456","line":"                .{ .delta = 34, .cutoff = \"1925929944387235853055977942584927318538101648215388195239938795566558837890625\" }, // 5192296858534827628530496329220096"},
{"lineNum":"  457","line":"                .{ .delta = 35, .cutoff = \"9629649721936179265279889712924636592690508241076940976199693977832794189453125\" }, // 10384593717069655257060992658440192"},
{"lineNum":"  458","line":"                .{ .delta = 35, .cutoff = \"48148248609680896326399448564623182963452541205384704880998469889163970947265625\" }, // 20769187434139310514121985316880384"},
{"lineNum":"  459","line":"                .{ .delta = 35, .cutoff = \"240741243048404481631997242823115914817262706026923524404992349445819854736328125\" }, // 41538374868278621028243970633760768"},
{"lineNum":"  460","line":"                .{ .delta = 35, .cutoff = \"1203706215242022408159986214115579574086313530134617622024961747229099273681640625\" }, // 83076749736557242056487941267521536"},
{"lineNum":"  461","line":"                .{ .delta = 36, .cutoff = \"6018531076210112040799931070577897870431567650673088110124808736145496368408203125\" }, // 166153499473114484112975882535043072"},
{"lineNum":"  462","line":"                .{ .delta = 36, .cutoff = \"30092655381050560203999655352889489352157838253365440550624043680727481842041015625\" }, // 332306998946228968225951765070086144"},
{"lineNum":"  463","line":"                .{ .delta = 36, .cutoff = \"150463276905252801019998276764447446760789191266827202753120218403637409210205078125\" }, // 664613997892457936451903530140172288"},
{"lineNum":"  464","line":"                .{ .delta = 37, .cutoff = \"752316384526264005099991383822237233803945956334136013765601092018187046051025390625\" }, // 1329227995784915872903807060280344576"},
{"lineNum":"  465","line":"                .{ .delta = 37, .cutoff = \"3761581922631320025499956919111186169019729781670680068828005460090935230255126953125\" }, // 2658455991569831745807614120560689152"},
{"lineNum":"  466","line":"                .{ .delta = 37, .cutoff = \"18807909613156600127499784595555930845098648908353400344140027300454676151275634765625\" }, // 5316911983139663491615228241121378304"},
{"lineNum":"  467","line":"                .{ .delta = 38, .cutoff = \"94039548065783000637498922977779654225493244541767001720700136502273380756378173828125\" }, // 10633823966279326983230456482242756608"},
{"lineNum":"  468","line":"                .{ .delta = 38, .cutoff = \"470197740328915003187494614888898271127466222708835008603500682511366903781890869140625\" }, // 21267647932558653966460912964485513216"},
{"lineNum":"  469","line":"                .{ .delta = 38, .cutoff = \"2350988701644575015937473074444491355637331113544175043017503412556834518909454345703125\" }, // 42535295865117307932921825928971026432"},
{"lineNum":"  470","line":"                .{ .delta = 38, .cutoff = \"11754943508222875079687365372222456778186655567720875215087517062784172594547271728515625\" }, // 85070591730234615865843651857942052864"},
{"lineNum":"  471","line":"                .{ .delta = 39, .cutoff = \"58774717541114375398436826861112283890933277838604376075437585313920862972736358642578125\" }, // 170141183460469231731687303715884105728"},
{"lineNum":"  472","line":"            };"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"            std.debug.assert(shift < pow2_to_pow5_table.len);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  475","line":"            const x = pow2_to_pow5_table[shift];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":""},
{"lineNum":"  477","line":"            // Compare leading digits of current to check if lexicographically less than cutoff."},
{"lineNum":"  478","line":"            for (x.cutoff, 0..) |p5, i| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  479","line":"                if (i >= self.num_digits) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  480","line":"                    return x.delta - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  481","line":"                } else if (self.digits[i] == p5 - \'0\') { // digits are stored as integers","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  482","line":"                    continue;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  483","line":"                } else if (self.digits[i] < p5 - \'0\') {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  484","line":"                    return x.delta - 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  485","line":"                } else {"},
{"lineNum":"  486","line":"                    return x.delta;","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  487","line":"                }"},
{"lineNum":"  488","line":"                return x.delta;"},
{"lineNum":"  489","line":"            }"},
{"lineNum":"  490","line":"            return x.delta;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":"        }"},
{"lineNum":"  492","line":"    };"},
{"lineNum":"  493","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 164, "covered" : 0,};
var merged_data = [];
