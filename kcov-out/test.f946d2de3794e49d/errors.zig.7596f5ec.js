var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const token = @import(\"token.zig\");"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const TokenKind = token.TokenKind;"},
{"lineNum":"    5","line":"const Span = @import(\"span.zig\").Span;"},
{"lineNum":"    6","line":""},
{"lineNum":"    7","line":"pub const Error = union(enum) {"},
{"lineNum":"    8","line":"    basic: struct {"},
{"lineNum":"    9","line":"        span: Span,"},
{"lineNum":"   10","line":"        msg: []const u8,"},
{"lineNum":"   11","line":"    },"},
{"lineNum":"   12","line":"    expectedBasicToken: struct {"},
{"lineNum":"   13","line":"        span: Span,"},
{"lineNum":"   14","line":"        expected: []const u8,"},
{"lineNum":"   15","line":"        got: TokenKind,"},
{"lineNum":"   16","line":"    },"},
{"lineNum":"   17","line":"    expected2Token: struct {"},
{"lineNum":"   18","line":"        span: Span,"},
{"lineNum":"   19","line":"        expected: TokenKind,"},
{"lineNum":"   20","line":"        got: TokenKind,"},
{"lineNum":"   21","line":"    },"},
{"lineNum":"   22","line":"    redefinition: struct {"},
{"lineNum":"   23","line":"        first_defined_span: Span,"},
{"lineNum":"   24","line":"        redefined_span: Span,"},
{"lineNum":"   25","line":"        name: []const u8,"},
{"lineNum":"   26","line":"    },"},
{"lineNum":"   27","line":"};"},
{"lineNum":"   28","line":""},
{"lineNum":"   29","line":"pub const Errors = struct {"},
{"lineNum":"   30","line":"    errors_list: std.ArrayList(Error),"},
{"lineNum":"   31","line":""},
{"lineNum":"   32","line":"    pub fn init(allocator: std.mem.Allocator) Errors {","class":"lineCov","hits":"1","order":"698","possible_hits":"1",},
{"lineNum":"   33","line":"        return .{ .errors_list = std.ArrayList(Error).init(allocator) };","class":"lineCov","hits":"1","order":"699","possible_hits":"1",},
{"lineNum":"   34","line":"    }"},
{"lineNum":"   35","line":""},
{"lineNum":"   36","line":"    pub fn deinit(self: *Errors) void {","class":"lineCov","hits":"1","order":"1607","possible_hits":"1",},
{"lineNum":"   37","line":"        self.errors_list.deinit();","class":"lineCov","hits":"1","order":"1608","possible_hits":"1",},
{"lineNum":"   38","line":"    }"},
{"lineNum":"   39","line":"    pub fn addError(self: *Errors, err: Error) void {","class":"lineCov","hits":"1","order":"1982","possible_hits":"1",},
{"lineNum":"   40","line":"        self.errors_list.append(err) catch unreachable; // TODO: Should this try?","class":"lineCov","hits":"1","order":"1983","possible_hits":"1",},
{"lineNum":"   41","line":"    }"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    pub fn printErrors(self: *Errors) void {"},
{"lineNum":"   44","line":"        for (self.errors_list.items) |err| {"},
{"lineNum":"   45","line":"            // TODO: When the line map is implemented, print out line where span occurs. Do this for all spans."},
{"lineNum":"   46","line":"            switch (err) {"},
{"lineNum":"   47","line":"                .basic => std.debug.print(\"{{TODO: ADD FILENAMES}}:{}:{} error: {s}\\n\", .{ err.basic.span.line, err.basic.span.col, err.basic.msg }),"},
{"lineNum":"   48","line":"                .expected2Token => std.debug.print(\"{{TODO: ADD FILENAMES}}:{}:{} error: expected `{s}`, got `{s}`\\n\", .{"},
{"lineNum":"   49","line":"                    err.expected2Token.span.line,"},
{"lineNum":"   50","line":"                    err.expected2Token.span.col,"},
{"lineNum":"   51","line":"                    token.reprFromTokenKind(err.expected2Token.expected) orelse \"identifier\","},
{"lineNum":"   52","line":"                    token.reprFromTokenKind(err.expected2Token.got) orelse \"identifier\","},
{"lineNum":"   53","line":"                }),"},
{"lineNum":"   54","line":"                .expectedBasicToken => std.debug.print(\"{{TODO: ADD FILENAMES}}:{}:{} error: expected {s}, got `{s}`\\n\", .{"},
{"lineNum":"   55","line":"                    err.expectedBasicToken.span.line,"},
{"lineNum":"   56","line":"                    err.expectedBasicToken.span.col,"},
{"lineNum":"   57","line":"                    err.expectedBasicToken.expected,"},
{"lineNum":"   58","line":"                    token.reprFromTokenKind(err.expectedBasicToken.got) orelse \"identifier\","},
{"lineNum":"   59","line":"                }),"},
{"lineNum":"   60","line":"                .redefinition => std.debug.print(\"{{TODO: ADD FILENAMES}}:{}:{} error: redefinition of symbol `{s}`\\n\", .{"},
{"lineNum":"   61","line":"                    err.redefinition.redefined_span.line,"},
{"lineNum":"   62","line":"                    err.redefinition.redefined_span.col,"},
{"lineNum":"   63","line":"                    err.redefinition.name,"},
{"lineNum":"   64","line":"                }),"},
{"lineNum":"   65","line":"            }"},
{"lineNum":"   66","line":"        }"},
{"lineNum":"   67","line":"    }"},
{"lineNum":"   68","line":"};"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 6, "covered" : 6,};
var merged_data = [];
