var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":""},
{"lineNum":"    3","line":"const ast = @import(\"ast.zig\");"},
{"lineNum":"    4","line":"const errs = @import(\"errors.zig\");"},
{"lineNum":"    5","line":"const main = @import(\"main.zig\");"},
{"lineNum":"    6","line":"const _token = @import(\"token.zig\");"},
{"lineNum":"    7","line":""},
{"lineNum":"    8","line":"const AST = ast.AST;"},
{"lineNum":"    9","line":"const Error = errs.Error;"},
{"lineNum":"   10","line":"const String = @import(\"zig-string/zig-string.zig\").String;"},
{"lineNum":"   11","line":"const Token = _token.Token;"},
{"lineNum":"   12","line":"const TokenKind = _token.TokenKind;"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"const ParserErrorEnum = error{"},
{"lineNum":"   15","line":"    parserError, // For general parsing errors. Error is logged in errors.zig.errors. Likely"},
{"lineNum":"   16","line":"    InvalidCharacter, // If parsing a float goes wrong. Likely"},
{"lineNum":"   17","line":"    Overflow, // If parsing an integer goes wrong. Unlikely"},
{"lineNum":"   18","line":""},
{"lineNum":"   19","line":"    OutOfMemory, // Often when appending to an ArrayList, unlikely"},
{"lineNum":"   20","line":"};"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"pub const Parser = struct {"},
{"lineNum":"   23","line":"    tokens: *std.ArrayList(Token),"},
{"lineNum":"   24","line":"    cursor: usize,"},
{"lineNum":"   25","line":"    astAllocator: std.mem.Allocator,"},
{"lineNum":"   26","line":"    errors: *errs.Errors,"},
{"lineNum":"   27","line":""},
{"lineNum":"   28","line":"    pub fn create(tokens: *std.ArrayList(Token), errors: *errs.Errors, astAllocator: std.mem.Allocator) !Parser {","class":"lineCov","hits":"1","order":"1275","possible_hits":"1",},
{"lineNum":"   29","line":"        return .{ //","class":"lineCov","hits":"1","order":"1276","possible_hits":"1",},
{"lineNum":"   30","line":"            .tokens = tokens,"},
{"lineNum":"   31","line":"            .cursor = 0,"},
{"lineNum":"   32","line":"            .astAllocator = astAllocator,"},
{"lineNum":"   33","line":"            .errors = errors,"},
{"lineNum":"   34","line":"        };"},
{"lineNum":"   35","line":"    }"},
{"lineNum":"   36","line":""},
{"lineNum":"   37","line":"    fn peek(self: *Parser) Token {","class":"lineCov","hits":"1","order":"1283","possible_hits":"1",},
{"lineNum":"   38","line":"        return self.tokens.items[self.cursor];","class":"lineCov","hits":"1","order":"1284","possible_hits":"1",},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"    fn peekKind(self: *Parser, kind: TokenKind) bool {","class":"lineCov","hits":"1","order":"1290","possible_hits":"1",},
{"lineNum":"   42","line":"        return self.peek().kind == kind;","class":"lineCov","hits":"1","order":"1291","possible_hits":"1",},
{"lineNum":"   43","line":"    }"},
{"lineNum":"   44","line":""},
{"lineNum":"   45","line":"    fn nextIsExpr(self: *Parser) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"        const nextKind = self.peek().kind;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"        return nextKind == .E_MARK //","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"        or nextKind == .Q_MARK //"},
{"lineNum":"   49","line":"        or nextKind == .PERIOD //"},
{"lineNum":"   50","line":"        or nextKind == .AMPERSAND //"},
{"lineNum":"   51","line":"        or nextKind == .L_PAREN //"},
{"lineNum":"   52","line":"        or nextKind == .L_SQUARE //"},
{"lineNum":"   53","line":"        or nextKind == .L_BRACE //"},
{"lineNum":"   54","line":"        or nextKind == .INDENT //"},
{"lineNum":"   55","line":"        or nextKind == .BAR //"},
{"lineNum":"   56","line":"        or nextKind == .MINUS //"},
{"lineNum":"   57","line":"        or nextKind == .CASE //"},
{"lineNum":"   58","line":"        or nextKind == .COND //"},
{"lineNum":"   59","line":"        or nextKind == .FN //"},
{"lineNum":"   60","line":"        or nextKind == .FOR //"},
{"lineNum":"   61","line":"        or nextKind == .IF //"},
{"lineNum":"   62","line":"        or nextKind == .TRY //"},
{"lineNum":"   63","line":"        or nextKind == .UNREACHABLE //"},
{"lineNum":"   64","line":"        or nextKind == .WHILE //"},
{"lineNum":"   65","line":"        or nextKind == .IDENTIFIER //"},
{"lineNum":"   66","line":"        or nextKind == .BIN_INTEGER //"},
{"lineNum":"   67","line":"        or nextKind == .CHAR //"},
{"lineNum":"   68","line":"        or nextKind == .HEX_INTEGER //"},
{"lineNum":"   69","line":"        or nextKind == .DECIMAL_INTEGER //"},
{"lineNum":"   70","line":"        or nextKind == .OCT_INTEGER //"},
{"lineNum":"   71","line":"        or nextKind == .REAL //"},
{"lineNum":"   72","line":"        or nextKind == .STRING;"},
{"lineNum":"   73","line":"    }"},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"    fn nextIsStatement(self: *Parser) bool {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   76","line":"        const nextKind = self.peek().kind;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   77","line":"        return nextKind == .LET or nextKind == .CONST or nextKind == .DEFER or nextKind == .ERRDEFER or self.nextIsExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   78","line":"    }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"    fn accept(self: *Parser, kind: TokenKind) ?Token {","class":"lineCov","hits":"1","order":"1281","possible_hits":"1",},
{"lineNum":"   81","line":"        var token = self.peek();","class":"lineCov","hits":"1","order":"1282","possible_hits":"1",},
{"lineNum":"   82","line":"        if (token.kind == kind) {","class":"lineCov","hits":"1","order":"1285","possible_hits":"1",},
{"lineNum":"   83","line":"            self.cursor += 1;","class":"lineCov","hits":"2","order":"1286","possible_hits":"2",},
{"lineNum":"   84","line":"            return token;","class":"lineCov","hits":"1","order":"1287","possible_hits":"1",},
{"lineNum":"   85","line":"        } else {"},
{"lineNum":"   86","line":"            return null;","class":"lineCov","hits":"1","order":"1288","possible_hits":"1",},
{"lineNum":"   87","line":"        }"},
{"lineNum":"   88","line":"    }"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    fn expect(self: *Parser, kind: TokenKind) ParserErrorEnum!Token {","class":"lineCov","hits":"1","order":"1299","possible_hits":"1",},
{"lineNum":"   91","line":"        if (self.accept(kind)) |token| {","class":"lineCov","hits":"1","order":"1300","possible_hits":"1",},
{"lineNum":"   92","line":"            return token;","class":"lineCov","hits":"1","order":"1301","possible_hits":"1",},
{"lineNum":"   93","line":"        } else {"},
{"lineNum":"   94","line":"            self.errors.addError(Error{ .expected2Token = .{ .span = self.peek().span, .expected = kind, .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"            return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"            // unreachable;"},
{"lineNum":"   97","line":"        }"},
{"lineNum":"   98","line":"    }"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    pub fn parse(self: *Parser) ParserErrorEnum!std.ArrayList(*AST) {","class":"lineCov","hits":"1","order":"1278","possible_hits":"1",},
{"lineNum":"  101","line":"        var decls = std.ArrayList(*AST).init(self.astAllocator);","class":"lineCov","hits":"1","order":"1279","possible_hits":"1",},
{"lineNum":"  102","line":"        while (self.accept(.NEWLINE)) |_| {}","class":"lineCov","hits":"1","order":"1280","possible_hits":"1",},
{"lineNum":"  103","line":"        while (!self.peekKind(.EOF)) {","class":"lineCov","hits":"1","order":"1289","possible_hits":"1",},
{"lineNum":"  104","line":"            try decls.append(try self.topLevelDeclaration());","class":"linePartCov","hits":"1","order":"1292","possible_hits":"2",},
{"lineNum":"  105","line":"            while (self.accept(.NEWLINE)) |_| {}","class":"lineCov","hits":"2","order":"1483","possible_hits":"2",},
{"lineNum":"  106","line":"        }"},
{"lineNum":"  107","line":"        _ = try self.expect(.EOF);","class":"lineCov","hits":"1","order":"1484","possible_hits":"1",},
{"lineNum":"  108","line":"        return decls;","class":"lineCov","hits":"1","order":"1485","possible_hits":"1",},
{"lineNum":"  109","line":"    }"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"    fn topLevelDeclaration(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1293","possible_hits":"1",},
{"lineNum":"  112","line":"        if (self.peekKind(.FN)) {","class":"lineCov","hits":"1","order":"1294","possible_hits":"1",},
{"lineNum":"  113","line":"            return try self.fnDeclaration();","class":"linePartCov","hits":"1","order":"1670","possible_hits":"2",},
{"lineNum":"  114","line":"        } else if (self.peekKind(.CONST)) {","class":"lineCov","hits":"1","order":"1295","possible_hits":"1",},
{"lineNum":"  115","line":"            return try self.constDeclaration();","class":"linePartCov","hits":"1","order":"1296","possible_hits":"2",},
{"lineNum":"  116","line":"        } else {"},
{"lineNum":"  117","line":"            self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"`fn` or `const`\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  118","line":"            return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  119","line":"        }"},
{"lineNum":"  120","line":"    }"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"    fn nonFnDeclaration(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  123","line":"        if (self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"            return try self.letDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"        } else if (self.peekKind(.CONST)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  126","line":"            return try self.constDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  127","line":"        } else {"},
{"lineNum":"  128","line":"            self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"`let` or `const`\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  129","line":"            return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  130","line":"        }"},
{"lineNum":"  131","line":"    }"},
{"lineNum":"  132","line":""},
{"lineNum":"  133","line":"    fn constDeclaration(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1297","possible_hits":"1",},
{"lineNum":"  134","line":"        var token = try self.expect(.CONST);","class":"lineCov","hits":"1","order":"1298","possible_hits":"1",},
{"lineNum":"  135","line":"        var ident = try AST.createIdentifier(try self.expect(.IDENTIFIER), self.astAllocator);","class":"lineCov","hits":"1","order":"1302","possible_hits":"1",},
{"lineNum":"  136","line":"        var _type: ?*AST = null;","class":"lineCov","hits":"1","order":"1341","possible_hits":"1",},
{"lineNum":"  137","line":""},
{"lineNum":"  138","line":"        if (self.accept(.COLON)) |_| {","class":"lineCov","hits":"1","order":"1342","possible_hits":"1",},
{"lineNum":"  139","line":"            _type = try self.arrowExpr();","class":"lineCov","hits":"1","order":"1343","possible_hits":"1",},
{"lineNum":"  140","line":"        }"},
{"lineNum":"  141","line":"        _ = try self.expect(.EQUALS);","class":"lineCov","hits":"1","order":"1426","possible_hits":"1",},
{"lineNum":"  142","line":"        var init = try self.expr();","class":"lineCov","hits":"1","order":"1427","possible_hits":"1",},
{"lineNum":"  143","line":"        if (!self.peekKind(.EOF)) {","class":"lineCov","hits":"1","order":"1478","possible_hits":"1",},
{"lineNum":"  144","line":"            _ = try self.expect(.NEWLINE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  145","line":"        }"},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"        return try AST.createDecl(","class":"linePartCov","hits":"1","order":"1479","possible_hits":"2",},
{"lineNum":"  148","line":"            token,"},
{"lineNum":"  149","line":"            ident,"},
{"lineNum":"  150","line":"            _type,"},
{"lineNum":"  151","line":"            init,"},
{"lineNum":"  152","line":"            self.astAllocator,","class":"lineCov","hits":"1","order":"1480","possible_hits":"1",},
{"lineNum":"  153","line":"        );"},
{"lineNum":"  154","line":"    }"},
{"lineNum":"  155","line":""},
{"lineNum":"  156","line":"    fn letDeclaration(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  157","line":"        var definitelyLet = try self.expect(.LET);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  158","line":"        var maybeMut = self.accept(.MUT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  159","line":"        var ident = try AST.createIdentifier(try self.expect(.IDENTIFIER), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  160","line":"        var _type: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  161","line":"        var init: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"        if (self.accept(.COLON)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  164","line":"            _type = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  165","line":"            if (self.peekKind(.EQUALS)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  166","line":"                _ = try self.expect(.EQUALS);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  167","line":"                init = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  168","line":"            }"},
{"lineNum":"  169","line":"        } else if (self.accept(.EQUALS)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  170","line":"            init = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  171","line":"        } else {"},
{"lineNum":"  172","line":"            self.errors.addError(Error{ .basic = .{ .span = self.peek().span, .msg = \"variable declarations require at least a type or an intial value\" } });","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  173","line":"        }"},
{"lineNum":"  174","line":""},
{"lineNum":"  175","line":"        return try AST.createDecl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"            if (maybeMut) |mut| mut else definitelyLet,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  177","line":"            ident,"},
{"lineNum":"  178","line":"            _type,"},
{"lineNum":"  179","line":"            init,"},
{"lineNum":"  180","line":"            self.astAllocator,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  181","line":"        );"},
{"lineNum":"  182","line":"    }"},
{"lineNum":"  183","line":""},
{"lineNum":"  184","line":"    fn fnDeclaration(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1671","possible_hits":"1",},
{"lineNum":"  185","line":"        var introducer = try self.expect(.FN);","class":"lineCov","hits":"1","order":"1672","possible_hits":"1",},
{"lineNum":"  186","line":"        var maybeIdent: ?*AST = null;","class":"lineCov","hits":"1","order":"1673","possible_hits":"1",},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        if (self.accept(.IDENTIFIER)) |token| {","class":"lineCov","hits":"1","order":"1674","possible_hits":"1",},
{"lineNum":"  189","line":"            maybeIdent = try AST.createIdentifier(token, self.astAllocator);","class":"linePartCov","hits":"1","order":"1675","possible_hits":"2",},
{"lineNum":"  190","line":"            _ = try self.expect(.COLON);","class":"linePartCov","hits":"1","order":"1676","possible_hits":"2",},
{"lineNum":"  191","line":"        }"},
{"lineNum":"  192","line":"        var params = try self.paramlist();","class":"lineCov","hits":"1","order":"1677","possible_hits":"1",},
{"lineNum":"  193","line":"        _ = try self.expect(.RIGHT_SKINNY_ARROW);","class":"lineCov","hits":"1","order":"1698","possible_hits":"1",},
{"lineNum":"  194","line":"        var retType = try self.arrowExpr();","class":"lineCov","hits":"1","order":"1699","possible_hits":"1",},
{"lineNum":"  195","line":""},
{"lineNum":"  196","line":"        var refinement: ?*AST = null;","class":"lineCov","hits":"1","order":"1700","possible_hits":"1",},
{"lineNum":"  197","line":"        if (self.accept(.WHERE)) |_| {","class":"lineCov","hits":"1","order":"1701","possible_hits":"1",},
{"lineNum":"  198","line":"            _ = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  199","line":"        }"},
{"lineNum":"  200","line":""},
{"lineNum":"  201","line":"        _ = try self.expect(.EQUALS);","class":"lineCov","hits":"1","order":"1702","possible_hits":"1",},
{"lineNum":"  202","line":"        var init = try self.expr();","class":"lineCov","hits":"1","order":"1703","possible_hits":"1",},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"        return try AST.createFnDecl(","class":"linePartCov","hits":"1","order":"1704","possible_hits":"2",},
{"lineNum":"  205","line":"            introducer,"},
{"lineNum":"  206","line":"            maybeIdent,"},
{"lineNum":"  207","line":"            params,"},
{"lineNum":"  208","line":"            retType,"},
{"lineNum":"  209","line":"            refinement,"},
{"lineNum":"  210","line":"            init,"},
{"lineNum":"  211","line":"            self.astAllocator,","class":"lineCov","hits":"1","order":"1705","possible_hits":"1",},
{"lineNum":"  212","line":"        );"},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":""},
{"lineNum":"  215","line":"    fn paramlist(self: *Parser) ParserErrorEnum!std.ArrayList(*AST) {","class":"lineCov","hits":"1","order":"1678","possible_hits":"1",},
{"lineNum":"  216","line":"        var params = std.ArrayList(*AST).init(self.astAllocator);","class":"lineCov","hits":"1","order":"1679","possible_hits":"1",},
{"lineNum":"  217","line":"        errdefer params.deinit();","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        _ = try self.expect(.L_PAREN);","class":"linePartCov","hits":"1","order":"1680","possible_hits":"2",},
{"lineNum":"  220","line":"        if (self.peekKind(.CONST) or self.peekKind(.MUT) or self.peekKind(.IDENTIFIER)) {","class":"lineCov","hits":"1","order":"1681","possible_hits":"1",},
{"lineNum":"  221","line":"            try params.append(try self.param());","class":"linePartCov","hits":"1","order":"1682","possible_hits":"4",},
{"lineNum":"  222","line":"            if (self.accept(.COMMA)) |_| {","class":"lineCov","hits":"1","order":"1695","possible_hits":"1",},
{"lineNum":"  223","line":"                try params.append(try self.param());","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"  224","line":"            }"},
{"lineNum":"  225","line":"        }"},
{"lineNum":"  226","line":"        _ = try self.expect(.R_PAREN);","class":"linePartCov","hits":"1","order":"1696","possible_hits":"2",},
{"lineNum":"  227","line":""},
{"lineNum":"  228","line":"        return params;","class":"lineCov","hits":"1","order":"1697","possible_hits":"1",},
{"lineNum":"  229","line":"    }"},
{"lineNum":"  230","line":""},
{"lineNum":"  231","line":"    fn param(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1683","possible_hits":"1",},
{"lineNum":"  232","line":"        var introducer: ?Token = self.accept(.MUT) orelse self.accept(.CONST);","class":"lineCov","hits":"1","order":"1684","possible_hits":"1",},
{"lineNum":"  233","line":"        var ident = try AST.createIdentifier(try self.expect(.IDENTIFIER), self.astAllocator);","class":"lineCov","hits":"1","order":"1685","possible_hits":"1",},
{"lineNum":"  234","line":"        _ = try self.expect(.COLON);","class":"lineCov","hits":"1","order":"1686","possible_hits":"1",},
{"lineNum":"  235","line":"        var paramType = try self.annotExpr();","class":"lineCov","hits":"1","order":"1687","possible_hits":"1",},
{"lineNum":"  236","line":"        var init: ?*AST = null;","class":"lineCov","hits":"1","order":"1688","possible_hits":"1",},
{"lineNum":"  237","line":"        if (self.accept(.BACK_SLASH)) |_| {","class":"lineCov","hits":"1","order":"1689","possible_hits":"1",},
{"lineNum":"  238","line":"            init = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  239","line":"        }"},
{"lineNum":"  240","line":""},
{"lineNum":"  241","line":"        return try AST.createDecl(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  242","line":"            if (introducer) |i| i else .{ .kind = .LET, .data = \"let\", .span = ident.getToken().span },","class":"lineCov","hits":"1","order":"1690","possible_hits":"1",},
{"lineNum":"  243","line":"            ident,"},
{"lineNum":"  244","line":"            paramType,"},
{"lineNum":"  245","line":"            init,"},
{"lineNum":"  246","line":"            self.astAllocator,","class":"lineCov","hits":"1","order":"1694","possible_hits":"1",},
{"lineNum":"  247","line":"        );"},
{"lineNum":"  248","line":"    }"},
{"lineNum":"  249","line":""},
{"lineNum":"  250","line":"    fn statement(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  251","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"            return self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  253","line":"        } else if (self.accept(.DEFER)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  254","line":"            return try AST.createDefer(token, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  255","line":"        } else if (self.accept(.ERRDEFER)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  256","line":"            return try AST.createDefer(token, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  257","line":"        } else {"},
{"lineNum":"  258","line":"            var exp = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  259","line":"            if (self.accept(.EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  260","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  261","line":"            } else if (self.accept(.PLUS_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  262","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  263","line":"            } else if (self.accept(.MINUS_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  264","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  265","line":"            } else if (self.accept(.STAR_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  266","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  267","line":"            } else if (self.accept(.SLASH_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  268","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  269","line":"            } else if (self.accept(.PERCENT_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  270","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  271","line":"            } else if (self.accept(.D_STAR_EQUALS)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  272","line":"                return try AST.createAssign(token, exp, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  273","line":"            } else {"},
{"lineNum":"  274","line":"                return exp;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  275","line":"            }"},
{"lineNum":"  276","line":"        }"},
{"lineNum":"  277","line":"    }"},
{"lineNum":"  278","line":""},
{"lineNum":"  279","line":"    fn expr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1428","possible_hits":"1",},
{"lineNum":"  280","line":"        if (self.peekKind(.FN)) {","class":"lineCov","hits":"1","order":"1429","possible_hits":"1",},
{"lineNum":"  281","line":"            return self.fnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  282","line":"        } else if (self.peekKind(.COND)) {","class":"lineCov","hits":"1","order":"1430","possible_hits":"1",},
{"lineNum":"  283","line":"            return self.condExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  284","line":"        } else if (self.peekKind(.CASE)) {","class":"lineCov","hits":"1","order":"1431","possible_hits":"1",},
{"lineNum":"  285","line":"            return self.caseExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  286","line":"        } else {"},
{"lineNum":"  287","line":"            return self.sumType();","class":"lineCov","hits":"2","order":"1432","possible_hits":"2",},
{"lineNum":"  288","line":"        }"},
{"lineNum":"  289","line":"    }"},
{"lineNum":"  290","line":""},
{"lineNum":"  291","line":"    fn sumType(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1433","possible_hits":"1",},
{"lineNum":"  292","line":"        var exp = try self.productExpr();","class":"lineCov","hits":"1","order":"1434","possible_hits":"1",},
{"lineNum":"  293","line":"        while (self.accept(.BAR)) |token| {","class":"lineCov","hits":"1","order":"1476","possible_hits":"1",},
{"lineNum":"  294","line":"            exp = try AST.createBinop(token, exp, try self.annotExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  295","line":"        }"},
{"lineNum":"  296","line":"        return exp;","class":"lineCov","hits":"1","order":"1477","possible_hits":"1",},
{"lineNum":"  297","line":"    }"},
{"lineNum":"  298","line":""},
{"lineNum":"  299","line":"    fn productExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1435","possible_hits":"1",},
{"lineNum":"  300","line":"        var exp = try self.annotExpr();","class":"lineCov","hits":"1","order":"1436","possible_hits":"1",},
{"lineNum":"  301","line":"        while (self.accept(.COMMA)) |token| {","class":"lineCov","hits":"1","order":"1474","possible_hits":"1",},
{"lineNum":"  302","line":"            exp = try AST.createBinop(token, exp, try self.annotExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  303","line":"        }"},
{"lineNum":"  304","line":"        return exp;","class":"lineCov","hits":"1","order":"1475","possible_hits":"1",},
{"lineNum":"  305","line":"    }"},
{"lineNum":"  306","line":""},
{"lineNum":"  307","line":"    fn annotExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1437","possible_hits":"1",},
{"lineNum":"  308","line":"        var exp = try self.arrowExpr();","class":"lineCov","hits":"1","order":"1438","possible_hits":"1",},
{"lineNum":"  309","line":"        if (self.accept(.COLON)) |token| {","class":"lineCov","hits":"1","order":"1472","possible_hits":"1",},
{"lineNum":"  310","line":"            var _type = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  311","line":"            var predicate: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  312","line":"            var init: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  313","line":"            if (self.accept(.WHERE)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  314","line":"                predicate = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  315","line":"            }"},
{"lineNum":"  316","line":"            if (self.accept(.BACK_SLASH)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  317","line":"                init = try self.arrowExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  318","line":"            }"},
{"lineNum":"  319","line":"            return try AST.createAnnotation(token, exp, _type, predicate, init, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  320","line":"        } else {"},
{"lineNum":"  321","line":"            return exp;","class":"lineCov","hits":"1","order":"1473","possible_hits":"1",},
{"lineNum":"  322","line":"        }"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    fn arrowExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1344","possible_hits":"1",},
{"lineNum":"  326","line":"        var exp = try self.boolExpr();","class":"lineCov","hits":"1","order":"1345","possible_hits":"1",},
{"lineNum":"  327","line":"        while (self.accept(.RIGHT_SKINNY_ARROW)) |token| {","class":"lineCov","hits":"1","order":"1424","possible_hits":"1",},
{"lineNum":"  328","line":"            exp = try AST.createBinop(token, exp, try self.boolExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  329","line":"        }"},
{"lineNum":"  330","line":"        return exp;","class":"lineCov","hits":"1","order":"1425","possible_hits":"1",},
{"lineNum":"  331","line":"    }"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    fn boolExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1346","possible_hits":"1",},
{"lineNum":"  334","line":"        var exp = try self.neqExpr();","class":"lineCov","hits":"1","order":"1347","possible_hits":"1",},
{"lineNum":"  335","line":"        while (true) {"},
{"lineNum":"  336","line":"            if (self.accept(.AND)) |token| {","class":"lineCov","hits":"1","order":"1421","possible_hits":"1",},
{"lineNum":"  337","line":"                exp = try AST.createBinop(token, exp, try self.neqExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  338","line":"            } else if (self.accept(.OR)) |token| {","class":"linePartCov","hits":"1","order":"1422","possible_hits":"2",},
{"lineNum":"  339","line":"                exp = try AST.createBinop(token, exp, try self.neqExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  340","line":"            } else {"},
{"lineNum":"  341","line":"                return exp;","class":"linePartCov","hits":"1","order":"1423","possible_hits":"2",},
{"lineNum":"  342","line":"            }"},
{"lineNum":"  343","line":"        }"},
{"lineNum":"  344","line":"    }"},
{"lineNum":"  345","line":""},
{"lineNum":"  346","line":"    fn neqExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1348","possible_hits":"1",},
{"lineNum":"  347","line":"        var exp = try self.conditionalExpr();","class":"lineCov","hits":"1","order":"1349","possible_hits":"1",},
{"lineNum":"  348","line":"        if (self.accept(.NOT_EQUALS)) |token| {","class":"lineCov","hits":"1","order":"1419","possible_hits":"1",},
{"lineNum":"  349","line":"            return try AST.createBinop(token, exp, try self.conditionalExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  350","line":"        } else {"},
{"lineNum":"  351","line":"            return exp;","class":"lineCov","hits":"1","order":"1420","possible_hits":"1",},
{"lineNum":"  352","line":"        }"},
{"lineNum":"  353","line":"    }"},
{"lineNum":"  354","line":""},
{"lineNum":"  355","line":"    fn conditionalExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1350","possible_hits":"1",},
{"lineNum":"  356","line":"        var exp = try self.deltaExpr();","class":"lineCov","hits":"1","order":"1351","possible_hits":"1",},
{"lineNum":"  357","line":"        while (true) {"},
{"lineNum":"  358","line":"            if (self.accept(.D_EQUALS)) |token| {","class":"lineCov","hits":"1","order":"1413","possible_hits":"1",},
{"lineNum":"  359","line":"                exp = try AST.createBinop(token, exp, try self.deltaExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  360","line":"            } else if (self.accept(.GTR)) |token| {","class":"linePartCov","hits":"1","order":"1414","possible_hits":"2",},
{"lineNum":"  361","line":"                exp = try AST.createBinop(token, exp, try self.deltaExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  362","line":"            } else if (self.accept(.LSR)) |token| {","class":"linePartCov","hits":"1","order":"1415","possible_hits":"2",},
{"lineNum":"  363","line":"                exp = try AST.createBinop(token, exp, try self.deltaExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  364","line":"            } else if (self.accept(.GTE)) |token| {","class":"linePartCov","hits":"1","order":"1416","possible_hits":"2",},
{"lineNum":"  365","line":"                exp = try AST.createBinop(token, exp, try self.deltaExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  366","line":"            } else if (self.accept(.LTE)) |token| {","class":"linePartCov","hits":"1","order":"1417","possible_hits":"2",},
{"lineNum":"  367","line":"                exp = try AST.createBinop(token, exp, try self.deltaExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  368","line":"            } else {"},
{"lineNum":"  369","line":"                return exp;","class":"linePartCov","hits":"1","order":"1418","possible_hits":"2",},
{"lineNum":"  370","line":"            }"},
{"lineNum":"  371","line":"        }"},
{"lineNum":"  372","line":"    }"},
{"lineNum":"  373","line":""},
{"lineNum":"  374","line":"    fn deltaExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1352","possible_hits":"1",},
{"lineNum":"  375","line":"        var exp = try self.coalesceExpr();","class":"lineCov","hits":"1","order":"1353","possible_hits":"1",},
{"lineNum":"  376","line":"        while (true) {"},
{"lineNum":"  377","line":"            if (self.accept(.DELTA)) |token| {","class":"lineCov","hits":"1","order":"1411","possible_hits":"1",},
{"lineNum":"  378","line":"                exp = try AST.createBinop(token, exp, try self.coalesceExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  379","line":"            } else {"},
{"lineNum":"  380","line":"                return exp;","class":"linePartCov","hits":"1","order":"1412","possible_hits":"2",},
{"lineNum":"  381","line":"            }"},
{"lineNum":"  382","line":"        }"},
{"lineNum":"  383","line":"    }"},
{"lineNum":"  384","line":""},
{"lineNum":"  385","line":"    fn coalesceExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1354","possible_hits":"1",},
{"lineNum":"  386","line":"        var exp = try self.intExpr();","class":"lineCov","hits":"1","order":"1355","possible_hits":"1",},
{"lineNum":"  387","line":"        while (true) {"},
{"lineNum":"  388","line":"            if (self.accept(.CATCH)) |token| {","class":"lineCov","hits":"1","order":"1408","possible_hits":"1",},
{"lineNum":"  389","line":"                exp = try AST.createBinop(token, exp, try self.intExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  390","line":"            } else if (self.accept(.ORELSE)) |token| {","class":"linePartCov","hits":"1","order":"1409","possible_hits":"2",},
{"lineNum":"  391","line":"                exp = try AST.createBinop(token, exp, try self.intExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  392","line":"            } else {"},
{"lineNum":"  393","line":"                return exp;","class":"linePartCov","hits":"1","order":"1410","possible_hits":"2",},
{"lineNum":"  394","line":"            }"},
{"lineNum":"  395","line":"        }"},
{"lineNum":"  396","line":"    }"},
{"lineNum":"  397","line":""},
{"lineNum":"  398","line":"    fn intExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1356","possible_hits":"1",},
{"lineNum":"  399","line":"        var exp = try self.termExpr();","class":"lineCov","hits":"1","order":"1357","possible_hits":"1",},
{"lineNum":"  400","line":"        while (true) {"},
{"lineNum":"  401","line":"            if (self.accept(.PLUS)) |token| {","class":"lineCov","hits":"1","order":"1404","possible_hits":"1",},
{"lineNum":"  402","line":"                exp = try AST.createBinop(token, exp, try self.termExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  403","line":"            } else if (self.accept(.MINUS)) |token| {","class":"linePartCov","hits":"1","order":"1405","possible_hits":"2",},
{"lineNum":"  404","line":"                exp = try AST.createBinop(token, exp, try self.termExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  405","line":"            } else if (self.accept(.E_MARK)) |token| {","class":"linePartCov","hits":"1","order":"1406","possible_hits":"2",},
{"lineNum":"  406","line":"                exp = try AST.createBinop(token, exp, try self.termExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  407","line":"            } else {"},
{"lineNum":"  408","line":"                return exp;","class":"linePartCov","hits":"1","order":"1407","possible_hits":"2",},
{"lineNum":"  409","line":"            }"},
{"lineNum":"  410","line":"        }"},
{"lineNum":"  411","line":"    }"},
{"lineNum":"  412","line":""},
{"lineNum":"  413","line":"    fn termExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1358","possible_hits":"1",},
{"lineNum":"  414","line":"        var exp = try self.exponentExpr();","class":"lineCov","hits":"1","order":"1359","possible_hits":"1",},
{"lineNum":"  415","line":"        while (true) {"},
{"lineNum":"  416","line":"            if (self.accept(.STAR)) |token| {","class":"lineCov","hits":"1","order":"1396","possible_hits":"1",},
{"lineNum":"  417","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  418","line":"            } else if (self.accept(.SLASH)) |token| {","class":"linePartCov","hits":"1","order":"1397","possible_hits":"2",},
{"lineNum":"  419","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  420","line":"            } else if (self.accept(.PERCENT)) |token| {","class":"linePartCov","hits":"1","order":"1398","possible_hits":"2",},
{"lineNum":"  421","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  422","line":"            } else if (self.accept(.DIAMOND)) |token| {","class":"linePartCov","hits":"1","order":"1399","possible_hits":"2",},
{"lineNum":"  423","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  424","line":"            } else if (self.accept(.D_PLUS)) |token| {","class":"linePartCov","hits":"1","order":"1400","possible_hits":"2",},
{"lineNum":"  425","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  426","line":"            } else if (self.accept(.D_MINUS)) |token| {","class":"linePartCov","hits":"1","order":"1401","possible_hits":"2",},
{"lineNum":"  427","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  428","line":"            } else if (self.accept(.D_BAR)) |token| {","class":"linePartCov","hits":"1","order":"1402","possible_hits":"2",},
{"lineNum":"  429","line":"                exp = try AST.createBinop(token, exp, try self.exponentExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  430","line":"            } else {"},
{"lineNum":"  431","line":"                return exp;","class":"linePartCov","hits":"1","order":"1403","possible_hits":"2",},
{"lineNum":"  432","line":"            }"},
{"lineNum":"  433","line":"        }"},
{"lineNum":"  434","line":"    }"},
{"lineNum":"  435","line":""},
{"lineNum":"  436","line":"    fn exponentExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1360","possible_hits":"1",},
{"lineNum":"  437","line":"        var exp = try self.prefixExpr();","class":"lineCov","hits":"1","order":"1361","possible_hits":"1",},
{"lineNum":"  438","line":"        while (self.accept(.D_STAR)) |token| {","class":"lineCov","hits":"1","order":"1394","possible_hits":"1",},
{"lineNum":"  439","line":"            exp = try AST.createBinop(token, exp, try self.prefixExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  440","line":"        }"},
{"lineNum":"  441","line":"        return exp;","class":"lineCov","hits":"1","order":"1395","possible_hits":"1",},
{"lineNum":"  442","line":"    }"},
{"lineNum":"  443","line":""},
{"lineNum":"  444","line":"    fn prefixExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1362","possible_hits":"1",},
{"lineNum":"  445","line":"        if (self.accept(.NOT)) |token| {","class":"lineCov","hits":"1","order":"1363","possible_hits":"1",},
{"lineNum":"  446","line":"            return try AST.createUnop(token, try self.prependExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  447","line":"        } else if (self.accept(.E_MARK)) |token| {","class":"linePartCov","hits":"1","order":"1364","possible_hits":"2",},
{"lineNum":"  448","line":"            return try AST.createUnop(token, try self.prependExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  449","line":"        } else if (self.accept(.MINUS)) |token| {","class":"linePartCov","hits":"1","order":"1365","possible_hits":"2",},
{"lineNum":"  450","line":"            return try AST.createUnop(token, try self.prependExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  451","line":"        } else if (self.accept(.AMPERSAND)) |token| {","class":"linePartCov","hits":"1","order":"1366","possible_hits":"2",},
{"lineNum":"  452","line":"            var mut = self.accept(.MUT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  453","line":"            return try AST.createAddrOf(token, try self.prefixExpr(), mut != null, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  454","line":"        } else if (self.accept(.L_SQUARE)) |token| {","class":"linePartCov","hits":"1","order":"1367","possible_hits":"2",},
{"lineNum":"  455","line":"            var sliceKind: ast.SliceKind = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  456","line":"            var len: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  457","line":"            if (self.accept(.MUT)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  458","line":"                sliceKind = .MUT;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  459","line":"            } else if (self.accept(.STAR)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  460","line":"                sliceKind = .MULTIPTR;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  461","line":"            } else if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  462","line":"                sliceKind = .ARRAY;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  463","line":"                len = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  464","line":"            } else {"},
{"lineNum":"  465","line":"                sliceKind = .SLICE;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  466","line":"            }"},
{"lineNum":"  467","line":"            _ = try self.expect(.R_SQUARE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  468","line":"            return try AST.createSliceOf(token, try self.prefixExpr(), len, sliceKind, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  469","line":"        } else if (self.accept(.Q_MARK)) |token| {","class":"linePartCov","hits":"1","order":"1368","possible_hits":"2",},
{"lineNum":"  470","line":"            return try AST.createUnop(token, try self.prependExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  471","line":"        } else if (self.accept(.TRY)) |token| {","class":"linePartCov","hits":"1","order":"1369","possible_hits":"2",},
{"lineNum":"  472","line":"            return try AST.createUnop(token, try self.prependExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  473","line":"        } else if (self.accept(.PERIOD)) |token| {","class":"linePartCov","hits":"1","order":"1370","possible_hits":"2",},
{"lineNum":"  474","line":"            var ident = try AST.createIdentifier(try self.expect(.IDENTIFIER), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  475","line":"            if (self.accept(.LEFT_SKINNY_ARROW)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  476","line":"                return try AST.createNamedArg(token, ident, try self.prefixExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  477","line":"            } else if (self.peekKind(.L_PAREN)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  478","line":"                return try AST.createInferredMember(token, ident, try self.parens(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  479","line":"            } else {"},
{"lineNum":"  480","line":"                return try AST.createInferredMember(token, ident, null, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  481","line":"            }"},
{"lineNum":"  482","line":"        } else {"},
{"lineNum":"  483","line":"            return try self.prependExpr();","class":"linePartCov","hits":"1","order":"1371","possible_hits":"2",},
{"lineNum":"  484","line":"        }"},
{"lineNum":"  485","line":"    }"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"    fn prependExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1372","possible_hits":"1",},
{"lineNum":"  488","line":"        var exp = try self.postfixExpr();","class":"lineCov","hits":"1","order":"1373","possible_hits":"1",},
{"lineNum":"  489","line":"        while (self.accept(.PERIOD_GTR)) |token| {","class":"lineCov","hits":"1","order":"1392","possible_hits":"1",},
{"lineNum":"  490","line":"            exp = try AST.createBinop(token, exp, try self.postfixExpr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  491","line":"        }"},
{"lineNum":"  492","line":"        return exp;","class":"lineCov","hits":"1","order":"1393","possible_hits":"1",},
{"lineNum":"  493","line":"    }"},
{"lineNum":"  494","line":""},
{"lineNum":"  495","line":"    fn postfixExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1374","possible_hits":"1",},
{"lineNum":"  496","line":"        var exp = try self.factor();","class":"lineCov","hits":"1","order":"1375","possible_hits":"1",},
{"lineNum":"  497","line":"        while (true) {"},
{"lineNum":"  498","line":"            if (self.peekKind(.L_PAREN)) {","class":"lineCov","hits":"1","order":"1386","possible_hits":"1",},
{"lineNum":"  499","line":"                exp = try AST.createCall(self.peek(), exp, try self.parens(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  500","line":"            } else if (self.accept(.L_SQUARE)) |token| {","class":"linePartCov","hits":"1","order":"1387","possible_hits":"2",},
{"lineNum":"  501","line":"                var first: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  502","line":"                if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  503","line":"                    first = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  504","line":"                }"},
{"lineNum":"  505","line":"                if (self.accept(.D_PERIOD)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  506","line":"                    var second: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  507","line":"                    if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  508","line":"                        second = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  509","line":"                    }"},
{"lineNum":"  510","line":"                    exp = try AST.createSubSlice(token, exp, first, second, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  511","line":"                } else {"},
{"lineNum":"  512","line":"                    // Simple index"},
{"lineNum":"  513","line":"                    exp = try AST.createBinop(token, exp, first orelse {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  514","line":"                        self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"a block\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  515","line":"                        return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  516","line":"                    }, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  517","line":"                }"},
{"lineNum":"  518","line":"                _ = try self.expect(.R_SQUARE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  519","line":"            } else if (self.accept(.PERIOD)) |token| {","class":"linePartCov","hits":"1","order":"1388","possible_hits":"2",},
{"lineNum":"  520","line":"                exp = try AST.createBinop(","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  521","line":"                    token,"},
{"lineNum":"  522","line":"                    exp,"},
{"lineNum":"  523","line":"                    try AST.createIdentifier(","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  524","line":"                        try self.expect(.IDENTIFIER),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  525","line":"                        self.astAllocator,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  526","line":"                    ),"},
{"lineNum":"  527","line":"                    self.astAllocator,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  528","line":"                );"},
{"lineNum":"  529","line":"            } else if (self.accept(.PERIOD_Q_MARK)) |token| {","class":"linePartCov","hits":"1","order":"1389","possible_hits":"2",},
{"lineNum":"  530","line":"                exp = try AST.createUnop(token, exp, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  531","line":"            } else if (self.accept(.CARET)) |token| {","class":"linePartCov","hits":"1","order":"1390","possible_hits":"2",},
{"lineNum":"  532","line":"                exp = try AST.createUnop(token, exp, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  533","line":"            } else {"},
{"lineNum":"  534","line":"                return exp;","class":"linePartCov","hits":"1","order":"1391","possible_hits":"2",},
{"lineNum":"  535","line":"            }"},
{"lineNum":"  536","line":"        }"},
{"lineNum":"  537","line":"    }"},
{"lineNum":"  538","line":""},
{"lineNum":"  539","line":"    fn factor(self: *Parser) ParserErrorEnum!*AST {","class":"lineCov","hits":"1","order":"1376","possible_hits":"1",},
{"lineNum":"  540","line":"        if (self.accept(.IDENTIFIER)) |token| {","class":"lineCov","hits":"1","order":"1377","possible_hits":"1",},
{"lineNum":"  541","line":"            return try AST.createIdentifier(token, self.astAllocator);","class":"linePartCov","hits":"1","order":"1378","possible_hits":"2",},
{"lineNum":"  542","line":"        } else if (self.accept(.DECIMAL_INTEGER)) |token| {","class":"lineCov","hits":"2","order":"1439","possible_hits":"2",},
{"lineNum":"  543","line":"            return try AST.createInt(token, try std.fmt.parseInt(i128, token.data, 10), self.astAllocator);","class":"linePartCov","hits":"1","order":"1440","possible_hits":"2",},
{"lineNum":"  544","line":"        } else if (self.accept(.HEX_INTEGER)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  545","line":"            return try AST.createInt(token, try std.fmt.parseInt(i128, token.data, 16), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  546","line":"        } else if (self.accept(.OCT_INTEGER)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  547","line":"            return try AST.createInt(token, try std.fmt.parseInt(i128, token.data, 8), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  548","line":"        } else if (self.accept(.BIN_INTEGER)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  549","line":"            return try AST.createInt(token, try std.fmt.parseInt(i128, token.data, 2), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  550","line":"        } else if (self.accept(.REAL)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  551","line":"            return try AST.createFloat(token, try std.fmt.parseFloat(f64, token.data), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  552","line":"        } else if (self.accept(.CHAR)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  553","line":"            return try AST.createInt(token, token.data[1], self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  554","line":"        } else if (self.accept(.STRING)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  555","line":"            return try AST.createString(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  556","line":"        } else if (self.peekKind(.INDENT)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  557","line":"            return try self.indentBlockExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  558","line":"        } else if (self.peekKind(.L_BRACE)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  559","line":"            return try self.braceBlockExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  560","line":"        } else if (self.peekKind(.IF)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  561","line":"            return try self.ifExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  562","line":"        } else if (self.peekKind(.WHILE)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  563","line":"            return try self.whileExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  564","line":"        } else if (self.peekKind(.FOR)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  565","line":"            return try self.forExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  566","line":"        } else if (self.accept(.UNREACHABLE)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  567","line":"            return try AST.createUnreachable(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  568","line":"        } else if (self.peekKind(.L_PAREN)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  569","line":"            return try self.parens();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  570","line":"        } else {"},
{"lineNum":"  571","line":"            self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"an expression\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  572","line":"            return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  573","line":"        }"},
{"lineNum":"  574","line":"    }"},
{"lineNum":"  575","line":""},
{"lineNum":"  576","line":"    fn indentBlockExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  577","line":"        var indent = try self.expect(.INDENT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  578","line":""},
{"lineNum":"  579","line":"        while (self.accept(.NEWLINE)) |_| {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  580","line":""},
{"lineNum":"  581","line":"        var statements = std.ArrayList(*AST).init(self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  582","line":""},
{"lineNum":"  583","line":"        if (self.nextIsStatement()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  584","line":"            try statements.append(try self.statement());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  585","line":"            while (self.accept(.NEWLINE)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  586","line":"                while (self.accept(.NEWLINE)) |_| {}","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  587","line":"                try statements.append(try self.statement());","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  588","line":"            }"},
{"lineNum":"  589","line":"        }"},
{"lineNum":"  590","line":""},
{"lineNum":"  591","line":"        var final: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  592","line":"        if (self.accept(.BREAK)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  593","line":"            final = try AST.createBreak(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  594","line":"        } else if (self.accept(.CONTINUE)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  595","line":"            final = try AST.createContinue(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  596","line":"        } else if (self.accept(.RETURN)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  597","line":"            var exp: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  598","line":"            if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  599","line":"                exp = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  600","line":"            }"},
{"lineNum":"  601","line":"            final = try AST.createReturn(token, exp, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  602","line":"        } else if (self.accept(.THROW)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  603","line":"            final = try AST.createThrow(token, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  604","line":"        }"},
{"lineNum":"  605","line":""},
{"lineNum":"  606","line":"        // TODO: Better error messages, if missing newline, hits this expect, which doesn\'t give much info"},
{"lineNum":"  607","line":"        _ = try self.expect(.DEDENT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  608","line":""},
{"lineNum":"  609","line":"        return try AST.createBlock(indent, statements, final, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  610","line":"    }"},
{"lineNum":"  611","line":""},
{"lineNum":"  612","line":"    fn braceBlockExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  613","line":"        var indent = try self.expect(.L_BRACE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"        var statements = std.ArrayList(*AST).init(self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  616","line":""},
{"lineNum":"  617","line":"        if (self.nextIsStatement()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  618","line":"            try statements.append(try self.statement());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  619","line":"            while (self.accept(.SEMICOLON)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  620","line":"                try statements.append(try self.statement());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  621","line":"            }"},
{"lineNum":"  622","line":"        }"},
{"lineNum":"  623","line":""},
{"lineNum":"  624","line":"        var final: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  625","line":"        if (self.accept(.BREAK)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  626","line":"            final = try AST.createBreak(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  627","line":"        } else if (self.accept(.CONTINUE)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  628","line":"            final = try AST.createContinue(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  629","line":"        } else if (self.accept(.RETURN)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  630","line":"            var exp: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  631","line":"            if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  632","line":"                exp = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  633","line":"            }"},
{"lineNum":"  634","line":"            final = try AST.createReturn(token, exp, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  635","line":"        } else if (self.accept(.THROW)) |token| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  636","line":"            final = try AST.createThrow(token, try self.expr(), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  637","line":"        }"},
{"lineNum":"  638","line":""},
{"lineNum":"  639","line":"        _ = try self.expect(.R_BRACE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  640","line":""},
{"lineNum":"  641","line":"        return try AST.createBlock(indent, statements, final, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  642","line":"    }"},
{"lineNum":"  643","line":""},
{"lineNum":"  644","line":"    fn blockExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  645","line":"        if (self.peekKind(.INDENT)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  646","line":"            return try self.indentBlockExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  647","line":"        } else if (self.peekKind(.L_BRACE)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  648","line":"            return try self.braceBlockExpr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  649","line":"        } else {"},
{"lineNum":"  650","line":"            self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"a block\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  651","line":"            return ParserErrorEnum.parserError;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  652","line":"        }"},
{"lineNum":"  653","line":"    }"},
{"lineNum":"  654","line":""},
{"lineNum":"  655","line":"    fn ifExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  656","line":"        var token = try self.expect(.IF);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  657","line":"        var let: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  658","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  659","line":"            let = try self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  660","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  661","line":"        }"},
{"lineNum":"  662","line":"        var cond = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  663","line":"        var bodyBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  664","line":"        var elseBlock: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  665","line":"        if (self.accept(.ELSE)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  666","line":"            elseBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  667","line":"        }"},
{"lineNum":"  668","line":""},
{"lineNum":"  669","line":"        return try AST.createIf(token, let, cond, bodyBlock, elseBlock, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  670","line":"    }"},
{"lineNum":"  671","line":""},
{"lineNum":"  672","line":"    fn whileExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  673","line":"        var token = try self.expect(.WHILE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  674","line":"        var let: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  675","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  676","line":"            let = try self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  677","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  678","line":"        }"},
{"lineNum":"  679","line":"        var cond = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  680","line":"        var post: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  681","line":"        if (self.accept(.SEMICOLON)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  682","line":"            post = try self.statement();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  683","line":"        }"},
{"lineNum":"  684","line":"        std.debug.print(\"{s}\\n\", .{self.peek().data});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  685","line":"        var bodyBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  686","line":"        var elseBlock: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  687","line":"        if (self.accept(.ELSE)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  688","line":"            elseBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  689","line":"        }"},
{"lineNum":"  690","line":""},
{"lineNum":"  691","line":"        return try AST.createWhile(token, let, cond, post, bodyBlock, elseBlock, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  692","line":"    }"},
{"lineNum":"  693","line":""},
{"lineNum":"  694","line":"    fn forExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  695","line":"        var token = try self.expect(.FOR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  696","line":"        var let: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  697","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  698","line":"            let = try self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  699","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  700","line":"        }"},
{"lineNum":"  701","line":"        _ = self.accept(.MUT);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  702","line":"        var elem = try AST.createIdentifier(try self.expect(.IDENTIFIER), self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  703","line":"        _ = try self.expect(.IN);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  704","line":"        var iterable = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  705","line":"        var bodyBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  706","line":"        var elseBlock: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  707","line":"        if (self.accept(.ELSE)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  708","line":"            elseBlock = try self.blockExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  709","line":"        }"},
{"lineNum":"  710","line":""},
{"lineNum":"  711","line":"        return try AST.createFor(token, let, elem, iterable, bodyBlock, elseBlock, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  712","line":"    }"},
{"lineNum":"  713","line":""},
{"lineNum":"  714","line":"    fn barClause(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  715","line":"        var lhs = try self.productExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  716","line":"        var rhs: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  717","line":""},
{"lineNum":"  718","line":"        if (self.accept(.RIGHT_FAT_ARROW)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  719","line":"            rhs = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  720","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  721","line":"        }"},
{"lineNum":"  722","line":""},
{"lineNum":"  723","line":"        return try AST.createMapping(lhs.getToken(), lhs, rhs, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  724","line":"    }"},
{"lineNum":"  725","line":""},
{"lineNum":"  726","line":"    fn barElse(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  727","line":"        var token = try self.expect(.ELSE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  728","line":"        _ = try self.expect(.RIGHT_FAT_ARROW);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  729","line":"        var rhs = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  730","line":""},
{"lineNum":"  731","line":"        _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  732","line":""},
{"lineNum":"  733","line":"        return try AST.createMapping(token, null, rhs, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  734","line":"    }"},
{"lineNum":"  735","line":""},
{"lineNum":"  736","line":"    fn barListMiddle(self: *Parser, mappings: *std.ArrayList(*AST)) ParserErrorEnum!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  737","line":"        try mappings.append(try self.barClause());","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  738","line":"        if (self.accept(.BAR)) |_| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  739","line":"            if (self.peekKind(.ELSE)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  740","line":"                try mappings.append(try self.barElse());","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  741","line":"            } else if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  742","line":"                try self.barListMiddle(mappings);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  743","line":"            } else {"},
{"lineNum":"  744","line":"                self.errors.addError(Error{ .expectedBasicToken = .{ .span = self.peek().span, .expected = \"an expression after `=>`\", .got = self.peek().kind } });","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  745","line":"            }"},
{"lineNum":"  746","line":"        }"},
{"lineNum":"  747","line":"    }"},
{"lineNum":"  748","line":""},
{"lineNum":"  749","line":"    fn barList(self: *Parser, mappings: *std.ArrayList(*AST)) ParserErrorEnum!void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  750","line":"        _ = try self.expect(.BAR);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  751","line":"        try self.barListMiddle(mappings);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  752","line":"    }"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"    fn condExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  755","line":"        var token = try self.expect(.COND);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  756","line":"        var mappings = std.ArrayList(*AST).init(self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  757","line":"        try self.barList(&mappings);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  758","line":"        var let: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  759","line":""},
{"lineNum":"  760","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  761","line":"            let = try self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  762","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  763","line":"        }"},
{"lineNum":"  764","line":""},
{"lineNum":"  765","line":"        return try AST.createCond(token, let, mappings, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  766","line":"    }"},
{"lineNum":"  767","line":""},
{"lineNum":"  768","line":"    fn caseExpr(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  769","line":"        var token = try self.expect(.CASE);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  770","line":"        var mappings = std.ArrayList(*AST).init(self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  771","line":"        var let: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  772","line":""},
{"lineNum":"  773","line":"        if (self.peekKind(.CONST) or self.peekKind(.LET)) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"            let = try self.nonFnDeclaration();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  775","line":"            _ = try self.expect(.SEMICOLON);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  776","line":"        }"},
{"lineNum":"  777","line":"        var exp = try self.productExpr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  778","line":"        try self.barList(&mappings);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"        return try AST.createCase(token, let, exp, mappings, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  781","line":"    }"},
{"lineNum":"  782","line":""},
{"lineNum":"  783","line":"    fn parens(self: *Parser) ParserErrorEnum!*AST {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  784","line":"        var token = try self.expect(.L_PAREN);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  785","line":"        var exp: ?*AST = null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  786","line":"        if (self.nextIsExpr()) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  787","line":"            exp = try self.expr();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  788","line":"        }"},
{"lineNum":"  789","line":"        _ = try self.expect(.R_PAREN);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"        return exp orelse try AST.createUnit(token, self.astAllocator);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  792","line":"    }"},
{"lineNum":"  793","line":"};"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"//////////////////////"},
{"lineNum":"  796","line":"// TESTS BEGIN HERE //"},
{"lineNum":"  797","line":"//////////////////////"},
{"lineNum":"  798","line":""},
{"lineNum":"  799","line":"test \"parse-const\" {","class":"lineCov","hits":"1","order":"696","possible_hits":"1",},
{"lineNum":"  800","line":"    const layout = @import(\"layout.zig\");"},
{"lineNum":"  801","line":"    const lexer = @import(\"lexer.zig\");"},
{"lineNum":"  802","line":""},
{"lineNum":"  803","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"697","possible_hits":"1",},
{"lineNum":"  804","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1606","possible_hits":"6",},
{"lineNum":"  805","line":"    // contents |> lexer |> layout |> parser"},
{"lineNum":"  806","line":"    const contents = \"//comment\\n//comment\\nconst x: Int = 4\";","class":"lineCov","hits":"1","order":"700","possible_hits":"1",},
{"lineNum":"  807","line":"    var tokens = try lexer.getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"701","possible_hits":"2",},
{"lineNum":"  808","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1605","possible_hits":"5",},
{"lineNum":"  809","line":"    try layout.doLayout(&tokens);","class":"linePartCov","hits":"1","order":"1221","possible_hits":"2",},
{"lineNum":"  810","line":"    var astAllocator = std.heap.ArenaAllocator.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1267","possible_hits":"1",},
{"lineNum":"  811","line":"    defer astAllocator.deinit();","class":"linePartCov","hits":"1","order":"1596","possible_hits":"4",},
{"lineNum":"  812","line":"    var parser = try Parser.create(&tokens, &errors, astAllocator.allocator());","class":"lineCov","hits":"1","order":"1272","possible_hits":"1",},
{"lineNum":"  813","line":""},
{"lineNum":"  814","line":"    var program_ast = try parser.parse();","class":"linePartCov","hits":"1","order":"1277","possible_hits":"2",},
{"lineNum":"  815","line":"    var out_string = String.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1486","possible_hits":"1",},
{"lineNum":"  816","line":"    defer out_string.deinit();","class":"linePartCov","hits":"1","order":"1591","possible_hits":"3",},
{"lineNum":"  817","line":"    try program_ast.items[0].serialize(&out_string);","class":"linePartCov","hits":"1","order":"1489","possible_hits":"2",},
{"lineNum":"  818","line":""},
{"lineNum":"  819","line":"    try std.testing.expectEqualStrings( //","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  820","line":"        \"AST.decl{token: Token{data: \'const\'}, \" //"},
{"lineNum":"  821","line":"    ++ \"pattern: AST.identifier{token: Token{data: \'x\'}}, \" //"},
{"lineNum":"  822","line":"    ++ \"type: AST.identifier{token: Token{data: \'Int\'}}, \" //"},
{"lineNum":"  823","line":"    ++ \"init: AST.int{token: Token{data: \'4\'}, data: 4}}\", out_string.str());","class":"lineCov","hits":"1","order":"1576","possible_hits":"1",},
{"lineNum":"  824","line":"}"},
{"lineNum":"  825","line":""},
{"lineNum":"  826","line":"test \"parse-fn\" {","class":"lineCov","hits":"1","order":"1660","possible_hits":"1",},
{"lineNum":"  827","line":"    const layout = @import(\"layout.zig\");"},
{"lineNum":"  828","line":"    const lexer = @import(\"lexer.zig\");"},
{"lineNum":"  829","line":""},
{"lineNum":"  830","line":"    var errors = errs.Errors.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1661","possible_hits":"1",},
{"lineNum":"  831","line":"    defer errors.deinit();","class":"linePartCov","hits":"1","order":"1736","possible_hits":"6",},
{"lineNum":"  832","line":"    // contents |> lexer |> layout |> parser"},
{"lineNum":"  833","line":"    const contents = \"fn f: (x: Int)->Int = 4\";","class":"lineCov","hits":"1","order":"1662","possible_hits":"1",},
{"lineNum":"  834","line":"    var tokens = try lexer.getTokens(contents, &errors, std.testing.allocator);","class":"linePartCov","hits":"1","order":"1663","possible_hits":"2",},
{"lineNum":"  835","line":"    defer tokens.deinit();","class":"linePartCov","hits":"1","order":"1735","possible_hits":"5",},
{"lineNum":"  836","line":"    try layout.doLayout(&tokens);","class":"linePartCov","hits":"1","order":"1666","possible_hits":"2",},
{"lineNum":"  837","line":"    var astAllocator = std.heap.ArenaAllocator.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1667","possible_hits":"1",},
{"lineNum":"  838","line":"    defer astAllocator.deinit();","class":"linePartCov","hits":"1","order":"1734","possible_hits":"4",},
{"lineNum":"  839","line":"    var parser = try Parser.create(&tokens, &errors, astAllocator.allocator());","class":"lineCov","hits":"1","order":"1668","possible_hits":"1",},
{"lineNum":"  840","line":""},
{"lineNum":"  841","line":"    var program_ast = try parser.parse();","class":"linePartCov","hits":"1","order":"1669","possible_hits":"2",},
{"lineNum":"  842","line":"    var out_string = String.init(std.testing.allocator);","class":"lineCov","hits":"1","order":"1708","possible_hits":"1",},
{"lineNum":"  843","line":"    defer out_string.deinit();","class":"linePartCov","hits":"1","order":"1733","possible_hits":"3",},
{"lineNum":"  844","line":"    try program_ast.items[0].serialize(&out_string);","class":"linePartCov","hits":"1","order":"1709","possible_hits":"2",},
{"lineNum":"  845","line":""},
{"lineNum":"  846","line":"    try std.testing.expectEqualStrings( //","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  847","line":"        \"AST.fnDecl{\" //"},
{"lineNum":"  848","line":"    ++ \"token: Token{data: \'fn\'}, \" //"},
{"lineNum":"  849","line":"    ++ \"name: AST.identifier{token: Token{data: \'f\'}}, \" //"},
{"lineNum":"  850","line":"    ++ \"params: [AST.decl{token: Token{data: \'let\'}, pattern: AST.identifier{token: Token{data: \'x\'}}, type: AST.identifier{token: Token{data: \'Int\'}}, init: null}], \" //"},
{"lineNum":"  851","line":"    ++ \"retType: AST.identifier{token: Token{data: \'Int\'}}, \" //"},
{"lineNum":"  852","line":"    ++ \"refinement: null, \" //"},
{"lineNum":"  853","line":"    ++ \"init: AST.int{token: Token{data: \'4\'}, data: 4}}\", out_string.str());","class":"lineCov","hits":"1","order":"1732","possible_hits":"1",},
{"lineNum":"  854","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 515, "covered" : 195,};
var merged_data = [];
