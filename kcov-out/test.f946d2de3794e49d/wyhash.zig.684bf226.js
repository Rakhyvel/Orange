var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const mem = std.mem;"},
{"lineNum":"    3","line":""},
{"lineNum":"    4","line":"const primes = [_]u64{"},
{"lineNum":"    5","line":"    0xa0761d6478bd642f,"},
{"lineNum":"    6","line":"    0xe7037ed1a0b428db,"},
{"lineNum":"    7","line":"    0x8ebc6af09c88c6e3,"},
{"lineNum":"    8","line":"    0x589965cc75374cc3,"},
{"lineNum":"    9","line":"    0x1d8e4e27c47d124f,"},
{"lineNum":"   10","line":"};"},
{"lineNum":"   11","line":""},
{"lineNum":"   12","line":"fn read_bytes(comptime bytes: u8, data: []const u8) u64 {","class":"linePartCov","hits":"1","order":"993","possible_hits":"4",},
{"lineNum":"   13","line":"    const T = std.meta.Int(.unsigned, 8 * bytes);"},
{"lineNum":"   14","line":"    return mem.readIntLittle(T, data[0..bytes]);","class":"linePartCov","hits":"1","order":"994","possible_hits":"4",},
{"lineNum":"   15","line":"}"},
{"lineNum":"   16","line":""},
{"lineNum":"   17","line":"fn read_8bytes_swapped(data: []const u8) u64 {","class":"lineCov","hits":"1","order":"991","possible_hits":"1",},
{"lineNum":"   18","line":"    return (read_bytes(4, data) << 32 | read_bytes(4, data[4..]));","class":"lineCov","hits":"1","order":"992","possible_hits":"1",},
{"lineNum":"   19","line":"}"},
{"lineNum":"   20","line":""},
{"lineNum":"   21","line":"fn mum(a: u64, b: u64) u64 {","class":"lineCov","hits":"1","order":"999","possible_hits":"1",},
{"lineNum":"   22","line":"    var r = std.math.mulWide(u64, a, b);","class":"lineCov","hits":"1","order":"1000","possible_hits":"1",},
{"lineNum":"   23","line":"    r = (r >> 64) ^ r;","class":"lineCov","hits":"1","order":"1003","possible_hits":"1",},
{"lineNum":"   24","line":"    return @truncate(u64, r);","class":"lineCov","hits":"1","order":"1004","possible_hits":"1",},
{"lineNum":"   25","line":"}"},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"fn mix0(a: u64, b: u64, seed: u64) u64 {","class":"lineCov","hits":"1","order":"997","possible_hits":"1",},
{"lineNum":"   28","line":"    return mum(a ^ seed ^ primes[0], b ^ seed ^ primes[1]);","class":"lineCov","hits":"1","order":"998","possible_hits":"1",},
{"lineNum":"   29","line":"}"},
{"lineNum":"   30","line":""},
{"lineNum":"   31","line":"fn mix1(a: u64, b: u64, seed: u64) u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   32","line":"    return mum(a ^ seed ^ primes[2], b ^ seed ^ primes[3]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   33","line":"}"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"// Wyhash version which does not store internal state for handling partial buffers."},
{"lineNum":"   36","line":"// This is needed so that we can maximize the speed for the short key case, which will"},
{"lineNum":"   37","line":"// use the non-iterative api which the public Wyhash exposes."},
{"lineNum":"   38","line":"const WyhashStateless = struct {"},
{"lineNum":"   39","line":"    seed: u64,"},
{"lineNum":"   40","line":"    msg_len: usize,"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"    pub fn init(seed: u64) WyhashStateless {","class":"lineCov","hits":"1","order":"977","possible_hits":"1",},
{"lineNum":"   43","line":"        return WyhashStateless{","class":"lineCov","hits":"1","order":"978","possible_hits":"1",},
{"lineNum":"   44","line":"            .seed = seed,"},
{"lineNum":"   45","line":"            .msg_len = 0,"},
{"lineNum":"   46","line":"        };"},
{"lineNum":"   47","line":"    }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"    fn round(self: *WyhashStateless, b: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   50","line":"        std.debug.assert(b.len == 32);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   51","line":""},
{"lineNum":"   52","line":"        self.seed = mix0(","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   53","line":"            read_bytes(8, b[0..]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   54","line":"            read_bytes(8, b[8..]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   55","line":"            self.seed,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   56","line":"        ) ^ mix1("},
{"lineNum":"   57","line":"            read_bytes(8, b[16..]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   58","line":"            read_bytes(8, b[24..]),","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   59","line":"            self.seed,","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   60","line":"        );"},
{"lineNum":"   61","line":"    }"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"    pub fn update(self: *WyhashStateless, b: []const u8) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"        std.debug.assert(b.len % 32 == 0);","class":"linePartCov","hits":"1","order":"980","possible_hits":"2",},
{"lineNum":"   65","line":""},
{"lineNum":"   66","line":"        var off: usize = 0;","class":"linePartCov","hits":"1","order":"981","possible_hits":"2",},
{"lineNum":"   67","line":"        while (off < b.len) : (off += 32) {","class":"linePartCov","hits":"2","order":"982","possible_hits":"6",},
{"lineNum":"   68","line":"            @call(.always_inline, self.round, .{b[off .. off + 32]});","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   69","line":"        }"},
{"lineNum":"   70","line":""},
{"lineNum":"   71","line":"        self.msg_len += b.len;","class":"linePartCov","hits":"1","order":"983","possible_hits":"2",},
{"lineNum":"   72","line":"    }"},
{"lineNum":"   73","line":""},
{"lineNum":"   74","line":"    pub fn final(self: *WyhashStateless, b: []const u8) u64 {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   75","line":"        std.debug.assert(b.len < 32);","class":"linePartCov","hits":"1","order":"985","possible_hits":"2",},
{"lineNum":"   76","line":""},
{"lineNum":"   77","line":"        const seed = self.seed;","class":"linePartCov","hits":"1","order":"986","possible_hits":"2",},
{"lineNum":"   78","line":"        const rem_len = @intCast(u5, b.len);","class":"linePartCov","hits":"1","order":"987","possible_hits":"2",},
{"lineNum":"   79","line":"        const rem_key = b[0..rem_len];","class":"linePartCov","hits":"1","order":"988","possible_hits":"2",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"        self.seed = switch (rem_len) {","class":"linePartCov","hits":"1","order":"989","possible_hits":"2",},
{"lineNum":"   82","line":"            0 => seed,"},
{"lineNum":"   83","line":"            1 => mix0(read_bytes(1, rem_key), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   84","line":"            2 => mix0(read_bytes(2, rem_key), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   85","line":"            3 => mix0((read_bytes(2, rem_key) << 8) | read_bytes(1, rem_key[2..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   86","line":"            4 => mix0(read_bytes(4, rem_key), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   87","line":"            5 => mix0((read_bytes(4, rem_key) << 8) | read_bytes(1, rem_key[4..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   88","line":"            6 => mix0((read_bytes(4, rem_key) << 16) | read_bytes(2, rem_key[4..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   89","line":"            7 => mix0((read_bytes(4, rem_key) << 24) | (read_bytes(2, rem_key[4..]) << 8) | read_bytes(1, rem_key[6..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   90","line":"            8 => mix0(read_8bytes_swapped(rem_key), primes[4], seed),","class":"linePartCov","hits":"1","order":"990","possible_hits":"2",},
{"lineNum":"   91","line":"            9 => mix0(read_8bytes_swapped(rem_key), read_bytes(1, rem_key[8..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   92","line":"            10 => mix0(read_8bytes_swapped(rem_key), read_bytes(2, rem_key[8..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   93","line":"            11 => mix0(read_8bytes_swapped(rem_key), (read_bytes(2, rem_key[8..]) << 8) | read_bytes(1, rem_key[10..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   94","line":"            12 => mix0(read_8bytes_swapped(rem_key), read_bytes(4, rem_key[8..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   95","line":"            13 => mix0(read_8bytes_swapped(rem_key), (read_bytes(4, rem_key[8..]) << 8) | read_bytes(1, rem_key[12..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   96","line":"            14 => mix0(read_8bytes_swapped(rem_key), (read_bytes(4, rem_key[8..]) << 16) | read_bytes(2, rem_key[12..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   97","line":"            15 => mix0(read_8bytes_swapped(rem_key), (read_bytes(4, rem_key[8..]) << 24) | (read_bytes(2, rem_key[12..]) << 8) | read_bytes(1, rem_key[14..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   98","line":"            16 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   99","line":"            17 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_bytes(1, rem_key[16..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  100","line":"            18 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_bytes(2, rem_key[16..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  101","line":"            19 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1((read_bytes(2, rem_key[16..]) << 8) | read_bytes(1, rem_key[18..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  102","line":"            20 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_bytes(4, rem_key[16..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  103","line":"            21 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1((read_bytes(4, rem_key[16..]) << 8) | read_bytes(1, rem_key[20..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  104","line":"            22 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1((read_bytes(4, rem_key[16..]) << 16) | read_bytes(2, rem_key[20..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  105","line":"            23 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1((read_bytes(4, rem_key[16..]) << 24) | (read_bytes(2, rem_key[20..]) << 8) | read_bytes(1, rem_key[22..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  106","line":"            24 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), primes[4], seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"            25 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), read_bytes(1, rem_key[24..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  108","line":"            26 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), read_bytes(2, rem_key[24..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  109","line":"            27 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), (read_bytes(2, rem_key[24..]) << 8) | read_bytes(1, rem_key[26..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  110","line":"            28 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), read_bytes(4, rem_key[24..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  111","line":"            29 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), (read_bytes(4, rem_key[24..]) << 8) | read_bytes(1, rem_key[28..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  112","line":"            30 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), (read_bytes(4, rem_key[24..]) << 16) | read_bytes(2, rem_key[28..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"            31 => mix0(read_8bytes_swapped(rem_key), read_8bytes_swapped(rem_key[8..]), seed) ^ mix1(read_8bytes_swapped(rem_key[16..]), (read_bytes(4, rem_key[24..]) << 24) | (read_bytes(2, rem_key[28..]) << 8) | read_bytes(1, rem_key[30..]), seed),","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  114","line":"        };"},
{"lineNum":"  115","line":""},
{"lineNum":"  116","line":"        self.msg_len += b.len;","class":"linePartCov","hits":"1","order":"1005","possible_hits":"2",},
{"lineNum":"  117","line":"        return mum(self.seed ^ self.msg_len, primes[4]);","class":"linePartCov","hits":"1","order":"1006","possible_hits":"2",},
{"lineNum":"  118","line":"    }"},
{"lineNum":"  119","line":""},
{"lineNum":"  120","line":"    pub fn hash(seed: u64, input: []const u8) u64 {","class":"lineCov","hits":"1","order":"974","possible_hits":"1",},
{"lineNum":"  121","line":"        const aligned_len = input.len - (input.len % 32);","class":"lineCov","hits":"1","order":"975","possible_hits":"1",},
{"lineNum":"  122","line":""},
{"lineNum":"  123","line":"        var c = WyhashStateless.init(seed);","class":"lineCov","hits":"1","order":"976","possible_hits":"1",},
{"lineNum":"  124","line":"        @call(.always_inline, c.update, .{input[0..aligned_len]});","class":"lineCov","hits":"1","order":"979","possible_hits":"1",},
{"lineNum":"  125","line":"        return @call(.always_inline, c.final, .{input[aligned_len..]});","class":"lineCov","hits":"2","order":"984","possible_hits":"2",},
{"lineNum":"  126","line":"    }"},
{"lineNum":"  127","line":"};"},
{"lineNum":"  128","line":""},
{"lineNum":"  129","line":"/// Fast non-cryptographic 64bit hash function."},
{"lineNum":"  130","line":"/// See https://github.com/wangyi-fudan/wyhash"},
{"lineNum":"  131","line":"pub const Wyhash = struct {"},
{"lineNum":"  132","line":"    state: WyhashStateless,"},
{"lineNum":"  133","line":""},
{"lineNum":"  134","line":"    buf: [32]u8,"},
{"lineNum":"  135","line":"    buf_len: usize,"},
{"lineNum":"  136","line":""},
{"lineNum":"  137","line":"    pub fn init(seed: u64) Wyhash {"},
{"lineNum":"  138","line":"        return Wyhash{"},
{"lineNum":"  139","line":"            .state = WyhashStateless.init(seed),"},
{"lineNum":"  140","line":"            .buf = undefined,"},
{"lineNum":"  141","line":"            .buf_len = 0,"},
{"lineNum":"  142","line":"        };"},
{"lineNum":"  143","line":"    }"},
{"lineNum":"  144","line":""},
{"lineNum":"  145","line":"    pub fn update(self: *Wyhash, b: []const u8) void {"},
{"lineNum":"  146","line":"        var off: usize = 0;"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"        if (self.buf_len != 0 and self.buf_len + b.len >= 32) {"},
{"lineNum":"  149","line":"            off += 32 - self.buf_len;"},
{"lineNum":"  150","line":"            mem.copy(u8, self.buf[self.buf_len..], b[0..off]);"},
{"lineNum":"  151","line":"            self.state.update(self.buf[0..]);"},
{"lineNum":"  152","line":"            self.buf_len = 0;"},
{"lineNum":"  153","line":"        }"},
{"lineNum":"  154","line":""},
{"lineNum":"  155","line":"        const remain_len = b.len - off;"},
{"lineNum":"  156","line":"        const aligned_len = remain_len - (remain_len % 32);"},
{"lineNum":"  157","line":"        self.state.update(b[off .. off + aligned_len]);"},
{"lineNum":"  158","line":""},
{"lineNum":"  159","line":"        mem.copy(u8, self.buf[self.buf_len..], b[off + aligned_len ..]);"},
{"lineNum":"  160","line":"        self.buf_len += @intCast(u8, b[off + aligned_len ..].len);"},
{"lineNum":"  161","line":"    }"},
{"lineNum":"  162","line":""},
{"lineNum":"  163","line":"    pub fn final(self: *Wyhash) u64 {"},
{"lineNum":"  164","line":"        const rem_key = self.buf[0..self.buf_len];"},
{"lineNum":"  165","line":""},
{"lineNum":"  166","line":"        return self.state.final(rem_key);"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    pub fn hash(seed: u64, input: []const u8) u64 {","class":"lineCov","hits":"1","order":"972","possible_hits":"1",},
{"lineNum":"  170","line":"        return WyhashStateless.hash(seed, input);","class":"lineCov","hits":"1","order":"973","possible_hits":"1",},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":"};"},
{"lineNum":"  173","line":""},
{"lineNum":"  174","line":"const expectEqual = std.testing.expectEqual;"},
{"lineNum":"  175","line":""},
{"lineNum":"  176","line":"test \"test vectors\" {"},
{"lineNum":"  177","line":"    const hash = Wyhash.hash;"},
{"lineNum":"  178","line":""},
{"lineNum":"  179","line":"    try expectEqual(hash(0, \"\"), 0x0);"},
{"lineNum":"  180","line":"    try expectEqual(hash(1, \"a\"), 0xbed235177f41d328);"},
{"lineNum":"  181","line":"    try expectEqual(hash(2, \"abc\"), 0xbe348debe59b27c3);"},
{"lineNum":"  182","line":"    try expectEqual(hash(3, \"message digest\"), 0x37320f657213a290);"},
{"lineNum":"  183","line":"    try expectEqual(hash(4, \"abcdefghijklmnopqrstuvwxyz\"), 0xd0b270e1d8a7019c);"},
{"lineNum":"  184","line":"    try expectEqual(hash(5, \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"), 0x602a1894d3bbfe7f);"},
{"lineNum":"  185","line":"    try expectEqual(hash(6, \"12345678901234567890123456789012345678901234567890123456789012345678901234567890\"), 0x829e9c148b75970e);"},
{"lineNum":"  186","line":"}"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"test \"test vectors streaming\" {"},
{"lineNum":"  189","line":"    var wh = Wyhash.init(5);"},
{"lineNum":"  190","line":"    for (\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\") |e| {"},
{"lineNum":"  191","line":"        wh.update(mem.asBytes(&e));"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":"    try expectEqual(wh.final(), 0x602a1894d3bbfe7f);"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"    const pattern = \"1234567890\";"},
{"lineNum":"  196","line":"    const count = 8;"},
{"lineNum":"  197","line":"    const result = 0x829e9c148b75970e;"},
{"lineNum":"  198","line":"    try expectEqual(Wyhash.hash(6, pattern ** 8), result);"},
{"lineNum":"  199","line":""},
{"lineNum":"  200","line":"    wh = Wyhash.init(6);"},
{"lineNum":"  201","line":"    var i: u32 = 0;"},
{"lineNum":"  202","line":"    while (i < count) : (i += 1) {"},
{"lineNum":"  203","line":"        wh.update(pattern);"},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":"    try expectEqual(wh.final(), result);"},
{"lineNum":"  206","line":"}"},
{"lineNum":"  207","line":""},
{"lineNum":"  208","line":"test \"iterative non-divisible update\" {"},
{"lineNum":"  209","line":"    var buf: [8192]u8 = undefined;"},
{"lineNum":"  210","line":"    for (&buf, 0..) |*e, i| {"},
{"lineNum":"  211","line":"        e.* = @truncate(u8, i);"},
{"lineNum":"  212","line":"    }"},
{"lineNum":"  213","line":""},
{"lineNum":"  214","line":"    const seed = 0x128dad08f;"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"    var end: usize = 32;"},
{"lineNum":"  217","line":"    while (end < buf.len) : (end += 32) {"},
{"lineNum":"  218","line":"        const non_iterative_hash = Wyhash.hash(seed, buf[0..end]);"},
{"lineNum":"  219","line":""},
{"lineNum":"  220","line":"        var wy = Wyhash.init(seed);"},
{"lineNum":"  221","line":"        var i: usize = 0;"},
{"lineNum":"  222","line":"        while (i < end) : (i += 33) {"},
{"lineNum":"  223","line":"            wy.update(buf[i..std.math.min(i + 33, end)]);"},
{"lineNum":"  224","line":"        }"},
{"lineNum":"  225","line":"        const iterative_hash = wy.final();"},
{"lineNum":"  226","line":""},
{"lineNum":"  227","line":"        try std.testing.expectEqual(iterative_hash, non_iterative_hash);"},
{"lineNum":"  228","line":"    }"},
{"lineNum":"  229","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 75, "covered" : 31,};
var merged_data = [];
