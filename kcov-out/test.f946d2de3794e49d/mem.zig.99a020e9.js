var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std.zig\");"},
{"lineNum":"    2","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    3","line":"const debug = std.debug;"},
{"lineNum":"    4","line":"const assert = debug.assert;"},
{"lineNum":"    5","line":"const math = std.math;"},
{"lineNum":"    6","line":"const mem = @This();"},
{"lineNum":"    7","line":"const meta = std.meta;"},
{"lineNum":"    8","line":"const trait = meta.trait;"},
{"lineNum":"    9","line":"const testing = std.testing;"},
{"lineNum":"   10","line":"const Endian = std.builtin.Endian;"},
{"lineNum":"   11","line":"const native_endian = builtin.cpu.arch.endian();"},
{"lineNum":"   12","line":""},
{"lineNum":"   13","line":"/// Compile time known minimum page size."},
{"lineNum":"   14","line":"/// https://github.com/ziglang/zig/issues/4082"},
{"lineNum":"   15","line":"pub const page_size = switch (builtin.cpu.arch) {"},
{"lineNum":"   16","line":"    .wasm32, .wasm64 => 64 * 1024,"},
{"lineNum":"   17","line":"    .aarch64 => switch (builtin.os.tag) {"},
{"lineNum":"   18","line":"        .macos, .ios, .watchos, .tvos => 16 * 1024,"},
{"lineNum":"   19","line":"        else => 4 * 1024,"},
{"lineNum":"   20","line":"    },"},
{"lineNum":"   21","line":"    .sparc64 => 8 * 1024,"},
{"lineNum":"   22","line":"    else => 4 * 1024,"},
{"lineNum":"   23","line":"};"},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"/// The standard library currently thoroughly depends on byte size"},
{"lineNum":"   26","line":"/// being 8 bits.  (see the use of u8 throughout allocation code as"},
{"lineNum":"   27","line":"/// the \"byte\" type.)  Code which depends on this can reference this"},
{"lineNum":"   28","line":"/// declaration.  If we ever try to port the standard library to a"},
{"lineNum":"   29","line":"/// non-8-bit-byte platform, this will allow us to search for things"},
{"lineNum":"   30","line":"/// which need to be updated."},
{"lineNum":"   31","line":"pub const byte_size_in_bits = 8;"},
{"lineNum":"   32","line":""},
{"lineNum":"   33","line":"pub const Allocator = @import(\"mem/Allocator.zig\");"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"/// Detects and asserts if the std.mem.Allocator interface is violated by the caller"},
{"lineNum":"   36","line":"/// or the allocator."},
{"lineNum":"   37","line":"pub fn ValidationAllocator(comptime T: type) type {"},
{"lineNum":"   38","line":"    return struct {"},
{"lineNum":"   39","line":"        const Self = @This();"},
{"lineNum":"   40","line":""},
{"lineNum":"   41","line":"        underlying_allocator: T,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"        pub fn init(underlying_allocator: T) @This() {"},
{"lineNum":"   44","line":"            return .{"},
{"lineNum":"   45","line":"                .underlying_allocator = underlying_allocator,"},
{"lineNum":"   46","line":"            };"},
{"lineNum":"   47","line":"        }"},
{"lineNum":"   48","line":""},
{"lineNum":"   49","line":"        pub fn allocator(self: *Self) Allocator {"},
{"lineNum":"   50","line":"            return .{"},
{"lineNum":"   51","line":"                .ptr = self,"},
{"lineNum":"   52","line":"                .vtable = &.{"},
{"lineNum":"   53","line":"                    .alloc = alloc,"},
{"lineNum":"   54","line":"                    .resize = resize,"},
{"lineNum":"   55","line":"                    .free = free,"},
{"lineNum":"   56","line":"                },"},
{"lineNum":"   57","line":"            };"},
{"lineNum":"   58","line":"        }"},
{"lineNum":"   59","line":""},
{"lineNum":"   60","line":"        fn getUnderlyingAllocatorPtr(self: *Self) Allocator {"},
{"lineNum":"   61","line":"            if (T == Allocator) return self.underlying_allocator;"},
{"lineNum":"   62","line":"            return self.underlying_allocator.allocator();"},
{"lineNum":"   63","line":"        }"},
{"lineNum":"   64","line":""},
{"lineNum":"   65","line":"        pub fn alloc("},
{"lineNum":"   66","line":"            ctx: *anyopaque,"},
{"lineNum":"   67","line":"            n: usize,"},
{"lineNum":"   68","line":"            log2_ptr_align: u8,"},
{"lineNum":"   69","line":"            ret_addr: usize,"},
{"lineNum":"   70","line":"        ) ?[*]u8 {"},
{"lineNum":"   71","line":"            assert(n > 0);"},
{"lineNum":"   72","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));"},
{"lineNum":"   73","line":"            const underlying = self.getUnderlyingAllocatorPtr();"},
{"lineNum":"   74","line":"            const result = underlying.rawAlloc(n, log2_ptr_align, ret_addr) orelse"},
{"lineNum":"   75","line":"                return null;"},
{"lineNum":"   76","line":"            assert(mem.isAlignedLog2(@ptrToInt(result), log2_ptr_align));"},
{"lineNum":"   77","line":"            return result;"},
{"lineNum":"   78","line":"        }"},
{"lineNum":"   79","line":""},
{"lineNum":"   80","line":"        pub fn resize("},
{"lineNum":"   81","line":"            ctx: *anyopaque,"},
{"lineNum":"   82","line":"            buf: []u8,"},
{"lineNum":"   83","line":"            log2_buf_align: u8,"},
{"lineNum":"   84","line":"            new_len: usize,"},
{"lineNum":"   85","line":"            ret_addr: usize,"},
{"lineNum":"   86","line":"        ) bool {"},
{"lineNum":"   87","line":"            const self = @ptrCast(*Self, @alignCast(@alignOf(Self), ctx));"},
{"lineNum":"   88","line":"            assert(buf.len > 0);"},
{"lineNum":"   89","line":"            const underlying = self.getUnderlyingAllocatorPtr();"},
{"lineNum":"   90","line":"            return underlying.rawResize(buf, log2_buf_align, new_len, ret_addr);"},
{"lineNum":"   91","line":"        }"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"        pub fn free("},
{"lineNum":"   94","line":"            ctx: *anyopaque,"},
{"lineNum":"   95","line":"            buf: []u8,"},
{"lineNum":"   96","line":"            log2_buf_align: u8,"},
{"lineNum":"   97","line":"            ret_addr: usize,"},
{"lineNum":"   98","line":"        ) void {"},
{"lineNum":"   99","line":"            _ = ctx;"},
{"lineNum":"  100","line":"            _ = log2_buf_align;"},
{"lineNum":"  101","line":"            _ = ret_addr;"},
{"lineNum":"  102","line":"            assert(buf.len > 0);"},
{"lineNum":"  103","line":"        }"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":"  106","line":"            self.underlying_allocator.reset();"},
{"lineNum":"  107","line":"        }"},
{"lineNum":"  108","line":"    };"},
{"lineNum":"  109","line":"}"},
{"lineNum":"  110","line":""},
{"lineNum":"  111","line":"pub fn validationWrap(allocator: anytype) ValidationAllocator(@TypeOf(allocator)) {"},
{"lineNum":"  112","line":"    return ValidationAllocator(@TypeOf(allocator)).init(allocator);"},
{"lineNum":"  113","line":"}"},
{"lineNum":"  114","line":""},
{"lineNum":"  115","line":"/// An allocator helper function.  Adjusts an allocation length satisfy `len_align`."},
{"lineNum":"  116","line":"/// `full_len` should be the full capacity of the allocation which may be greater"},
{"lineNum":"  117","line":"/// than the `len` that was requsted.  This function should only be used by allocators"},
{"lineNum":"  118","line":"/// that are unaffected by `len_align`."},
{"lineNum":"  119","line":"pub fn alignAllocLen(full_len: usize, alloc_len: usize, len_align: u29) usize {"},
{"lineNum":"  120","line":"    assert(alloc_len > 0);"},
{"lineNum":"  121","line":"    assert(alloc_len >= len_align);"},
{"lineNum":"  122","line":"    assert(full_len >= alloc_len);"},
{"lineNum":"  123","line":"    if (len_align == 0)"},
{"lineNum":"  124","line":"        return alloc_len;"},
{"lineNum":"  125","line":"    const adjusted = alignBackwardAnyAlign(full_len, len_align);"},
{"lineNum":"  126","line":"    assert(adjusted >= alloc_len);"},
{"lineNum":"  127","line":"    return adjusted;"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"const fail_allocator = Allocator{"},
{"lineNum":"  131","line":"    .ptr = undefined,"},
{"lineNum":"  132","line":"    .vtable = &failAllocator_vtable,"},
{"lineNum":"  133","line":"};"},
{"lineNum":"  134","line":""},
{"lineNum":"  135","line":"const failAllocator_vtable = Allocator.VTable{"},
{"lineNum":"  136","line":"    .alloc = failAllocatorAlloc,"},
{"lineNum":"  137","line":"    .resize = Allocator.noResize,"},
{"lineNum":"  138","line":"    .free = Allocator.noFree,"},
{"lineNum":"  139","line":"};"},
{"lineNum":"  140","line":""},
{"lineNum":"  141","line":"fn failAllocatorAlloc(_: *anyopaque, n: usize, log2_alignment: u8, ra: usize) ?[*]u8 {"},
{"lineNum":"  142","line":"    _ = n;"},
{"lineNum":"  143","line":"    _ = log2_alignment;"},
{"lineNum":"  144","line":"    _ = ra;"},
{"lineNum":"  145","line":"    return null;"},
{"lineNum":"  146","line":"}"},
{"lineNum":"  147","line":""},
{"lineNum":"  148","line":"test \"Allocator basics\" {"},
{"lineNum":"  149","line":"    try testing.expectError(error.OutOfMemory, fail_allocator.alloc(u8, 1));"},
{"lineNum":"  150","line":"    try testing.expectError(error.OutOfMemory, fail_allocator.allocSentinel(u8, 1, 0));"},
{"lineNum":"  151","line":"}"},
{"lineNum":"  152","line":""},
{"lineNum":"  153","line":"test \"Allocator.resize\" {"},
{"lineNum":"  154","line":"    const primitiveIntTypes = .{"},
{"lineNum":"  155","line":"        i8,"},
{"lineNum":"  156","line":"        u8,"},
{"lineNum":"  157","line":"        i16,"},
{"lineNum":"  158","line":"        u16,"},
{"lineNum":"  159","line":"        i32,"},
{"lineNum":"  160","line":"        u32,"},
{"lineNum":"  161","line":"        i64,"},
{"lineNum":"  162","line":"        u64,"},
{"lineNum":"  163","line":"        i128,"},
{"lineNum":"  164","line":"        u128,"},
{"lineNum":"  165","line":"        isize,"},
{"lineNum":"  166","line":"        usize,"},
{"lineNum":"  167","line":"    };"},
{"lineNum":"  168","line":"    inline for (primitiveIntTypes) |T| {"},
{"lineNum":"  169","line":"        var values = try testing.allocator.alloc(T, 100);"},
{"lineNum":"  170","line":"        defer testing.allocator.free(values);"},
{"lineNum":"  171","line":""},
{"lineNum":"  172","line":"        for (values, 0..) |*v, i| v.* = @intCast(T, i);"},
{"lineNum":"  173","line":"        if (!testing.allocator.resize(values, values.len + 10)) return error.OutOfMemory;"},
{"lineNum":"  174","line":"        values = values.ptr[0 .. values.len + 10];"},
{"lineNum":"  175","line":"        try testing.expect(values.len == 110);"},
{"lineNum":"  176","line":"    }"},
{"lineNum":"  177","line":""},
{"lineNum":"  178","line":"    const primitiveFloatTypes = .{"},
{"lineNum":"  179","line":"        f16,"},
{"lineNum":"  180","line":"        f32,"},
{"lineNum":"  181","line":"        f64,"},
{"lineNum":"  182","line":"        f128,"},
{"lineNum":"  183","line":"    };"},
{"lineNum":"  184","line":"    inline for (primitiveFloatTypes) |T| {"},
{"lineNum":"  185","line":"        var values = try testing.allocator.alloc(T, 100);"},
{"lineNum":"  186","line":"        defer testing.allocator.free(values);"},
{"lineNum":"  187","line":""},
{"lineNum":"  188","line":"        for (values, 0..) |*v, i| v.* = @intToFloat(T, i);"},
{"lineNum":"  189","line":"        if (!testing.allocator.resize(values, values.len + 10)) return error.OutOfMemory;"},
{"lineNum":"  190","line":"        values = values.ptr[0 .. values.len + 10];"},
{"lineNum":"  191","line":"        try testing.expect(values.len == 110);"},
{"lineNum":"  192","line":"    }"},
{"lineNum":"  193","line":"}"},
{"lineNum":"  194","line":""},
{"lineNum":"  195","line":"/// Copy all of source into dest at position 0."},
{"lineNum":"  196","line":"/// dest.len must be >= source.len."},
{"lineNum":"  197","line":"/// If the slices overlap, dest.ptr must be <= src.ptr."},
{"lineNum":"  198","line":"pub fn copy(comptime T: type, dest: []T, source: []const T) void {","class":"linePartCov","hits":"5","order":"84","possible_hits":"12",},
{"lineNum":"  199","line":"    for (dest[0..source.len], source) |*d, s|","class":"linePartCov","hits":"5","order":"85","possible_hits":"12",},
{"lineNum":"  200","line":"        d.* = s;","class":"linePartCov","hits":"2","order":"266","possible_hits":"12",},
{"lineNum":"  201","line":"}"},
{"lineNum":"  202","line":""},
{"lineNum":"  203","line":"/// Copy all of source into dest at position 0."},
{"lineNum":"  204","line":"/// dest.len must be >= source.len."},
{"lineNum":"  205","line":"/// If the slices overlap, dest.ptr must be >= src.ptr."},
{"lineNum":"  206","line":"pub fn copyBackwards(comptime T: type, dest: []T, source: []const T) void {","class":"lineCov","hits":"1","order":"1815","possible_hits":"1",},
{"lineNum":"  207","line":"    // TODO instead of manually doing this check for the whole array"},
{"lineNum":"  208","line":"    // and turning off runtime safety, the compiler should detect loops like"},
{"lineNum":"  209","line":"    // this and automatically omit safety checks for loops"},
{"lineNum":"  210","line":"    @setRuntimeSafety(false);"},
{"lineNum":"  211","line":"    assert(dest.len >= source.len);","class":"lineCov","hits":"1","order":"1816","possible_hits":"1",},
{"lineNum":"  212","line":"    var i = source.len;","class":"lineCov","hits":"1","order":"1817","possible_hits":"1",},
{"lineNum":"  213","line":"    while (i > 0) {","class":"lineCov","hits":"1","order":"1818","possible_hits":"1",},
{"lineNum":"  214","line":"        i -= 1;","class":"lineCov","hits":"1","order":"1819","possible_hits":"1",},
{"lineNum":"  215","line":"        dest[i] = source[i];","class":"lineCov","hits":"1","order":"1820","possible_hits":"1",},
{"lineNum":"  216","line":"    }"},
{"lineNum":"  217","line":"}"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"/// Sets all elements of `dest` to `value`."},
{"lineNum":"  220","line":"pub fn set(comptime T: type, dest: []T, value: T) void {","class":"lineCov","hits":"2","order":"74","possible_hits":"2",},
{"lineNum":"  221","line":"    for (dest) |*d|","class":"lineCov","hits":"2","order":"75","possible_hits":"2",},
{"lineNum":"  222","line":"        d.* = value;","class":"lineCov","hits":"2","order":"76","possible_hits":"2",},
{"lineNum":"  223","line":"}"},
{"lineNum":"  224","line":""},
{"lineNum":"  225","line":"/// Generally, Zig users are encouraged to explicitly initialize all fields of a struct explicitly rather than using this function."},
{"lineNum":"  226","line":"/// However, it is recognized that there are sometimes use cases for initializing all fields to a \"zero\" value. For example, when"},
{"lineNum":"  227","line":"/// interfacing with a C API where this practice is more common and relied upon. If you are performing code review and see this"},
{"lineNum":"  228","line":"/// function used, examine closely - it may be a code smell."},
{"lineNum":"  229","line":"/// Zero initializes the type."},
{"lineNum":"  230","line":"/// This can be used to zero initialize a any type for which it makes sense. Structs will be initialized recursively."},
{"lineNum":"  231","line":"pub fn zeroes(comptime T: type) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  232","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  233","line":"        .ComptimeInt, .Int, .ComptimeFloat, .Float => {"},
{"lineNum":"  234","line":"            return @as(T, 0);"},
{"lineNum":"  235","line":"        },"},
{"lineNum":"  236","line":"        .Enum, .EnumLiteral => {"},
{"lineNum":"  237","line":"            return @intToEnum(T, 0);"},
{"lineNum":"  238","line":"        },"},
{"lineNum":"  239","line":"        .Void => {"},
{"lineNum":"  240","line":"            return {};"},
{"lineNum":"  241","line":"        },"},
{"lineNum":"  242","line":"        .Bool => {"},
{"lineNum":"  243","line":"            return false;"},
{"lineNum":"  244","line":"        },"},
{"lineNum":"  245","line":"        .Optional, .Null => {"},
{"lineNum":"  246","line":"            return null;"},
{"lineNum":"  247","line":"        },"},
{"lineNum":"  248","line":"        .Struct => |struct_info| {"},
{"lineNum":"  249","line":"            if (@sizeOf(T) == 0) return undefined;"},
{"lineNum":"  250","line":"            if (struct_info.layout == .Extern) {"},
{"lineNum":"  251","line":"                var item: T = undefined;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  252","line":"                set(u8, asBytes(&item), 0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  253","line":"                return item;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  254","line":"            } else {"},
{"lineNum":"  255","line":"                var structure: T = undefined;"},
{"lineNum":"  256","line":"                inline for (struct_info.fields) |field| {"},
{"lineNum":"  257","line":"                    if (!field.is_comptime) {"},
{"lineNum":"  258","line":"                        @field(structure, field.name) = zeroes(@TypeOf(@field(structure, field.name)));"},
{"lineNum":"  259","line":"                    }"},
{"lineNum":"  260","line":"                }"},
{"lineNum":"  261","line":"                return structure;"},
{"lineNum":"  262","line":"            }"},
{"lineNum":"  263","line":"        },"},
{"lineNum":"  264","line":"        .Pointer => |ptr_info| {"},
{"lineNum":"  265","line":"            switch (ptr_info.size) {"},
{"lineNum":"  266","line":"                .Slice => {"},
{"lineNum":"  267","line":"                    if (ptr_info.sentinel) |sentinel| {"},
{"lineNum":"  268","line":"                        if (ptr_info.child == u8 and @ptrCast(*const u8, sentinel).* == 0) {"},
{"lineNum":"  269","line":"                            return \"\"; // A special case for the most common use-case: null-terminated strings."},
{"lineNum":"  270","line":"                        }"},
{"lineNum":"  271","line":"                        @compileError(\"Can\'t set a sentinel slice to zero. This would require allocating memory.\");"},
{"lineNum":"  272","line":"                    } else {"},
{"lineNum":"  273","line":"                        return &[_]ptr_info.child{};"},
{"lineNum":"  274","line":"                    }"},
{"lineNum":"  275","line":"                },"},
{"lineNum":"  276","line":"                .C => {"},
{"lineNum":"  277","line":"                    return null;"},
{"lineNum":"  278","line":"                },"},
{"lineNum":"  279","line":"                .One, .Many => {"},
{"lineNum":"  280","line":"                    @compileError(\"Can\'t set a non nullable pointer to zero.\");"},
{"lineNum":"  281","line":"                },"},
{"lineNum":"  282","line":"            }"},
{"lineNum":"  283","line":"        },"},
{"lineNum":"  284","line":"        .Array => |info| {"},
{"lineNum":"  285","line":"            if (info.sentinel) |sentinel_ptr| {"},
{"lineNum":"  286","line":"                const sentinel = @ptrCast(*align(1) const info.child, sentinel_ptr).*;"},
{"lineNum":"  287","line":"                return [_:sentinel]info.child{zeroes(info.child)} ** info.len;"},
{"lineNum":"  288","line":"            }"},
{"lineNum":"  289","line":"            return [_]info.child{zeroes(info.child)} ** info.len;"},
{"lineNum":"  290","line":"        },"},
{"lineNum":"  291","line":"        .Vector => |info| {"},
{"lineNum":"  292","line":"            return @splat(info.len, zeroes(info.child));"},
{"lineNum":"  293","line":"        },"},
{"lineNum":"  294","line":"        .Union => |info| {"},
{"lineNum":"  295","line":"            if (comptime meta.containerLayout(T) == .Extern) {"},
{"lineNum":"  296","line":"                // The C language specification states that (global) unions"},
{"lineNum":"  297","line":"                // should be zero initialized to the first named member."},
{"lineNum":"  298","line":"                return @unionInit(T, info.fields[0].name, zeroes(info.fields[0].type));"},
{"lineNum":"  299","line":"            }"},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"            @compileError(\"Can\'t set a \" ++ @typeName(T) ++ \" to zero.\");"},
{"lineNum":"  302","line":"        },"},
{"lineNum":"  303","line":"        .ErrorUnion,"},
{"lineNum":"  304","line":"        .ErrorSet,"},
{"lineNum":"  305","line":"        .Fn,"},
{"lineNum":"  306","line":"        .Type,"},
{"lineNum":"  307","line":"        .NoReturn,"},
{"lineNum":"  308","line":"        .Undefined,"},
{"lineNum":"  309","line":"        .Opaque,"},
{"lineNum":"  310","line":"        .Frame,"},
{"lineNum":"  311","line":"        .AnyFrame,"},
{"lineNum":"  312","line":"        => {"},
{"lineNum":"  313","line":"            @compileError(\"Can\'t set a \" ++ @typeName(T) ++ \" to zero.\");"},
{"lineNum":"  314","line":"        },"},
{"lineNum":"  315","line":"    }"},
{"lineNum":"  316","line":"}"},
{"lineNum":"  317","line":""},
{"lineNum":"  318","line":"test \"zeroes\" {"},
{"lineNum":"  319","line":"    if (builtin.zig_backend == .stage2_llvm) {"},
{"lineNum":"  320","line":"        // Regressed in LLVM 14:"},
{"lineNum":"  321","line":"        // https://github.com/llvm/llvm-project/issues/55522"},
{"lineNum":"  322","line":"        return error.SkipZigTest;"},
{"lineNum":"  323","line":"    }"},
{"lineNum":"  324","line":""},
{"lineNum":"  325","line":"    const C_struct = extern struct {"},
{"lineNum":"  326","line":"        x: u32,"},
{"lineNum":"  327","line":"        y: u32,"},
{"lineNum":"  328","line":"    };"},
{"lineNum":"  329","line":""},
{"lineNum":"  330","line":"    var a = zeroes(C_struct);"},
{"lineNum":"  331","line":"    a.y += 10;"},
{"lineNum":"  332","line":""},
{"lineNum":"  333","line":"    try testing.expect(a.x == 0);"},
{"lineNum":"  334","line":"    try testing.expect(a.y == 10);"},
{"lineNum":"  335","line":""},
{"lineNum":"  336","line":"    const ZigStruct = struct {"},
{"lineNum":"  337","line":"        comptime comptime_field: u8 = 5,"},
{"lineNum":"  338","line":""},
{"lineNum":"  339","line":"        integral_types: struct {"},
{"lineNum":"  340","line":"            integer_0: i0,"},
{"lineNum":"  341","line":"            integer_8: i8,"},
{"lineNum":"  342","line":"            integer_16: i16,"},
{"lineNum":"  343","line":"            integer_32: i32,"},
{"lineNum":"  344","line":"            integer_64: i64,"},
{"lineNum":"  345","line":"            integer_128: i128,"},
{"lineNum":"  346","line":"            unsigned_0: u0,"},
{"lineNum":"  347","line":"            unsigned_8: u8,"},
{"lineNum":"  348","line":"            unsigned_16: u16,"},
{"lineNum":"  349","line":"            unsigned_32: u32,"},
{"lineNum":"  350","line":"            unsigned_64: u64,"},
{"lineNum":"  351","line":"            unsigned_128: u128,"},
{"lineNum":"  352","line":""},
{"lineNum":"  353","line":"            float_32: f32,"},
{"lineNum":"  354","line":"            float_64: f64,"},
{"lineNum":"  355","line":"        },"},
{"lineNum":"  356","line":""},
{"lineNum":"  357","line":"        pointers: struct {"},
{"lineNum":"  358","line":"            optional: ?*u8,"},
{"lineNum":"  359","line":"            c_pointer: [*c]u8,"},
{"lineNum":"  360","line":"            slice: []u8,"},
{"lineNum":"  361","line":"            nullTerminatedString: [:0]const u8,"},
{"lineNum":"  362","line":"        },"},
{"lineNum":"  363","line":""},
{"lineNum":"  364","line":"        array: [2]u32,"},
{"lineNum":"  365","line":"        vector_u32: @Vector(2, u32),"},
{"lineNum":"  366","line":"        vector_f32: @Vector(2, f32),"},
{"lineNum":"  367","line":"        vector_bool: @Vector(2, bool),"},
{"lineNum":"  368","line":"        optional_int: ?u8,"},
{"lineNum":"  369","line":"        empty: void,"},
{"lineNum":"  370","line":"        sentinel: [3:0]u8,"},
{"lineNum":"  371","line":"    };"},
{"lineNum":"  372","line":""},
{"lineNum":"  373","line":"    const b = zeroes(ZigStruct);"},
{"lineNum":"  374","line":"    try testing.expectEqual(@as(u8, 5), b.comptime_field);"},
{"lineNum":"  375","line":"    try testing.expectEqual(@as(i8, 0), b.integral_types.integer_0);"},
{"lineNum":"  376","line":"    try testing.expectEqual(@as(i8, 0), b.integral_types.integer_8);"},
{"lineNum":"  377","line":"    try testing.expectEqual(@as(i16, 0), b.integral_types.integer_16);"},
{"lineNum":"  378","line":"    try testing.expectEqual(@as(i32, 0), b.integral_types.integer_32);"},
{"lineNum":"  379","line":"    try testing.expectEqual(@as(i64, 0), b.integral_types.integer_64);"},
{"lineNum":"  380","line":"    try testing.expectEqual(@as(i128, 0), b.integral_types.integer_128);"},
{"lineNum":"  381","line":"    try testing.expectEqual(@as(u8, 0), b.integral_types.unsigned_0);"},
{"lineNum":"  382","line":"    try testing.expectEqual(@as(u8, 0), b.integral_types.unsigned_8);"},
{"lineNum":"  383","line":"    try testing.expectEqual(@as(u16, 0), b.integral_types.unsigned_16);"},
{"lineNum":"  384","line":"    try testing.expectEqual(@as(u32, 0), b.integral_types.unsigned_32);"},
{"lineNum":"  385","line":"    try testing.expectEqual(@as(u64, 0), b.integral_types.unsigned_64);"},
{"lineNum":"  386","line":"    try testing.expectEqual(@as(u128, 0), b.integral_types.unsigned_128);"},
{"lineNum":"  387","line":"    try testing.expectEqual(@as(f32, 0), b.integral_types.float_32);"},
{"lineNum":"  388","line":"    try testing.expectEqual(@as(f64, 0), b.integral_types.float_64);"},
{"lineNum":"  389","line":"    try testing.expectEqual(@as(?*u8, null), b.pointers.optional);"},
{"lineNum":"  390","line":"    try testing.expectEqual(@as([*c]u8, null), b.pointers.c_pointer);"},
{"lineNum":"  391","line":"    try testing.expectEqual(@as([]u8, &[_]u8{}), b.pointers.slice);"},
{"lineNum":"  392","line":"    try testing.expectEqual(@as([:0]const u8, \"\"), b.pointers.nullTerminatedString);"},
{"lineNum":"  393","line":"    for (b.array) |e| {"},
{"lineNum":"  394","line":"        try testing.expectEqual(@as(u32, 0), e);"},
{"lineNum":"  395","line":"    }"},
{"lineNum":"  396","line":"    try testing.expectEqual(@splat(2, @as(u32, 0)), b.vector_u32);"},
{"lineNum":"  397","line":"    try testing.expectEqual(@splat(2, @as(f32, 0.0)), b.vector_f32);"},
{"lineNum":"  398","line":"    try testing.expectEqual(@splat(2, @as(bool, false)), b.vector_bool);"},
{"lineNum":"  399","line":"    try testing.expectEqual(@as(?u8, null), b.optional_int);"},
{"lineNum":"  400","line":"    for (b.sentinel) |e| {"},
{"lineNum":"  401","line":"        try testing.expectEqual(@as(u8, 0), e);"},
{"lineNum":"  402","line":"    }"},
{"lineNum":"  403","line":""},
{"lineNum":"  404","line":"    const C_union = extern union {"},
{"lineNum":"  405","line":"        a: u8,"},
{"lineNum":"  406","line":"        b: u32,"},
{"lineNum":"  407","line":"    };"},
{"lineNum":"  408","line":""},
{"lineNum":"  409","line":"    var c = zeroes(C_union);"},
{"lineNum":"  410","line":"    try testing.expectEqual(@as(u8, 0), c.a);"},
{"lineNum":"  411","line":""},
{"lineNum":"  412","line":"    comptime var comptime_union = zeroes(C_union);"},
{"lineNum":"  413","line":"    try testing.expectEqual(@as(u8, 0), comptime_union.a);"},
{"lineNum":"  414","line":""},
{"lineNum":"  415","line":"    // Ensure zero sized struct with fields is initialized correctly."},
{"lineNum":"  416","line":"    _ = zeroes(struct { handle: void });"},
{"lineNum":"  417","line":"}"},
{"lineNum":"  418","line":""},
{"lineNum":"  419","line":"/// Initializes all fields of the struct with their default value, or zero values if no default value is present."},
{"lineNum":"  420","line":"/// If the field is present in the provided initial values, it will have that value instead."},
{"lineNum":"  421","line":"/// Structs are initialized recursively."},
{"lineNum":"  422","line":"pub fn zeroInit(comptime T: type, init: anytype) T {"},
{"lineNum":"  423","line":"    const Init = @TypeOf(init);"},
{"lineNum":"  424","line":""},
{"lineNum":"  425","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  426","line":"        .Struct => |struct_info| {"},
{"lineNum":"  427","line":"            switch (@typeInfo(Init)) {"},
{"lineNum":"  428","line":"                .Struct => |init_info| {"},
{"lineNum":"  429","line":"                    if (init_info.is_tuple) {"},
{"lineNum":"  430","line":"                        if (init_info.fields.len > struct_info.fields.len) {"},
{"lineNum":"  431","line":"                            @compileError(\"Tuple initializer has more elments than there are fields in `\" ++ @typeName(T) ++ \"`\");"},
{"lineNum":"  432","line":"                        }"},
{"lineNum":"  433","line":"                    } else {"},
{"lineNum":"  434","line":"                        inline for (init_info.fields) |field| {"},
{"lineNum":"  435","line":"                            if (!@hasField(T, field.name)) {"},
{"lineNum":"  436","line":"                                @compileError(\"Encountered an initializer for `\" ++ field.name ++ \"`, but it is not a field of \" ++ @typeName(T));"},
{"lineNum":"  437","line":"                            }"},
{"lineNum":"  438","line":"                        }"},
{"lineNum":"  439","line":"                    }"},
{"lineNum":"  440","line":""},
{"lineNum":"  441","line":"                    var value: T = undefined;"},
{"lineNum":"  442","line":""},
{"lineNum":"  443","line":"                    inline for (struct_info.fields, 0..) |field, i| {"},
{"lineNum":"  444","line":"                        if (field.is_comptime) {"},
{"lineNum":"  445","line":"                            continue;"},
{"lineNum":"  446","line":"                        }"},
{"lineNum":"  447","line":""},
{"lineNum":"  448","line":"                        if (init_info.is_tuple and init_info.fields.len > i) {"},
{"lineNum":"  449","line":"                            @field(value, field.name) = @field(init, init_info.fields[i].name);"},
{"lineNum":"  450","line":"                        } else if (@hasField(@TypeOf(init), field.name)) {"},
{"lineNum":"  451","line":"                            switch (@typeInfo(field.type)) {"},
{"lineNum":"  452","line":"                                .Struct => {"},
{"lineNum":"  453","line":"                                    @field(value, field.name) = zeroInit(field.type, @field(init, field.name));"},
{"lineNum":"  454","line":"                                },"},
{"lineNum":"  455","line":"                                else => {"},
{"lineNum":"  456","line":"                                    @field(value, field.name) = @field(init, field.name);"},
{"lineNum":"  457","line":"                                },"},
{"lineNum":"  458","line":"                            }"},
{"lineNum":"  459","line":"                        } else if (field.default_value) |default_value_ptr| {"},
{"lineNum":"  460","line":"                            const default_value = @ptrCast(*align(1) const field.type, default_value_ptr).*;"},
{"lineNum":"  461","line":"                            @field(value, field.name) = default_value;"},
{"lineNum":"  462","line":"                        } else {"},
{"lineNum":"  463","line":"                            switch (@typeInfo(field.type)) {"},
{"lineNum":"  464","line":"                                .Struct => {"},
{"lineNum":"  465","line":"                                    @field(value, field.name) = std.mem.zeroInit(field.type, .{});"},
{"lineNum":"  466","line":"                                },"},
{"lineNum":"  467","line":"                                else => {"},
{"lineNum":"  468","line":"                                    @field(value, field.name) = std.mem.zeroes(@TypeOf(@field(value, field.name)));"},
{"lineNum":"  469","line":"                                },"},
{"lineNum":"  470","line":"                            }"},
{"lineNum":"  471","line":"                        }"},
{"lineNum":"  472","line":"                    }"},
{"lineNum":"  473","line":""},
{"lineNum":"  474","line":"                    return value;"},
{"lineNum":"  475","line":"                },"},
{"lineNum":"  476","line":"                else => {"},
{"lineNum":"  477","line":"                    @compileError(\"The initializer must be a struct\");"},
{"lineNum":"  478","line":"                },"},
{"lineNum":"  479","line":"            }"},
{"lineNum":"  480","line":"        },"},
{"lineNum":"  481","line":"        else => {"},
{"lineNum":"  482","line":"            @compileError(\"Can\'t default init a \" ++ @typeName(T));"},
{"lineNum":"  483","line":"        },"},
{"lineNum":"  484","line":"    }"},
{"lineNum":"  485","line":"}"},
{"lineNum":"  486","line":""},
{"lineNum":"  487","line":"test \"zeroInit\" {"},
{"lineNum":"  488","line":"    const I = struct {"},
{"lineNum":"  489","line":"        d: f64,"},
{"lineNum":"  490","line":"    };"},
{"lineNum":"  491","line":""},
{"lineNum":"  492","line":"    const S = struct {"},
{"lineNum":"  493","line":"        a: u32,"},
{"lineNum":"  494","line":"        b: ?bool,"},
{"lineNum":"  495","line":"        c: I,"},
{"lineNum":"  496","line":"        e: [3]u8,"},
{"lineNum":"  497","line":"        f: i64 = -1,"},
{"lineNum":"  498","line":"    };"},
{"lineNum":"  499","line":""},
{"lineNum":"  500","line":"    const s = zeroInit(S, .{"},
{"lineNum":"  501","line":"        .a = 42,"},
{"lineNum":"  502","line":"    });"},
{"lineNum":"  503","line":""},
{"lineNum":"  504","line":"    try testing.expectEqual(S{"},
{"lineNum":"  505","line":"        .a = 42,"},
{"lineNum":"  506","line":"        .b = null,"},
{"lineNum":"  507","line":"        .c = .{"},
{"lineNum":"  508","line":"            .d = 0,"},
{"lineNum":"  509","line":"        },"},
{"lineNum":"  510","line":"        .e = [3]u8{ 0, 0, 0 },"},
{"lineNum":"  511","line":"        .f = -1,"},
{"lineNum":"  512","line":"    }, s);"},
{"lineNum":"  513","line":""},
{"lineNum":"  514","line":"    const Color = struct {"},
{"lineNum":"  515","line":"        r: u8,"},
{"lineNum":"  516","line":"        g: u8,"},
{"lineNum":"  517","line":"        b: u8,"},
{"lineNum":"  518","line":"        a: u8,"},
{"lineNum":"  519","line":"    };"},
{"lineNum":"  520","line":""},
{"lineNum":"  521","line":"    const c = zeroInit(Color, .{ 255, 255 });"},
{"lineNum":"  522","line":"    try testing.expectEqual(Color{"},
{"lineNum":"  523","line":"        .r = 255,"},
{"lineNum":"  524","line":"        .g = 255,"},
{"lineNum":"  525","line":"        .b = 0,"},
{"lineNum":"  526","line":"        .a = 0,"},
{"lineNum":"  527","line":"    }, c);"},
{"lineNum":"  528","line":""},
{"lineNum":"  529","line":"    const Foo = struct {"},
{"lineNum":"  530","line":"        foo: u8 = 69,"},
{"lineNum":"  531","line":"        bar: u8,"},
{"lineNum":"  532","line":"    };"},
{"lineNum":"  533","line":""},
{"lineNum":"  534","line":"    const f = zeroInit(Foo, .{});"},
{"lineNum":"  535","line":"    try testing.expectEqual(Foo{"},
{"lineNum":"  536","line":"        .foo = 69,"},
{"lineNum":"  537","line":"        .bar = 0,"},
{"lineNum":"  538","line":"    }, f);"},
{"lineNum":"  539","line":""},
{"lineNum":"  540","line":"    const Bar = struct {"},
{"lineNum":"  541","line":"        foo: u32 = 666,"},
{"lineNum":"  542","line":"        bar: u32 = 420,"},
{"lineNum":"  543","line":"    };"},
{"lineNum":"  544","line":""},
{"lineNum":"  545","line":"    const b = zeroInit(Bar, .{69});"},
{"lineNum":"  546","line":"    try testing.expectEqual(Bar{"},
{"lineNum":"  547","line":"        .foo = 69,"},
{"lineNum":"  548","line":"        .bar = 420,"},
{"lineNum":"  549","line":"    }, b);"},
{"lineNum":"  550","line":""},
{"lineNum":"  551","line":"    const Baz = struct {"},
{"lineNum":"  552","line":"        foo: [:0]const u8 = \"bar\","},
{"lineNum":"  553","line":"    };"},
{"lineNum":"  554","line":""},
{"lineNum":"  555","line":"    const baz1 = zeroInit(Baz, .{});"},
{"lineNum":"  556","line":"    try testing.expectEqual(Baz{}, baz1);"},
{"lineNum":"  557","line":""},
{"lineNum":"  558","line":"    const baz2 = zeroInit(Baz, .{ .foo = \"zab\" });"},
{"lineNum":"  559","line":"    try testing.expectEqualSlices(u8, \"zab\", baz2.foo);"},
{"lineNum":"  560","line":""},
{"lineNum":"  561","line":"    const NestedBaz = struct {"},
{"lineNum":"  562","line":"        bbb: Baz,"},
{"lineNum":"  563","line":"    };"},
{"lineNum":"  564","line":"    const nested_baz = zeroInit(NestedBaz, .{});"},
{"lineNum":"  565","line":"    try testing.expectEqual(NestedBaz{"},
{"lineNum":"  566","line":"        .bbb = Baz{},"},
{"lineNum":"  567","line":"    }, nested_baz);"},
{"lineNum":"  568","line":"}"},
{"lineNum":"  569","line":""},
{"lineNum":"  570","line":"/// Compares two slices of numbers lexicographically. O(n)."},
{"lineNum":"  571","line":"pub fn order(comptime T: type, lhs: []const T, rhs: []const T) math.Order {"},
{"lineNum":"  572","line":"    const n = math.min(lhs.len, rhs.len);"},
{"lineNum":"  573","line":"    var i: usize = 0;"},
{"lineNum":"  574","line":"    while (i < n) : (i += 1) {"},
{"lineNum":"  575","line":"        switch (math.order(lhs[i], rhs[i])) {"},
{"lineNum":"  576","line":"            .eq => continue,"},
{"lineNum":"  577","line":"            .lt => return .lt,"},
{"lineNum":"  578","line":"            .gt => return .gt,"},
{"lineNum":"  579","line":"        }"},
{"lineNum":"  580","line":"    }"},
{"lineNum":"  581","line":"    return math.order(lhs.len, rhs.len);"},
{"lineNum":"  582","line":"}"},
{"lineNum":"  583","line":""},
{"lineNum":"  584","line":"test \"order\" {"},
{"lineNum":"  585","line":"    try testing.expect(order(u8, \"abcd\", \"bee\") == .lt);"},
{"lineNum":"  586","line":"    try testing.expect(order(u8, \"abc\", \"abc\") == .eq);"},
{"lineNum":"  587","line":"    try testing.expect(order(u8, \"abc\", \"abc0\") == .lt);"},
{"lineNum":"  588","line":"    try testing.expect(order(u8, \"\", \"\") == .eq);"},
{"lineNum":"  589","line":"    try testing.expect(order(u8, \"\", \"a\") == .lt);"},
{"lineNum":"  590","line":"}"},
{"lineNum":"  591","line":""},
{"lineNum":"  592","line":"/// Returns true if lhs < rhs, false otherwise"},
{"lineNum":"  593","line":"pub fn lessThan(comptime T: type, lhs: []const T, rhs: []const T) bool {"},
{"lineNum":"  594","line":"    return order(T, lhs, rhs) == .lt;"},
{"lineNum":"  595","line":"}"},
{"lineNum":"  596","line":""},
{"lineNum":"  597","line":"test \"lessThan\" {"},
{"lineNum":"  598","line":"    try testing.expect(lessThan(u8, \"abcd\", \"bee\"));"},
{"lineNum":"  599","line":"    try testing.expect(!lessThan(u8, \"abc\", \"abc\"));"},
{"lineNum":"  600","line":"    try testing.expect(lessThan(u8, \"abc\", \"abc0\"));"},
{"lineNum":"  601","line":"    try testing.expect(!lessThan(u8, \"\", \"\"));"},
{"lineNum":"  602","line":"    try testing.expect(lessThan(u8, \"\", \"a\"));"},
{"lineNum":"  603","line":"}"},
{"lineNum":"  604","line":""},
{"lineNum":"  605","line":"/// Compares two slices and returns whether they are equal."},
{"lineNum":"  606","line":"pub fn eql(comptime T: type, a: []const T, b: []const T) bool {","class":"lineCov","hits":"1","order":"376","possible_hits":"1",},
{"lineNum":"  607","line":"    if (a.len != b.len) return false;","class":"lineCov","hits":"1","order":"377","possible_hits":"1",},
{"lineNum":"  608","line":"    if (a.ptr == b.ptr) return true;","class":"lineCov","hits":"1","order":"378","possible_hits":"1",},
{"lineNum":"  609","line":"    for (a, b) |a_elem, b_elem| {","class":"lineCov","hits":"1","order":"379","possible_hits":"1",},
{"lineNum":"  610","line":"        if (a_elem != b_elem) return false;","class":"lineCov","hits":"1","order":"380","possible_hits":"1",},
{"lineNum":"  611","line":"    }"},
{"lineNum":"  612","line":"    return true;","class":"lineCov","hits":"1","order":"381","possible_hits":"1",},
{"lineNum":"  613","line":"}"},
{"lineNum":"  614","line":""},
{"lineNum":"  615","line":"/// Compares two slices and returns the index of the first inequality."},
{"lineNum":"  616","line":"/// Returns null if the slices are equal."},
{"lineNum":"  617","line":"pub fn indexOfDiff(comptime T: type, a: []const T, b: []const T) ?usize {","class":"lineCov","hits":"1","order":"1581","possible_hits":"1",},
{"lineNum":"  618","line":"    const shortest = math.min(a.len, b.len);","class":"lineCov","hits":"1","order":"1582","possible_hits":"1",},
{"lineNum":"  619","line":"    if (a.ptr == b.ptr)","class":"lineCov","hits":"1","order":"1586","possible_hits":"1",},
{"lineNum":"  620","line":"        return if (a.len == b.len) null else shortest;","class":"lineCov","hits":"1","order":"1847","possible_hits":"1",},
{"lineNum":"  621","line":"    var index: usize = 0;","class":"lineCov","hits":"1","order":"1587","possible_hits":"1",},
{"lineNum":"  622","line":"    while (index < shortest) : (index += 1) if (a[index] != b[index]) return index;","class":"lineCov","hits":"1","order":"1588","possible_hits":"1",},
{"lineNum":"  623","line":"    return if (a.len == b.len) null else shortest;","class":"lineCov","hits":"1","order":"1589","possible_hits":"1",},
{"lineNum":"  624","line":"}"},
{"lineNum":"  625","line":""},
{"lineNum":"  626","line":"test \"indexOfDiff\" {"},
{"lineNum":"  627","line":"    try testing.expectEqual(indexOfDiff(u8, \"one\", \"one\"), null);"},
{"lineNum":"  628","line":"    try testing.expectEqual(indexOfDiff(u8, \"one two\", \"one\"), 3);"},
{"lineNum":"  629","line":"    try testing.expectEqual(indexOfDiff(u8, \"one\", \"one two\"), 3);"},
{"lineNum":"  630","line":"    try testing.expectEqual(indexOfDiff(u8, \"one twx\", \"one two\"), 6);"},
{"lineNum":"  631","line":"    try testing.expectEqual(indexOfDiff(u8, \"xne\", \"one\"), 0);"},
{"lineNum":"  632","line":"}"},
{"lineNum":"  633","line":""},
{"lineNum":"  634","line":"/// Takes a sentinel-terminated pointer and returns a slice preserving pointer attributes."},
{"lineNum":"  635","line":"/// `[*c]` pointers are assumed to be 0-terminated and assumed to not be allowzero."},
{"lineNum":"  636","line":"fn Span(comptime T: type) type {"},
{"lineNum":"  637","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  638","line":"        .Optional => |optional_info| {"},
{"lineNum":"  639","line":"            return ?Span(optional_info.child);"},
{"lineNum":"  640","line":"        },"},
{"lineNum":"  641","line":"        .Pointer => |ptr_info| {"},
{"lineNum":"  642","line":"            var new_ptr_info = ptr_info;"},
{"lineNum":"  643","line":"            switch (ptr_info.size) {"},
{"lineNum":"  644","line":"                .C => {"},
{"lineNum":"  645","line":"                    new_ptr_info.sentinel = &@as(ptr_info.child, 0);"},
{"lineNum":"  646","line":"                    new_ptr_info.is_allowzero = false;"},
{"lineNum":"  647","line":"                },"},
{"lineNum":"  648","line":"                .Many => if (ptr_info.sentinel == null) @compileError(\"invalid type given to std.mem.span: \" ++ @typeName(T)),"},
{"lineNum":"  649","line":"                .One, .Slice => @compileError(\"invalid type given to std.mem.span: \" ++ @typeName(T)),"},
{"lineNum":"  650","line":"            }"},
{"lineNum":"  651","line":"            new_ptr_info.size = .Slice;"},
{"lineNum":"  652","line":"            return @Type(.{ .Pointer = new_ptr_info });"},
{"lineNum":"  653","line":"        },"},
{"lineNum":"  654","line":"        else => {},"},
{"lineNum":"  655","line":"    }"},
{"lineNum":"  656","line":"    @compileError(\"invalid type given to std.mem.span: \" ++ @typeName(T));"},
{"lineNum":"  657","line":"}"},
{"lineNum":"  658","line":""},
{"lineNum":"  659","line":"test \"Span\" {"},
{"lineNum":"  660","line":"    try testing.expect(Span([*:1]u16) == [:1]u16);"},
{"lineNum":"  661","line":"    try testing.expect(Span(?[*:1]u16) == ?[:1]u16);"},
{"lineNum":"  662","line":"    try testing.expect(Span([*:1]const u8) == [:1]const u8);"},
{"lineNum":"  663","line":"    try testing.expect(Span(?[*:1]const u8) == ?[:1]const u8);"},
{"lineNum":"  664","line":"    try testing.expect(Span([*c]u16) == [:0]u16);"},
{"lineNum":"  665","line":"    try testing.expect(Span(?[*c]u16) == ?[:0]u16);"},
{"lineNum":"  666","line":"    try testing.expect(Span([*c]const u8) == [:0]const u8);"},
{"lineNum":"  667","line":"    try testing.expect(Span(?[*c]const u8) == ?[:0]const u8);"},
{"lineNum":"  668","line":"}"},
{"lineNum":"  669","line":""},
{"lineNum":"  670","line":"/// Takes a sentinel-terminated pointer and returns a slice, iterating over the"},
{"lineNum":"  671","line":"/// memory to find the sentinel and determine the length."},
{"lineNum":"  672","line":"/// Ponter attributes such as const are preserved."},
{"lineNum":"  673","line":"/// `[*c]` pointers are assumed to be non-null and 0-terminated."},
{"lineNum":"  674","line":"pub fn span(ptr: anytype) Span(@TypeOf(ptr)) {"},
{"lineNum":"  675","line":"    if (@typeInfo(@TypeOf(ptr)) == .Optional) {"},
{"lineNum":"  676","line":"        if (ptr) |non_null| {"},
{"lineNum":"  677","line":"            return span(non_null);"},
{"lineNum":"  678","line":"        } else {"},
{"lineNum":"  679","line":"            return null;"},
{"lineNum":"  680","line":"        }"},
{"lineNum":"  681","line":"    }"},
{"lineNum":"  682","line":"    const Result = Span(@TypeOf(ptr));"},
{"lineNum":"  683","line":"    const l = len(ptr);"},
{"lineNum":"  684","line":"    const ptr_info = @typeInfo(Result).Pointer;"},
{"lineNum":"  685","line":"    if (ptr_info.sentinel) |s_ptr| {"},
{"lineNum":"  686","line":"        const s = @ptrCast(*align(1) const ptr_info.child, s_ptr).*;"},
{"lineNum":"  687","line":"        return ptr[0..l :s];"},
{"lineNum":"  688","line":"    } else {"},
{"lineNum":"  689","line":"        return ptr[0..l];"},
{"lineNum":"  690","line":"    }"},
{"lineNum":"  691","line":"}"},
{"lineNum":"  692","line":""},
{"lineNum":"  693","line":"test \"span\" {"},
{"lineNum":"  694","line":"    var array: [5]u16 = [_]u16{ 1, 2, 3, 4, 5 };"},
{"lineNum":"  695","line":"    const ptr = @as([*:3]u16, array[0..2 :3]);"},
{"lineNum":"  696","line":"    try testing.expect(eql(u16, span(ptr), &[_]u16{ 1, 2 }));"},
{"lineNum":"  697","line":"    try testing.expectEqual(@as(?[:0]u16, null), span(@as(?[*:0]u16, null)));"},
{"lineNum":"  698","line":"}"},
{"lineNum":"  699","line":""},
{"lineNum":"  700","line":"/// Helper for the return type of sliceTo()"},
{"lineNum":"  701","line":"fn SliceTo(comptime T: type, comptime end: meta.Elem(T)) type {"},
{"lineNum":"  702","line":"    switch (@typeInfo(T)) {"},
{"lineNum":"  703","line":"        .Optional => |optional_info| {"},
{"lineNum":"  704","line":"            return ?SliceTo(optional_info.child, end);"},
{"lineNum":"  705","line":"        },"},
{"lineNum":"  706","line":"        .Pointer => |ptr_info| {"},
{"lineNum":"  707","line":"            var new_ptr_info = ptr_info;"},
{"lineNum":"  708","line":"            new_ptr_info.size = .Slice;"},
{"lineNum":"  709","line":"            switch (ptr_info.size) {"},
{"lineNum":"  710","line":"                .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":"  711","line":"                    .Array => |array_info| {"},
{"lineNum":"  712","line":"                        new_ptr_info.child = array_info.child;"},
{"lineNum":"  713","line":"                        // The return type must only be sentinel terminated if we are guaranteed"},
{"lineNum":"  714","line":"                        // to find the value searched for, which is only the case if it matches"},
{"lineNum":"  715","line":"                        // the sentinel of the type passed."},
{"lineNum":"  716","line":"                        if (array_info.sentinel) |sentinel_ptr| {"},
{"lineNum":"  717","line":"                            const sentinel = @ptrCast(*align(1) const array_info.child, sentinel_ptr).*;"},
{"lineNum":"  718","line":"                            if (end == sentinel) {"},
{"lineNum":"  719","line":"                                new_ptr_info.sentinel = &end;"},
{"lineNum":"  720","line":"                            } else {"},
{"lineNum":"  721","line":"                                new_ptr_info.sentinel = null;"},
{"lineNum":"  722","line":"                            }"},
{"lineNum":"  723","line":"                        }"},
{"lineNum":"  724","line":"                    },"},
{"lineNum":"  725","line":"                    else => {},"},
{"lineNum":"  726","line":"                },"},
{"lineNum":"  727","line":"                .Many, .Slice => {"},
{"lineNum":"  728","line":"                    // The return type must only be sentinel terminated if we are guaranteed"},
{"lineNum":"  729","line":"                    // to find the value searched for, which is only the case if it matches"},
{"lineNum":"  730","line":"                    // the sentinel of the type passed."},
{"lineNum":"  731","line":"                    if (ptr_info.sentinel) |sentinel_ptr| {"},
{"lineNum":"  732","line":"                        const sentinel = @ptrCast(*align(1) const ptr_info.child, sentinel_ptr).*;"},
{"lineNum":"  733","line":"                        if (end == sentinel) {"},
{"lineNum":"  734","line":"                            new_ptr_info.sentinel = &end;"},
{"lineNum":"  735","line":"                        } else {"},
{"lineNum":"  736","line":"                            new_ptr_info.sentinel = null;"},
{"lineNum":"  737","line":"                        }"},
{"lineNum":"  738","line":"                    }"},
{"lineNum":"  739","line":"                },"},
{"lineNum":"  740","line":"                .C => {"},
{"lineNum":"  741","line":"                    new_ptr_info.sentinel = &end;"},
{"lineNum":"  742","line":"                    // C pointers are always allowzero, but we don\'t want the return type to be."},
{"lineNum":"  743","line":"                    assert(new_ptr_info.is_allowzero);"},
{"lineNum":"  744","line":"                    new_ptr_info.is_allowzero = false;"},
{"lineNum":"  745","line":"                },"},
{"lineNum":"  746","line":"            }"},
{"lineNum":"  747","line":"            return @Type(.{ .Pointer = new_ptr_info });"},
{"lineNum":"  748","line":"        },"},
{"lineNum":"  749","line":"        else => {},"},
{"lineNum":"  750","line":"    }"},
{"lineNum":"  751","line":"    @compileError(\"invalid type given to std.mem.sliceTo: \" ++ @typeName(T));"},
{"lineNum":"  752","line":"}"},
{"lineNum":"  753","line":""},
{"lineNum":"  754","line":"/// Takes an array, a pointer to an array, a sentinel-terminated pointer, or a slice and"},
{"lineNum":"  755","line":"/// iterates searching for the first occurrence of `end`, returning the scanned slice."},
{"lineNum":"  756","line":"/// If `end` is not found, the full length of the array/slice/sentinel terminated pointer is returned."},
{"lineNum":"  757","line":"/// If the pointer type is sentinel terminated and `end` matches that terminator, the"},
{"lineNum":"  758","line":"/// resulting slice is also sentinel terminated."},
{"lineNum":"  759","line":"/// Pointer properties such as mutability and alignment are preserved."},
{"lineNum":"  760","line":"/// C pointers are assumed to be non-null."},
{"lineNum":"  761","line":"pub fn sliceTo(ptr: anytype, comptime end: meta.Elem(@TypeOf(ptr))) SliceTo(@TypeOf(ptr), end) {","class":"linePartCov","hits":"2","order":"182","possible_hits":"4",},
{"lineNum":"  762","line":"    if (@typeInfo(@TypeOf(ptr)) == .Optional) {"},
{"lineNum":"  763","line":"        const non_null = ptr orelse return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  764","line":"        return sliceTo(non_null, end);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  765","line":"    }"},
{"lineNum":"  766","line":"    const Result = SliceTo(@TypeOf(ptr), end);"},
{"lineNum":"  767","line":"    const length = lenSliceTo(ptr, end);","class":"linePartCov","hits":"2","order":"183","possible_hits":"3",},
{"lineNum":"  768","line":"    const ptr_info = @typeInfo(Result).Pointer;"},
{"lineNum":"  769","line":"    if (ptr_info.sentinel) |s_ptr| {","class":"lineCov","hits":"2","order":"190","possible_hits":"2",},
{"lineNum":"  770","line":"        const s = @ptrCast(*align(1) const ptr_info.child, s_ptr).*;","class":"lineCov","hits":"2","order":"191","possible_hits":"2",},
{"lineNum":"  771","line":"        return ptr[0..length :s];","class":"lineCov","hits":"2","order":"192","possible_hits":"2",},
{"lineNum":"  772","line":"    } else {"},
{"lineNum":"  773","line":"        return ptr[0..length];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  774","line":"    }"},
{"lineNum":"  775","line":"}"},
{"lineNum":"  776","line":""},
{"lineNum":"  777","line":"test \"sliceTo\" {"},
{"lineNum":"  778","line":"    try testing.expectEqualSlices(u8, \"aoeu\", sliceTo(\"aoeu\", 0));"},
{"lineNum":"  779","line":""},
{"lineNum":"  780","line":"    {"},
{"lineNum":"  781","line":"        var array: [5]u16 = [_]u16{ 1, 2, 3, 4, 5 };"},
{"lineNum":"  782","line":"        try testing.expectEqualSlices(u16, &array, sliceTo(&array, 0));"},
{"lineNum":"  783","line":"        try testing.expectEqualSlices(u16, array[0..3], sliceTo(array[0..3], 0));"},
{"lineNum":"  784","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(&array, 3));"},
{"lineNum":"  785","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(array[0..3], 3));"},
{"lineNum":"  786","line":""},
{"lineNum":"  787","line":"        const sentinel_ptr = @ptrCast([*:5]u16, &array);"},
{"lineNum":"  788","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(sentinel_ptr, 3));"},
{"lineNum":"  789","line":"        try testing.expectEqualSlices(u16, array[0..4], sliceTo(sentinel_ptr, 99));"},
{"lineNum":"  790","line":""},
{"lineNum":"  791","line":"        const optional_sentinel_ptr = @ptrCast(?[*:5]u16, &array);"},
{"lineNum":"  792","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(optional_sentinel_ptr, 3).?);"},
{"lineNum":"  793","line":"        try testing.expectEqualSlices(u16, array[0..4], sliceTo(optional_sentinel_ptr, 99).?);"},
{"lineNum":"  794","line":""},
{"lineNum":"  795","line":"        const c_ptr = @as([*c]u16, &array);"},
{"lineNum":"  796","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(c_ptr, 3));"},
{"lineNum":"  797","line":""},
{"lineNum":"  798","line":"        const slice: []u16 = &array;"},
{"lineNum":"  799","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(slice, 3));"},
{"lineNum":"  800","line":"        try testing.expectEqualSlices(u16, &array, sliceTo(slice, 99));"},
{"lineNum":"  801","line":""},
{"lineNum":"  802","line":"        const sentinel_slice: [:5]u16 = array[0..4 :5];"},
{"lineNum":"  803","line":"        try testing.expectEqualSlices(u16, array[0..2], sliceTo(sentinel_slice, 3));"},
{"lineNum":"  804","line":"        try testing.expectEqualSlices(u16, array[0..4], sliceTo(sentinel_slice, 99));"},
{"lineNum":"  805","line":"    }"},
{"lineNum":"  806","line":"    {"},
{"lineNum":"  807","line":"        var sentinel_array: [5:0]u16 = [_:0]u16{ 1, 2, 3, 4, 5 };"},
{"lineNum":"  808","line":"        try testing.expectEqualSlices(u16, sentinel_array[0..2], sliceTo(&sentinel_array, 3));"},
{"lineNum":"  809","line":"        try testing.expectEqualSlices(u16, &sentinel_array, sliceTo(&sentinel_array, 0));"},
{"lineNum":"  810","line":"        try testing.expectEqualSlices(u16, &sentinel_array, sliceTo(&sentinel_array, 99));"},
{"lineNum":"  811","line":"    }"},
{"lineNum":"  812","line":""},
{"lineNum":"  813","line":"    try testing.expectEqual(@as(?[]u8, null), sliceTo(@as(?[]u8, null), 0));"},
{"lineNum":"  814","line":"}"},
{"lineNum":"  815","line":""},
{"lineNum":"  816","line":"/// Private helper for sliceTo(). If you want the length, use sliceTo(foo, x).len"},
{"lineNum":"  817","line":"fn lenSliceTo(ptr: anytype, comptime end: meta.Elem(@TypeOf(ptr))) usize {","class":"linePartCov","hits":"2","order":"184","possible_hits":"3",},
{"lineNum":"  818","line":"    switch (@typeInfo(@TypeOf(ptr))) {"},
{"lineNum":"  819","line":"        .Pointer => |ptr_info| switch (ptr_info.size) {"},
{"lineNum":"  820","line":"            .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":"  821","line":"                .Array => |array_info| {"},
{"lineNum":"  822","line":"                    if (array_info.sentinel) |sentinel_ptr| {"},
{"lineNum":"  823","line":"                        const sentinel = @ptrCast(*align(1) const array_info.child, sentinel_ptr).*;"},
{"lineNum":"  824","line":"                        if (sentinel == end) {"},
{"lineNum":"  825","line":"                            return indexOfSentinel(array_info.child, end, ptr);"},
{"lineNum":"  826","line":"                        }"},
{"lineNum":"  827","line":"                    }"},
{"lineNum":"  828","line":"                    return indexOfScalar(array_info.child, ptr, end) orelse array_info.len;"},
{"lineNum":"  829","line":"                },"},
{"lineNum":"  830","line":"                else => {},"},
{"lineNum":"  831","line":"            },"},
{"lineNum":"  832","line":"            .Many => if (ptr_info.sentinel) |sentinel_ptr| {","class":"lineCov","hits":"2","order":"185","possible_hits":"2",},
{"lineNum":"  833","line":"                const sentinel = @ptrCast(*align(1) const ptr_info.child, sentinel_ptr).*;","class":"lineCov","hits":"2","order":"186","possible_hits":"2",},
{"lineNum":"  834","line":"                // We may be looking for something other than the sentinel,"},
{"lineNum":"  835","line":"                // but iterating past the sentinel would be a bug so we need"},
{"lineNum":"  836","line":"                // to check for both."},
{"lineNum":"  837","line":"                var i: usize = 0;","class":"lineCov","hits":"2","order":"187","possible_hits":"2",},
{"lineNum":"  838","line":"                while (ptr[i] != end and ptr[i] != sentinel) i += 1;","class":"lineCov","hits":"2","order":"188","possible_hits":"2",},
{"lineNum":"  839","line":"                return i;","class":"lineCov","hits":"2","order":"189","possible_hits":"2",},
{"lineNum":"  840","line":"            },"},
{"lineNum":"  841","line":"            .C => {"},
{"lineNum":"  842","line":"                assert(ptr != null);"},
{"lineNum":"  843","line":"                return indexOfSentinel(ptr_info.child, end, ptr);"},
{"lineNum":"  844","line":"            },"},
{"lineNum":"  845","line":"            .Slice => {"},
{"lineNum":"  846","line":"                if (ptr_info.sentinel) |sentinel_ptr| {"},
{"lineNum":"  847","line":"                    const sentinel = @ptrCast(*align(1) const ptr_info.child, sentinel_ptr).*;"},
{"lineNum":"  848","line":"                    if (sentinel == end) {"},
{"lineNum":"  849","line":"                        return indexOfSentinel(ptr_info.child, sentinel, ptr);"},
{"lineNum":"  850","line":"                    }"},
{"lineNum":"  851","line":"                }"},
{"lineNum":"  852","line":"                return indexOfScalar(ptr_info.child, ptr, end) orelse ptr.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  853","line":"            },"},
{"lineNum":"  854","line":"        },"},
{"lineNum":"  855","line":"        else => {},"},
{"lineNum":"  856","line":"    }"},
{"lineNum":"  857","line":"    @compileError(\"invalid type given to std.mem.sliceTo: \" ++ @typeName(@TypeOf(ptr)));"},
{"lineNum":"  858","line":"}"},
{"lineNum":"  859","line":""},
{"lineNum":"  860","line":"test \"lenSliceTo\" {"},
{"lineNum":"  861","line":"    try testing.expect(lenSliceTo(\"aoeu\", 0) == 4);"},
{"lineNum":"  862","line":""},
{"lineNum":"  863","line":"    {"},
{"lineNum":"  864","line":"        var array: [5]u16 = [_]u16{ 1, 2, 3, 4, 5 };"},
{"lineNum":"  865","line":"        try testing.expectEqual(@as(usize, 5), lenSliceTo(&array, 0));"},
{"lineNum":"  866","line":"        try testing.expectEqual(@as(usize, 3), lenSliceTo(array[0..3], 0));"},
{"lineNum":"  867","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(&array, 3));"},
{"lineNum":"  868","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(array[0..3], 3));"},
{"lineNum":"  869","line":""},
{"lineNum":"  870","line":"        const sentinel_ptr = @ptrCast([*:5]u16, &array);"},
{"lineNum":"  871","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(sentinel_ptr, 3));"},
{"lineNum":"  872","line":"        try testing.expectEqual(@as(usize, 4), lenSliceTo(sentinel_ptr, 99));"},
{"lineNum":"  873","line":""},
{"lineNum":"  874","line":"        const c_ptr = @as([*c]u16, &array);"},
{"lineNum":"  875","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(c_ptr, 3));"},
{"lineNum":"  876","line":""},
{"lineNum":"  877","line":"        const slice: []u16 = &array;"},
{"lineNum":"  878","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(slice, 3));"},
{"lineNum":"  879","line":"        try testing.expectEqual(@as(usize, 5), lenSliceTo(slice, 99));"},
{"lineNum":"  880","line":""},
{"lineNum":"  881","line":"        const sentinel_slice: [:5]u16 = array[0..4 :5];"},
{"lineNum":"  882","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(sentinel_slice, 3));"},
{"lineNum":"  883","line":"        try testing.expectEqual(@as(usize, 4), lenSliceTo(sentinel_slice, 99));"},
{"lineNum":"  884","line":"    }"},
{"lineNum":"  885","line":"    {"},
{"lineNum":"  886","line":"        var sentinel_array: [5:0]u16 = [_:0]u16{ 1, 2, 3, 4, 5 };"},
{"lineNum":"  887","line":"        try testing.expectEqual(@as(usize, 2), lenSliceTo(&sentinel_array, 3));"},
{"lineNum":"  888","line":"        try testing.expectEqual(@as(usize, 5), lenSliceTo(&sentinel_array, 0));"},
{"lineNum":"  889","line":"        try testing.expectEqual(@as(usize, 5), lenSliceTo(&sentinel_array, 99));"},
{"lineNum":"  890","line":"    }"},
{"lineNum":"  891","line":"}"},
{"lineNum":"  892","line":""},
{"lineNum":"  893","line":"/// Takes a sentinel-terminated pointer and iterates over the memory to find the"},
{"lineNum":"  894","line":"/// sentinel and determine the length."},
{"lineNum":"  895","line":"/// `[*c]` pointers are assumed to be non-null and 0-terminated."},
{"lineNum":"  896","line":"pub fn len(value: anytype) usize {"},
{"lineNum":"  897","line":"    switch (@typeInfo(@TypeOf(value))) {"},
{"lineNum":"  898","line":"        .Pointer => |info| switch (info.size) {"},
{"lineNum":"  899","line":"            .Many => {"},
{"lineNum":"  900","line":"                const sentinel_ptr = info.sentinel orelse"},
{"lineNum":"  901","line":"                    @compileError(\"invalid type given to std.mem.len: \" ++ @typeName(@TypeOf(value)));"},
{"lineNum":"  902","line":"                const sentinel = @ptrCast(*align(1) const info.child, sentinel_ptr).*;"},
{"lineNum":"  903","line":"                return indexOfSentinel(info.child, sentinel, value);"},
{"lineNum":"  904","line":"            },"},
{"lineNum":"  905","line":"            .C => {"},
{"lineNum":"  906","line":"                assert(value != null);"},
{"lineNum":"  907","line":"                return indexOfSentinel(info.child, 0, value);"},
{"lineNum":"  908","line":"            },"},
{"lineNum":"  909","line":"            else => @compileError(\"invalid type given to std.mem.len: \" ++ @typeName(@TypeOf(value))),"},
{"lineNum":"  910","line":"        },"},
{"lineNum":"  911","line":"        else => @compileError(\"invalid type given to std.mem.len: \" ++ @typeName(@TypeOf(value))),"},
{"lineNum":"  912","line":"    }"},
{"lineNum":"  913","line":"}"},
{"lineNum":"  914","line":""},
{"lineNum":"  915","line":"test \"len\" {"},
{"lineNum":"  916","line":"    var array: [5]u16 = [_]u16{ 1, 2, 0, 4, 5 };"},
{"lineNum":"  917","line":"    const ptr = @as([*:4]u16, array[0..3 :4]);"},
{"lineNum":"  918","line":"    try testing.expect(len(ptr) == 3);"},
{"lineNum":"  919","line":"    const c_ptr = @as([*c]u16, ptr);"},
{"lineNum":"  920","line":"    try testing.expect(len(c_ptr) == 2);"},
{"lineNum":"  921","line":"}"},
{"lineNum":"  922","line":""},
{"lineNum":"  923","line":"pub fn indexOfSentinel(comptime Elem: type, comptime sentinel: Elem, ptr: [*:sentinel]const Elem) usize {"},
{"lineNum":"  924","line":"    var i: usize = 0;"},
{"lineNum":"  925","line":"    while (ptr[i] != sentinel) {"},
{"lineNum":"  926","line":"        i += 1;"},
{"lineNum":"  927","line":"    }"},
{"lineNum":"  928","line":"    return i;"},
{"lineNum":"  929","line":"}"},
{"lineNum":"  930","line":""},
{"lineNum":"  931","line":"/// Returns true if all elements in a slice are equal to the scalar value provided"},
{"lineNum":"  932","line":"pub fn allEqual(comptime T: type, slice: []const T, scalar: T) bool {"},
{"lineNum":"  933","line":"    for (slice) |item| {"},
{"lineNum":"  934","line":"        if (item != scalar) return false;"},
{"lineNum":"  935","line":"    }"},
{"lineNum":"  936","line":"    return true;"},
{"lineNum":"  937","line":"}"},
{"lineNum":"  938","line":""},
{"lineNum":"  939","line":"/// Remove a set of values from the beginning of a slice."},
{"lineNum":"  940","line":"pub fn trimLeft(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {"},
{"lineNum":"  941","line":"    var begin: usize = 0;"},
{"lineNum":"  942","line":"    while (begin < slice.len and indexOfScalar(T, values_to_strip, slice[begin]) != null) : (begin += 1) {}"},
{"lineNum":"  943","line":"    return slice[begin..];"},
{"lineNum":"  944","line":"}"},
{"lineNum":"  945","line":""},
{"lineNum":"  946","line":"/// Remove a set of values from the end of a slice."},
{"lineNum":"  947","line":"pub fn trimRight(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {"},
{"lineNum":"  948","line":"    var end: usize = slice.len;"},
{"lineNum":"  949","line":"    while (end > 0 and indexOfScalar(T, values_to_strip, slice[end - 1]) != null) : (end -= 1) {}"},
{"lineNum":"  950","line":"    return slice[0..end];"},
{"lineNum":"  951","line":"}"},
{"lineNum":"  952","line":""},
{"lineNum":"  953","line":"/// Remove a set of values from the beginning and end of a slice."},
{"lineNum":"  954","line":"pub fn trim(comptime T: type, slice: []const T, values_to_strip: []const T) []const T {"},
{"lineNum":"  955","line":"    var begin: usize = 0;"},
{"lineNum":"  956","line":"    var end: usize = slice.len;"},
{"lineNum":"  957","line":"    while (begin < end and indexOfScalar(T, values_to_strip, slice[begin]) != null) : (begin += 1) {}"},
{"lineNum":"  958","line":"    while (end > begin and indexOfScalar(T, values_to_strip, slice[end - 1]) != null) : (end -= 1) {}"},
{"lineNum":"  959","line":"    return slice[begin..end];"},
{"lineNum":"  960","line":"}"},
{"lineNum":"  961","line":""},
{"lineNum":"  962","line":"test \"trim\" {"},
{"lineNum":"  963","line":"    try testing.expectEqualSlices(u8, \"foo\\n \", trimLeft(u8, \" foo\\n \", \" \\n\"));"},
{"lineNum":"  964","line":"    try testing.expectEqualSlices(u8, \" foo\", trimRight(u8, \" foo\\n \", \" \\n\"));"},
{"lineNum":"  965","line":"    try testing.expectEqualSlices(u8, \"foo\", trim(u8, \" foo\\n \", \" \\n\"));"},
{"lineNum":"  966","line":"    try testing.expectEqualSlices(u8, \"foo\", trim(u8, \"foo\", \" \\n\"));"},
{"lineNum":"  967","line":"}"},
{"lineNum":"  968","line":""},
{"lineNum":"  969","line":"/// Linear search for the index of a scalar value inside a slice."},
{"lineNum":"  970","line":"pub fn indexOfScalar(comptime T: type, slice: []const T, value: T) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  971","line":"    return indexOfScalarPos(T, slice, 0, value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  972","line":"}"},
{"lineNum":"  973","line":""},
{"lineNum":"  974","line":"/// Linear search for the last index of a scalar value inside a slice."},
{"lineNum":"  975","line":"pub fn lastIndexOfScalar(comptime T: type, slice: []const T, value: T) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  976","line":"    var i: usize = slice.len;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  977","line":"    while (i != 0) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  978","line":"        i -= 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  979","line":"        if (slice[i] == value) return i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  980","line":"    }"},
{"lineNum":"  981","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  982","line":"}"},
{"lineNum":"  983","line":""},
{"lineNum":"  984","line":"pub fn indexOfScalarPos(comptime T: type, slice: []const T, start_index: usize, value: T) ?usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  985","line":"    var i: usize = start_index;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  986","line":"    while (i < slice.len) : (i += 1) {","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"  987","line":"        if (slice[i] == value) return i;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  988","line":"    }"},
{"lineNum":"  989","line":"    return null;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  990","line":"}"},
{"lineNum":"  991","line":""},
{"lineNum":"  992","line":"pub fn indexOfAny(comptime T: type, slice: []const T, values: []const T) ?usize {"},
{"lineNum":"  993","line":"    return indexOfAnyPos(T, slice, 0, values);"},
{"lineNum":"  994","line":"}"},
{"lineNum":"  995","line":""},
{"lineNum":"  996","line":"pub fn lastIndexOfAny(comptime T: type, slice: []const T, values: []const T) ?usize {"},
{"lineNum":"  997","line":"    var i: usize = slice.len;"},
{"lineNum":"  998","line":"    while (i != 0) {"},
{"lineNum":"  999","line":"        i -= 1;"},
{"lineNum":" 1000","line":"        for (values) |value| {"},
{"lineNum":" 1001","line":"            if (slice[i] == value) return i;"},
{"lineNum":" 1002","line":"        }"},
{"lineNum":" 1003","line":"    }"},
{"lineNum":" 1004","line":"    return null;"},
{"lineNum":" 1005","line":"}"},
{"lineNum":" 1006","line":""},
{"lineNum":" 1007","line":"pub fn indexOfAnyPos(comptime T: type, slice: []const T, start_index: usize, values: []const T) ?usize {"},
{"lineNum":" 1008","line":"    var i: usize = start_index;"},
{"lineNum":" 1009","line":"    while (i < slice.len) : (i += 1) {"},
{"lineNum":" 1010","line":"        for (values) |value| {"},
{"lineNum":" 1011","line":"            if (slice[i] == value) return i;"},
{"lineNum":" 1012","line":"        }"},
{"lineNum":" 1013","line":"    }"},
{"lineNum":" 1014","line":"    return null;"},
{"lineNum":" 1015","line":"}"},
{"lineNum":" 1016","line":""},
{"lineNum":" 1017","line":"pub fn indexOf(comptime T: type, haystack: []const T, needle: []const T) ?usize {"},
{"lineNum":" 1018","line":"    return indexOfPos(T, haystack, 0, needle);"},
{"lineNum":" 1019","line":"}"},
{"lineNum":" 1020","line":""},
{"lineNum":" 1021","line":"/// Find the index in a slice of a sub-slice, searching from the end backwards."},
{"lineNum":" 1022","line":"/// To start looking at a different index, slice the haystack first."},
{"lineNum":" 1023","line":"/// Consider using `lastIndexOf` instead of this, which will automatically use a"},
{"lineNum":" 1024","line":"/// more sophisticated algorithm on larger inputs."},
{"lineNum":" 1025","line":"pub fn lastIndexOfLinear(comptime T: type, haystack: []const T, needle: []const T) ?usize {"},
{"lineNum":" 1026","line":"    var i: usize = haystack.len - needle.len;"},
{"lineNum":" 1027","line":"    while (true) : (i -= 1) {"},
{"lineNum":" 1028","line":"        if (mem.eql(T, haystack[i .. i + needle.len], needle)) return i;"},
{"lineNum":" 1029","line":"        if (i == 0) return null;"},
{"lineNum":" 1030","line":"    }"},
{"lineNum":" 1031","line":"}"},
{"lineNum":" 1032","line":""},
{"lineNum":" 1033","line":"/// Consider using `indexOfPos` instead of this, which will automatically use a"},
{"lineNum":" 1034","line":"/// more sophisticated algorithm on larger inputs."},
{"lineNum":" 1035","line":"pub fn indexOfPosLinear(comptime T: type, haystack: []const T, start_index: usize, needle: []const T) ?usize {"},
{"lineNum":" 1036","line":"    var i: usize = start_index;"},
{"lineNum":" 1037","line":"    const end = haystack.len - needle.len;"},
{"lineNum":" 1038","line":"    while (i <= end) : (i += 1) {"},
{"lineNum":" 1039","line":"        if (eql(T, haystack[i .. i + needle.len], needle)) return i;"},
{"lineNum":" 1040","line":"    }"},
{"lineNum":" 1041","line":"    return null;"},
{"lineNum":" 1042","line":"}"},
{"lineNum":" 1043","line":""},
{"lineNum":" 1044","line":"fn boyerMooreHorspoolPreprocessReverse(pattern: []const u8, table: *[256]usize) void {"},
{"lineNum":" 1045","line":"    for (table) |*c| {"},
{"lineNum":" 1046","line":"        c.* = pattern.len;"},
{"lineNum":" 1047","line":"    }"},
{"lineNum":" 1048","line":""},
{"lineNum":" 1049","line":"    var i: usize = pattern.len - 1;"},
{"lineNum":" 1050","line":"    // The first item is intentionally ignored and the skip size will be pattern.len."},
{"lineNum":" 1051","line":"    // This is the standard way Boyer-Moore-Horspool is implemented."},
{"lineNum":" 1052","line":"    while (i > 0) : (i -= 1) {"},
{"lineNum":" 1053","line":"        table[pattern[i]] = i;"},
{"lineNum":" 1054","line":"    }"},
{"lineNum":" 1055","line":"}"},
{"lineNum":" 1056","line":""},
{"lineNum":" 1057","line":"fn boyerMooreHorspoolPreprocess(pattern: []const u8, table: *[256]usize) void {"},
{"lineNum":" 1058","line":"    for (table) |*c| {"},
{"lineNum":" 1059","line":"        c.* = pattern.len;"},
{"lineNum":" 1060","line":"    }"},
{"lineNum":" 1061","line":""},
{"lineNum":" 1062","line":"    var i: usize = 0;"},
{"lineNum":" 1063","line":"    // The last item is intentionally ignored and the skip size will be pattern.len."},
{"lineNum":" 1064","line":"    // This is the standard way Boyer-Moore-Horspool is implemented."},
{"lineNum":" 1065","line":"    while (i < pattern.len - 1) : (i += 1) {"},
{"lineNum":" 1066","line":"        table[pattern[i]] = pattern.len - 1 - i;"},
{"lineNum":" 1067","line":"    }"},
{"lineNum":" 1068","line":"}"},
{"lineNum":" 1069","line":""},
{"lineNum":" 1070","line":"/// Find the index in a slice of a sub-slice, searching from the end backwards."},
{"lineNum":" 1071","line":"/// To start looking at a different index, slice the haystack first."},
{"lineNum":" 1072","line":"/// Uses the Reverse Boyer-Moore-Horspool algorithm on large inputs;"},
{"lineNum":" 1073","line":"/// `lastIndexOfLinear` on small inputs."},
{"lineNum":" 1074","line":"pub fn lastIndexOf(comptime T: type, haystack: []const T, needle: []const T) ?usize {"},
{"lineNum":" 1075","line":"    if (needle.len > haystack.len) return null;"},
{"lineNum":" 1076","line":"    if (needle.len == 0) return haystack.len;"},
{"lineNum":" 1077","line":""},
{"lineNum":" 1078","line":"    if (!meta.trait.hasUniqueRepresentation(T) or haystack.len < 52 or needle.len <= 4)"},
{"lineNum":" 1079","line":"        return lastIndexOfLinear(T, haystack, needle);"},
{"lineNum":" 1080","line":""},
{"lineNum":" 1081","line":"    const haystack_bytes = sliceAsBytes(haystack);"},
{"lineNum":" 1082","line":"    const needle_bytes = sliceAsBytes(needle);"},
{"lineNum":" 1083","line":""},
{"lineNum":" 1084","line":"    var skip_table: [256]usize = undefined;"},
{"lineNum":" 1085","line":"    boyerMooreHorspoolPreprocessReverse(needle_bytes, skip_table[0..]);"},
{"lineNum":" 1086","line":""},
{"lineNum":" 1087","line":"    var i: usize = haystack_bytes.len - needle_bytes.len;"},
{"lineNum":" 1088","line":"    while (true) {"},
{"lineNum":" 1089","line":"        if (i % @sizeOf(T) == 0 and mem.eql(u8, haystack_bytes[i .. i + needle_bytes.len], needle_bytes)) {"},
{"lineNum":" 1090","line":"            return @divExact(i, @sizeOf(T));"},
{"lineNum":" 1091","line":"        }"},
{"lineNum":" 1092","line":"        const skip = skip_table[haystack_bytes[i]];"},
{"lineNum":" 1093","line":"        if (skip > i) break;"},
{"lineNum":" 1094","line":"        i -= skip;"},
{"lineNum":" 1095","line":"    }"},
{"lineNum":" 1096","line":""},
{"lineNum":" 1097","line":"    return null;"},
{"lineNum":" 1098","line":"}"},
{"lineNum":" 1099","line":""},
{"lineNum":" 1100","line":"/// Uses Boyer-Moore-Horspool algorithm on large inputs; `indexOfPosLinear` on small inputs."},
{"lineNum":" 1101","line":"pub fn indexOfPos(comptime T: type, haystack: []const T, start_index: usize, needle: []const T) ?usize {"},
{"lineNum":" 1102","line":"    if (needle.len > haystack.len) return null;"},
{"lineNum":" 1103","line":"    if (needle.len == 0) return start_index;"},
{"lineNum":" 1104","line":""},
{"lineNum":" 1105","line":"    if (!meta.trait.hasUniqueRepresentation(T) or haystack.len < 52 or needle.len <= 4)"},
{"lineNum":" 1106","line":"        return indexOfPosLinear(T, haystack, start_index, needle);"},
{"lineNum":" 1107","line":""},
{"lineNum":" 1108","line":"    const haystack_bytes = sliceAsBytes(haystack);"},
{"lineNum":" 1109","line":"    const needle_bytes = sliceAsBytes(needle);"},
{"lineNum":" 1110","line":""},
{"lineNum":" 1111","line":"    var skip_table: [256]usize = undefined;"},
{"lineNum":" 1112","line":"    boyerMooreHorspoolPreprocess(needle_bytes, skip_table[0..]);"},
{"lineNum":" 1113","line":""},
{"lineNum":" 1114","line":"    var i: usize = start_index * @sizeOf(T);"},
{"lineNum":" 1115","line":"    while (i <= haystack_bytes.len - needle_bytes.len) {"},
{"lineNum":" 1116","line":"        if (i % @sizeOf(T) == 0 and mem.eql(u8, haystack_bytes[i .. i + needle_bytes.len], needle_bytes)) {"},
{"lineNum":" 1117","line":"            return @divExact(i, @sizeOf(T));"},
{"lineNum":" 1118","line":"        }"},
{"lineNum":" 1119","line":"        i += skip_table[haystack_bytes[i + needle_bytes.len - 1]];"},
{"lineNum":" 1120","line":"    }"},
{"lineNum":" 1121","line":""},
{"lineNum":" 1122","line":"    return null;"},
{"lineNum":" 1123","line":"}"},
{"lineNum":" 1124","line":""},
{"lineNum":" 1125","line":"test \"indexOf\" {"},
{"lineNum":" 1126","line":"    try testing.expect(indexOf(u8, \"one two three four five six seven eight nine ten eleven\", \"three four\").? == 8);"},
{"lineNum":" 1127","line":"    try testing.expect(lastIndexOf(u8, \"one two three four five six seven eight nine ten eleven\", \"three four\").? == 8);"},
{"lineNum":" 1128","line":"    try testing.expect(indexOf(u8, \"one two three four five six seven eight nine ten eleven\", \"two two\") == null);"},
{"lineNum":" 1129","line":"    try testing.expect(lastIndexOf(u8, \"one two three four five six seven eight nine ten eleven\", \"two two\") == null);"},
{"lineNum":" 1130","line":""},
{"lineNum":" 1131","line":"    try testing.expect(indexOf(u8, \"one two three four five six seven eight nine ten\", \"\").? == 0);"},
{"lineNum":" 1132","line":"    try testing.expect(lastIndexOf(u8, \"one two three four five six seven eight nine ten\", \"\").? == 48);"},
{"lineNum":" 1133","line":""},
{"lineNum":" 1134","line":"    try testing.expect(indexOf(u8, \"one two three four\", \"four\").? == 14);"},
{"lineNum":" 1135","line":"    try testing.expect(lastIndexOf(u8, \"one two three two four\", \"two\").? == 14);"},
{"lineNum":" 1136","line":"    try testing.expect(indexOf(u8, \"one two three four\", \"gour\") == null);"},
{"lineNum":" 1137","line":"    try testing.expect(lastIndexOf(u8, \"one two three four\", \"gour\") == null);"},
{"lineNum":" 1138","line":"    try testing.expect(indexOf(u8, \"foo\", \"foo\").? == 0);"},
{"lineNum":" 1139","line":"    try testing.expect(lastIndexOf(u8, \"foo\", \"foo\").? == 0);"},
{"lineNum":" 1140","line":"    try testing.expect(indexOf(u8, \"foo\", \"fool\") == null);"},
{"lineNum":" 1141","line":"    try testing.expect(lastIndexOf(u8, \"foo\", \"lfoo\") == null);"},
{"lineNum":" 1142","line":"    try testing.expect(lastIndexOf(u8, \"foo\", \"fool\") == null);"},
{"lineNum":" 1143","line":""},
{"lineNum":" 1144","line":"    try testing.expect(indexOf(u8, \"foo foo\", \"foo\").? == 0);"},
{"lineNum":" 1145","line":"    try testing.expect(lastIndexOf(u8, \"foo foo\", \"foo\").? == 4);"},
{"lineNum":" 1146","line":"    try testing.expect(lastIndexOfAny(u8, \"boo, cat\", \"abo\").? == 6);"},
{"lineNum":" 1147","line":"    try testing.expect(lastIndexOfScalar(u8, \"boo\", \'o\').? == 2);"},
{"lineNum":" 1148","line":"}"},
{"lineNum":" 1149","line":""},
{"lineNum":" 1150","line":"test \"indexOf multibyte\" {"},
{"lineNum":" 1151","line":"    {"},
{"lineNum":" 1152","line":"        // make haystack and needle long enough to trigger Boyer-Moore-Horspool algorithm"},
{"lineNum":" 1153","line":"        const haystack = [1]u16{0} ** 100 ++ [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee, 0x00ff };"},
{"lineNum":" 1154","line":"        const needle = [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee };"},
{"lineNum":" 1155","line":"        try testing.expectEqual(indexOfPos(u16, &haystack, 0, &needle), 100);"},
{"lineNum":" 1156","line":""},
{"lineNum":" 1157","line":"        // check for misaligned false positives (little and big endian)"},
{"lineNum":" 1158","line":"        const needleLE = [_]u16{ 0xbbbb, 0xcccc, 0xdddd, 0xeeee, 0xffff };"},
{"lineNum":" 1159","line":"        try testing.expectEqual(indexOfPos(u16, &haystack, 0, &needleLE), null);"},
{"lineNum":" 1160","line":"        const needleBE = [_]u16{ 0xaacc, 0xbbdd, 0xccee, 0xddff, 0xee00 };"},
{"lineNum":" 1161","line":"        try testing.expectEqual(indexOfPos(u16, &haystack, 0, &needleBE), null);"},
{"lineNum":" 1162","line":"    }"},
{"lineNum":" 1163","line":""},
{"lineNum":" 1164","line":"    {"},
{"lineNum":" 1165","line":"        // make haystack and needle long enough to trigger Boyer-Moore-Horspool algorithm"},
{"lineNum":" 1166","line":"        const haystack = [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee, 0x00ff } ++ [1]u16{0} ** 100;"},
{"lineNum":" 1167","line":"        const needle = [_]u16{ 0xbbaa, 0xccbb, 0xddcc, 0xeedd, 0xffee };"},
{"lineNum":" 1168","line":"        try testing.expectEqual(lastIndexOf(u16, &haystack, &needle), 0);"},
{"lineNum":" 1169","line":""},
{"lineNum":" 1170","line":"        // check for misaligned false positives (little and big endian)"},
{"lineNum":" 1171","line":"        const needleLE = [_]u16{ 0xbbbb, 0xcccc, 0xdddd, 0xeeee, 0xffff };"},
{"lineNum":" 1172","line":"        try testing.expectEqual(lastIndexOf(u16, &haystack, &needleLE), null);"},
{"lineNum":" 1173","line":"        const needleBE = [_]u16{ 0xaacc, 0xbbdd, 0xccee, 0xddff, 0xee00 };"},
{"lineNum":" 1174","line":"        try testing.expectEqual(lastIndexOf(u16, &haystack, &needleBE), null);"},
{"lineNum":" 1175","line":"    }"},
{"lineNum":" 1176","line":"}"},
{"lineNum":" 1177","line":""},
{"lineNum":" 1178","line":"test \"indexOfPos empty needle\" {"},
{"lineNum":" 1179","line":"    try testing.expectEqual(indexOfPos(u8, \"abracadabra\", 5, \"\"), 5);"},
{"lineNum":" 1180","line":"}"},
{"lineNum":" 1181","line":""},
{"lineNum":" 1182","line":"/// Returns the number of needles inside the haystack"},
{"lineNum":" 1183","line":"/// needle.len must be > 0"},
{"lineNum":" 1184","line":"/// does not count overlapping needles"},
{"lineNum":" 1185","line":"pub fn count(comptime T: type, haystack: []const T, needle: []const T) usize {"},
{"lineNum":" 1186","line":"    assert(needle.len > 0);"},
{"lineNum":" 1187","line":"    var i: usize = 0;"},
{"lineNum":" 1188","line":"    var found: usize = 0;"},
{"lineNum":" 1189","line":""},
{"lineNum":" 1190","line":"    while (indexOfPos(T, haystack, i, needle)) |idx| {"},
{"lineNum":" 1191","line":"        i = idx + needle.len;"},
{"lineNum":" 1192","line":"        found += 1;"},
{"lineNum":" 1193","line":"    }"},
{"lineNum":" 1194","line":""},
{"lineNum":" 1195","line":"    return found;"},
{"lineNum":" 1196","line":"}"},
{"lineNum":" 1197","line":""},
{"lineNum":" 1198","line":"test \"count\" {"},
{"lineNum":" 1199","line":"    try testing.expect(count(u8, \"\", \"h\") == 0);"},
{"lineNum":" 1200","line":"    try testing.expect(count(u8, \"h\", \"h\") == 1);"},
{"lineNum":" 1201","line":"    try testing.expect(count(u8, \"hh\", \"h\") == 2);"},
{"lineNum":" 1202","line":"    try testing.expect(count(u8, \"world!\", \"hello\") == 0);"},
{"lineNum":" 1203","line":"    try testing.expect(count(u8, \"hello world!\", \"hello\") == 1);"},
{"lineNum":" 1204","line":"    try testing.expect(count(u8, \"   abcabc   abc\", \"abc\") == 3);"},
{"lineNum":" 1205","line":"    try testing.expect(count(u8, \"udexdcbvbruhasdrw\", \"bruh\") == 1);"},
{"lineNum":" 1206","line":"    try testing.expect(count(u8, \"foo bar\", \"o bar\") == 1);"},
{"lineNum":" 1207","line":"    try testing.expect(count(u8, \"foofoofoo\", \"foo\") == 3);"},
{"lineNum":" 1208","line":"    try testing.expect(count(u8, \"fffffff\", \"ff\") == 3);"},
{"lineNum":" 1209","line":"    try testing.expect(count(u8, \"owowowu\", \"owowu\") == 1);"},
{"lineNum":" 1210","line":"}"},
{"lineNum":" 1211","line":""},
{"lineNum":" 1212","line":"/// Returns true if the haystack contains expected_count or more needles"},
{"lineNum":" 1213","line":"/// needle.len must be > 0"},
{"lineNum":" 1214","line":"/// does not count overlapping needles"},
{"lineNum":" 1215","line":"pub fn containsAtLeast(comptime T: type, haystack: []const T, expected_count: usize, needle: []const T) bool {"},
{"lineNum":" 1216","line":"    assert(needle.len > 0);"},
{"lineNum":" 1217","line":"    if (expected_count == 0) return true;"},
{"lineNum":" 1218","line":""},
{"lineNum":" 1219","line":"    var i: usize = 0;"},
{"lineNum":" 1220","line":"    var found: usize = 0;"},
{"lineNum":" 1221","line":""},
{"lineNum":" 1222","line":"    while (indexOfPos(T, haystack, i, needle)) |idx| {"},
{"lineNum":" 1223","line":"        i = idx + needle.len;"},
{"lineNum":" 1224","line":"        found += 1;"},
{"lineNum":" 1225","line":"        if (found == expected_count) return true;"},
{"lineNum":" 1226","line":"    }"},
{"lineNum":" 1227","line":"    return false;"},
{"lineNum":" 1228","line":"}"},
{"lineNum":" 1229","line":""},
{"lineNum":" 1230","line":"test \"containsAtLeast\" {"},
{"lineNum":" 1231","line":"    try testing.expect(containsAtLeast(u8, \"aa\", 0, \"a\"));"},
{"lineNum":" 1232","line":"    try testing.expect(containsAtLeast(u8, \"aa\", 1, \"a\"));"},
{"lineNum":" 1233","line":"    try testing.expect(containsAtLeast(u8, \"aa\", 2, \"a\"));"},
{"lineNum":" 1234","line":"    try testing.expect(!containsAtLeast(u8, \"aa\", 3, \"a\"));"},
{"lineNum":" 1235","line":""},
{"lineNum":" 1236","line":"    try testing.expect(containsAtLeast(u8, \"radaradar\", 1, \"radar\"));"},
{"lineNum":" 1237","line":"    try testing.expect(!containsAtLeast(u8, \"radaradar\", 2, \"radar\"));"},
{"lineNum":" 1238","line":""},
{"lineNum":" 1239","line":"    try testing.expect(containsAtLeast(u8, \"radarradaradarradar\", 3, \"radar\"));"},
{"lineNum":" 1240","line":"    try testing.expect(!containsAtLeast(u8, \"radarradaradarradar\", 4, \"radar\"));"},
{"lineNum":" 1241","line":""},
{"lineNum":" 1242","line":"    try testing.expect(containsAtLeast(u8, \"   radar      radar   \", 2, \"radar\"));"},
{"lineNum":" 1243","line":"    try testing.expect(!containsAtLeast(u8, \"   radar      radar   \", 3, \"radar\"));"},
{"lineNum":" 1244","line":"}"},
{"lineNum":" 1245","line":""},
{"lineNum":" 1246","line":"/// Reads an integer from memory with size equal to bytes.len."},
{"lineNum":" 1247","line":"/// T specifies the return type, which must be large enough to store"},
{"lineNum":" 1248","line":"/// the result."},
{"lineNum":" 1249","line":"pub fn readVarInt(comptime ReturnType: type, bytes: []const u8, endian: Endian) ReturnType {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1250","line":"    var result: ReturnType = 0;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1251","line":"    switch (endian) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1252","line":"        .Big => {"},
{"lineNum":" 1253","line":"            for (bytes) |b| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1254","line":"                result = (result << 8) | b;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1255","line":"            }"},
{"lineNum":" 1256","line":"        },"},
{"lineNum":" 1257","line":"        .Little => {"},
{"lineNum":" 1258","line":"            const ShiftType = math.Log2Int(ReturnType);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1259","line":"            for (bytes, 0..) |b, index| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1260","line":"                result = result | (@as(ReturnType, b) << @intCast(ShiftType, index * 8));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1261","line":"            }"},
{"lineNum":" 1262","line":"        },"},
{"lineNum":" 1263","line":"    }"},
{"lineNum":" 1264","line":"    return result;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1265","line":"}"},
{"lineNum":" 1266","line":""},
{"lineNum":" 1267","line":"/// Loads an integer from packed memory with provided bit_count, bit_offset, and signedness."},
{"lineNum":" 1268","line":"/// Asserts that T is large enough to store the read value."},
{"lineNum":" 1269","line":"///"},
{"lineNum":" 1270","line":"/// Example:"},
{"lineNum":" 1271","line":"///     const T = packed struct(u16){ a: u3, b: u7, c: u6 };"},
{"lineNum":" 1272","line":"///     var st = T{ .a = 1, .b = 2, .c = 4 };"},
{"lineNum":" 1273","line":"///     const b_field = readVarPackedInt(u64, std.mem.asBytes(&st), @bitOffsetOf(T, \"b\"), 7, builtin.cpu.arch.endian(), .unsigned);"},
{"lineNum":" 1274","line":"///"},
{"lineNum":" 1275","line":"pub fn readVarPackedInt("},
{"lineNum":" 1276","line":"    comptime T: type,"},
{"lineNum":" 1277","line":"    bytes: []const u8,"},
{"lineNum":" 1278","line":"    bit_offset: usize,"},
{"lineNum":" 1279","line":"    bit_count: usize,"},
{"lineNum":" 1280","line":"    endian: std.builtin.Endian,"},
{"lineNum":" 1281","line":"    signedness: std.builtin.Signedness,"},
{"lineNum":" 1282","line":") T {"},
{"lineNum":" 1283","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1284","line":"    const iN = std.meta.Int(.signed, @bitSizeOf(T));"},
{"lineNum":" 1285","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1286","line":""},
{"lineNum":" 1287","line":"    const read_size = (bit_count + (bit_offset % 8) + 7) / 8;"},
{"lineNum":" 1288","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1289","line":"    const pad = @intCast(Log2N, @bitSizeOf(T) - bit_count);"},
{"lineNum":" 1290","line":""},
{"lineNum":" 1291","line":"    const lowest_byte = switch (endian) {"},
{"lineNum":" 1292","line":"        .Big => bytes.len - (bit_offset / 8) - read_size,"},
{"lineNum":" 1293","line":"        .Little => bit_offset / 8,"},
{"lineNum":" 1294","line":"    };"},
{"lineNum":" 1295","line":"    const read_bytes = bytes[lowest_byte..][0..read_size];"},
{"lineNum":" 1296","line":""},
{"lineNum":" 1297","line":"    if (@bitSizeOf(T) <= 8) {"},
{"lineNum":" 1298","line":"        // These are the same shifts/masks we perform below, but adds `@truncate`/`@intCast`"},
{"lineNum":" 1299","line":"        // where needed since int is smaller than a byte."},
{"lineNum":" 1300","line":"        const value = if (read_size == 1) b: {"},
{"lineNum":" 1301","line":"            break :b @truncate(uN, read_bytes[0] >> bit_shift);"},
{"lineNum":" 1302","line":"        } else b: {"},
{"lineNum":" 1303","line":"            const i: u1 = @boolToInt(endian == .Big);"},
{"lineNum":" 1304","line":"            const head = @truncate(uN, read_bytes[i] >> bit_shift);"},
{"lineNum":" 1305","line":"            const tail_shift = @intCast(Log2N, @as(u4, 8) - bit_shift);"},
{"lineNum":" 1306","line":"            const tail = @truncate(uN, read_bytes[1 - i]);"},
{"lineNum":" 1307","line":"            break :b (tail << tail_shift) | head;"},
{"lineNum":" 1308","line":"        };"},
{"lineNum":" 1309","line":"        switch (signedness) {"},
{"lineNum":" 1310","line":"            .signed => return @intCast(T, (@bitCast(iN, value) << pad) >> pad),"},
{"lineNum":" 1311","line":"            .unsigned => return @intCast(T, (@bitCast(uN, value) << pad) >> pad),"},
{"lineNum":" 1312","line":"        }"},
{"lineNum":" 1313","line":"    }"},
{"lineNum":" 1314","line":""},
{"lineNum":" 1315","line":"    // Copy the value out (respecting endianness), accounting for bit_shift"},
{"lineNum":" 1316","line":"    var int: uN = 0;"},
{"lineNum":" 1317","line":"    switch (endian) {"},
{"lineNum":" 1318","line":"        .Big => {"},
{"lineNum":" 1319","line":"            for (read_bytes[0 .. read_size - 1]) |elem| {"},
{"lineNum":" 1320","line":"                int = elem | (int << 8);"},
{"lineNum":" 1321","line":"            }"},
{"lineNum":" 1322","line":"            int = (read_bytes[read_size - 1] >> bit_shift) | (int << (@as(u4, 8) - bit_shift));"},
{"lineNum":" 1323","line":"        },"},
{"lineNum":" 1324","line":"        .Little => {"},
{"lineNum":" 1325","line":"            int = read_bytes[0] >> bit_shift;"},
{"lineNum":" 1326","line":"            for (read_bytes[1..], 0..) |elem, i| {"},
{"lineNum":" 1327","line":"                int |= (@as(uN, elem) << @intCast(Log2N, (8 * (i + 1) - bit_shift)));"},
{"lineNum":" 1328","line":"            }"},
{"lineNum":" 1329","line":"        },"},
{"lineNum":" 1330","line":"    }"},
{"lineNum":" 1331","line":"    switch (signedness) {"},
{"lineNum":" 1332","line":"        .signed => return @intCast(T, (@bitCast(iN, int) << pad) >> pad),"},
{"lineNum":" 1333","line":"        .unsigned => return @intCast(T, (@bitCast(uN, int) << pad) >> pad),"},
{"lineNum":" 1334","line":"    }"},
{"lineNum":" 1335","line":"}"},
{"lineNum":" 1336","line":""},
{"lineNum":" 1337","line":"/// Reads an integer from memory with bit count specified by T."},
{"lineNum":" 1338","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1339","line":"/// This function cannot fail and cannot cause undefined behavior."},
{"lineNum":" 1340","line":"/// Assumes the endianness of memory is native. This means the function can"},
{"lineNum":" 1341","line":"/// simply pointer cast memory."},
{"lineNum":" 1342","line":"pub fn readIntNative(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {","class":"linePartCov","hits":"1","order":"995","possible_hits":"6",},
{"lineNum":" 1343","line":"    return @ptrCast(*align(1) const T, bytes).*;","class":"linePartCov","hits":"1","order":"996","possible_hits":"6",},
{"lineNum":" 1344","line":"}"},
{"lineNum":" 1345","line":""},
{"lineNum":" 1346","line":"/// Reads an integer from memory with bit count specified by T."},
{"lineNum":" 1347","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1348","line":"/// This function cannot fail and cannot cause undefined behavior."},
{"lineNum":" 1349","line":"/// Assumes the endianness of memory is foreign, so it must byte-swap."},
{"lineNum":" 1350","line":"pub fn readIntForeign(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8) T {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1351","line":"    return @byteSwap(readIntNative(T, bytes));","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1352","line":"}"},
{"lineNum":" 1353","line":""},
{"lineNum":" 1354","line":"pub const readIntLittle = switch (native_endian) {"},
{"lineNum":" 1355","line":"    .Little => readIntNative,"},
{"lineNum":" 1356","line":"    .Big => readIntForeign,"},
{"lineNum":" 1357","line":"};"},
{"lineNum":" 1358","line":""},
{"lineNum":" 1359","line":"pub const readIntBig = switch (native_endian) {"},
{"lineNum":" 1360","line":"    .Little => readIntForeign,"},
{"lineNum":" 1361","line":"    .Big => readIntNative,"},
{"lineNum":" 1362","line":"};"},
{"lineNum":" 1363","line":""},
{"lineNum":" 1364","line":"/// Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0"},
{"lineNum":" 1365","line":"/// and ignores extra bytes."},
{"lineNum":" 1366","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1367","line":"/// Assumes the endianness of memory is native. This means the function can"},
{"lineNum":" 1368","line":"/// simply pointer cast memory."},
{"lineNum":" 1369","line":"pub fn readIntSliceNative(comptime T: type, bytes: []const u8) T {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1370","line":"    const n = @divExact(@typeInfo(T).Int.bits, 8);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1371","line":"    assert(bytes.len >= n);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1372","line":"    return readIntNative(T, bytes[0..n]);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1373","line":"}"},
{"lineNum":" 1374","line":""},
{"lineNum":" 1375","line":"/// Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0"},
{"lineNum":" 1376","line":"/// and ignores extra bytes."},
{"lineNum":" 1377","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1378","line":"/// Assumes the endianness of memory is foreign, so it must byte-swap."},
{"lineNum":" 1379","line":"pub fn readIntSliceForeign(comptime T: type, bytes: []const u8) T {"},
{"lineNum":" 1380","line":"    return @byteSwap(readIntSliceNative(T, bytes));"},
{"lineNum":" 1381","line":"}"},
{"lineNum":" 1382","line":""},
{"lineNum":" 1383","line":"pub const readIntSliceLittle = switch (native_endian) {"},
{"lineNum":" 1384","line":"    .Little => readIntSliceNative,"},
{"lineNum":" 1385","line":"    .Big => readIntSliceForeign,"},
{"lineNum":" 1386","line":"};"},
{"lineNum":" 1387","line":""},
{"lineNum":" 1388","line":"pub const readIntSliceBig = switch (native_endian) {"},
{"lineNum":" 1389","line":"    .Little => readIntSliceForeign,"},
{"lineNum":" 1390","line":"    .Big => readIntSliceNative,"},
{"lineNum":" 1391","line":"};"},
{"lineNum":" 1392","line":""},
{"lineNum":" 1393","line":"/// Reads an integer from memory with bit count specified by T."},
{"lineNum":" 1394","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1395","line":"/// This function cannot fail and cannot cause undefined behavior."},
{"lineNum":" 1396","line":"pub fn readInt(comptime T: type, bytes: *const [@divExact(@typeInfo(T).Int.bits, 8)]u8, endian: Endian) T {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1397","line":"    if (endian == native_endian) {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1398","line":"        return readIntNative(T, bytes);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1399","line":"    } else {"},
{"lineNum":" 1400","line":"        return readIntForeign(T, bytes);","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":" 1401","line":"    }"},
{"lineNum":" 1402","line":"}"},
{"lineNum":" 1403","line":""},
{"lineNum":" 1404","line":"fn readPackedIntLittle(comptime T: type, bytes: []const u8, bit_offset: usize) T {"},
{"lineNum":" 1405","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1406","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1407","line":""},
{"lineNum":" 1408","line":"    const bit_count = @as(usize, @bitSizeOf(T));"},
{"lineNum":" 1409","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1410","line":""},
{"lineNum":" 1411","line":"    const load_size = (bit_count + 7) / 8;"},
{"lineNum":" 1412","line":"    const load_tail_bits = @intCast(u3, (load_size * 8) - bit_count);"},
{"lineNum":" 1413","line":"    const LoadInt = std.meta.Int(.unsigned, load_size * 8);"},
{"lineNum":" 1414","line":""},
{"lineNum":" 1415","line":"    if (bit_count == 0)"},
{"lineNum":" 1416","line":"        return 0;"},
{"lineNum":" 1417","line":""},
{"lineNum":" 1418","line":"    // Read by loading a LoadInt, and then follow it up with a 1-byte read"},
{"lineNum":" 1419","line":"    // of the tail if bit_offset pushed us over a byte boundary."},
{"lineNum":" 1420","line":"    const read_bytes = bytes[bit_offset / 8 ..];"},
{"lineNum":" 1421","line":"    const val = @truncate(uN, readIntLittle(LoadInt, read_bytes[0..load_size]) >> bit_shift);"},
{"lineNum":" 1422","line":"    if (bit_shift > load_tail_bits) {"},
{"lineNum":" 1423","line":"        const tail_bits = @intCast(Log2N, bit_shift - load_tail_bits);"},
{"lineNum":" 1424","line":"        const tail_byte = read_bytes[load_size];"},
{"lineNum":" 1425","line":"        const tail_truncated = if (bit_count < 8) @truncate(uN, tail_byte) else @as(uN, tail_byte);"},
{"lineNum":" 1426","line":"        return @bitCast(T, val | (tail_truncated << (@truncate(Log2N, bit_count) -% tail_bits)));"},
{"lineNum":" 1427","line":"    } else return @bitCast(T, val);"},
{"lineNum":" 1428","line":"}"},
{"lineNum":" 1429","line":""},
{"lineNum":" 1430","line":"fn readPackedIntBig(comptime T: type, bytes: []const u8, bit_offset: usize) T {"},
{"lineNum":" 1431","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1432","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1433","line":""},
{"lineNum":" 1434","line":"    const bit_count = @as(usize, @bitSizeOf(T));"},
{"lineNum":" 1435","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1436","line":"    const byte_count = (@as(usize, bit_shift) + bit_count + 7) / 8;"},
{"lineNum":" 1437","line":""},
{"lineNum":" 1438","line":"    const load_size = (bit_count + 7) / 8;"},
{"lineNum":" 1439","line":"    const load_tail_bits = @intCast(u3, (load_size * 8) - bit_count);"},
{"lineNum":" 1440","line":"    const LoadInt = std.meta.Int(.unsigned, load_size * 8);"},
{"lineNum":" 1441","line":""},
{"lineNum":" 1442","line":"    if (bit_count == 0)"},
{"lineNum":" 1443","line":"        return 0;"},
{"lineNum":" 1444","line":""},
{"lineNum":" 1445","line":"    // Read by loading a LoadInt, and then follow it up with a 1-byte read"},
{"lineNum":" 1446","line":"    // of the tail if bit_offset pushed us over a byte boundary."},
{"lineNum":" 1447","line":"    const end = bytes.len - (bit_offset / 8);"},
{"lineNum":" 1448","line":"    const read_bytes = bytes[(end - byte_count)..end];"},
{"lineNum":" 1449","line":"    const val = @truncate(uN, readIntBig(LoadInt, bytes[(end - load_size)..end][0..load_size]) >> bit_shift);"},
{"lineNum":" 1450","line":"    if (bit_shift > load_tail_bits) {"},
{"lineNum":" 1451","line":"        const tail_bits = @intCast(Log2N, bit_shift - load_tail_bits);"},
{"lineNum":" 1452","line":"        const tail_byte = if (bit_count < 8) @truncate(uN, read_bytes[0]) else @as(uN, read_bytes[0]);"},
{"lineNum":" 1453","line":"        return @bitCast(T, val | (tail_byte << (@truncate(Log2N, bit_count) -% tail_bits)));"},
{"lineNum":" 1454","line":"    } else return @bitCast(T, val);"},
{"lineNum":" 1455","line":"}"},
{"lineNum":" 1456","line":""},
{"lineNum":" 1457","line":"pub const readPackedIntNative = switch (native_endian) {"},
{"lineNum":" 1458","line":"    .Little => readPackedIntLittle,"},
{"lineNum":" 1459","line":"    .Big => readPackedIntBig,"},
{"lineNum":" 1460","line":"};"},
{"lineNum":" 1461","line":""},
{"lineNum":" 1462","line":"pub const readPackedIntForeign = switch (native_endian) {"},
{"lineNum":" 1463","line":"    .Little => readPackedIntBig,"},
{"lineNum":" 1464","line":"    .Big => readPackedIntLittle,"},
{"lineNum":" 1465","line":"};"},
{"lineNum":" 1466","line":""},
{"lineNum":" 1467","line":"/// Loads an integer from packed memory."},
{"lineNum":" 1468","line":"/// Asserts that buffer contains at least bit_offset + @bitSizeOf(T) bits."},
{"lineNum":" 1469","line":"///"},
{"lineNum":" 1470","line":"/// Example:"},
{"lineNum":" 1471","line":"///     const T = packed struct(u16){ a: u3, b: u7, c: u6 };"},
{"lineNum":" 1472","line":"///     var st = T{ .a = 1, .b = 2, .c = 4 };"},
{"lineNum":" 1473","line":"///     const b_field = readPackedInt(u7, std.mem.asBytes(&st), @bitOffsetOf(T, \"b\"), builtin.cpu.arch.endian());"},
{"lineNum":" 1474","line":"///"},
{"lineNum":" 1475","line":"pub fn readPackedInt(comptime T: type, bytes: []const u8, bit_offset: usize, endian: Endian) T {"},
{"lineNum":" 1476","line":"    switch (endian) {"},
{"lineNum":" 1477","line":"        .Little => return readPackedIntLittle(T, bytes, bit_offset),"},
{"lineNum":" 1478","line":"        .Big => return readPackedIntBig(T, bytes, bit_offset),"},
{"lineNum":" 1479","line":"    }"},
{"lineNum":" 1480","line":"}"},
{"lineNum":" 1481","line":""},
{"lineNum":" 1482","line":"/// Asserts that bytes.len >= @typeInfo(T).Int.bits / 8. Reads the integer starting from index 0"},
{"lineNum":" 1483","line":"/// and ignores extra bytes."},
{"lineNum":" 1484","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1485","line":"pub fn readIntSlice(comptime T: type, bytes: []const u8, endian: Endian) T {"},
{"lineNum":" 1486","line":"    const n = @divExact(@typeInfo(T).Int.bits, 8);"},
{"lineNum":" 1487","line":"    assert(bytes.len >= n);"},
{"lineNum":" 1488","line":"    return readInt(T, bytes[0..n], endian);"},
{"lineNum":" 1489","line":"}"},
{"lineNum":" 1490","line":""},
{"lineNum":" 1491","line":"test \"comptime read/write int\" {"},
{"lineNum":" 1492","line":"    comptime {"},
{"lineNum":" 1493","line":"        var bytes: [2]u8 = undefined;"},
{"lineNum":" 1494","line":"        writeIntLittle(u16, &bytes, 0x1234);"},
{"lineNum":" 1495","line":"        const result = readIntBig(u16, &bytes);"},
{"lineNum":" 1496","line":"        try testing.expect(result == 0x3412);"},
{"lineNum":" 1497","line":"    }"},
{"lineNum":" 1498","line":"    comptime {"},
{"lineNum":" 1499","line":"        var bytes: [2]u8 = undefined;"},
{"lineNum":" 1500","line":"        writeIntBig(u16, &bytes, 0x1234);"},
{"lineNum":" 1501","line":"        const result = readIntLittle(u16, &bytes);"},
{"lineNum":" 1502","line":"        try testing.expect(result == 0x3412);"},
{"lineNum":" 1503","line":"    }"},
{"lineNum":" 1504","line":"}"},
{"lineNum":" 1505","line":""},
{"lineNum":" 1506","line":"test \"readIntBig and readIntLittle\" {"},
{"lineNum":" 1507","line":"    try testing.expect(readIntSliceBig(u0, &[_]u8{}) == 0x0);"},
{"lineNum":" 1508","line":"    try testing.expect(readIntSliceLittle(u0, &[_]u8{}) == 0x0);"},
{"lineNum":" 1509","line":""},
{"lineNum":" 1510","line":"    try testing.expect(readIntSliceBig(u8, &[_]u8{0x32}) == 0x32);"},
{"lineNum":" 1511","line":"    try testing.expect(readIntSliceLittle(u8, &[_]u8{0x12}) == 0x12);"},
{"lineNum":" 1512","line":""},
{"lineNum":" 1513","line":"    try testing.expect(readIntSliceBig(u16, &[_]u8{ 0x12, 0x34 }) == 0x1234);"},
{"lineNum":" 1514","line":"    try testing.expect(readIntSliceLittle(u16, &[_]u8{ 0x12, 0x34 }) == 0x3412);"},
{"lineNum":" 1515","line":""},
{"lineNum":" 1516","line":"    try testing.expect(readIntSliceBig(u72, &[_]u8{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x24 }) == 0x123456789abcdef024);"},
{"lineNum":" 1517","line":"    try testing.expect(readIntSliceLittle(u72, &[_]u8{ 0xec, 0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe }) == 0xfedcba9876543210ec);"},
{"lineNum":" 1518","line":""},
{"lineNum":" 1519","line":"    try testing.expect(readIntSliceBig(i8, &[_]u8{0xff}) == -1);"},
{"lineNum":" 1520","line":"    try testing.expect(readIntSliceLittle(i8, &[_]u8{0xfe}) == -2);"},
{"lineNum":" 1521","line":""},
{"lineNum":" 1522","line":"    try testing.expect(readIntSliceBig(i16, &[_]u8{ 0xff, 0xfd }) == -3);"},
{"lineNum":" 1523","line":"    try testing.expect(readIntSliceLittle(i16, &[_]u8{ 0xfc, 0xff }) == -4);"},
{"lineNum":" 1524","line":"}"},
{"lineNum":" 1525","line":""},
{"lineNum":" 1526","line":"/// Writes an integer to memory, storing it in twos-complement."},
{"lineNum":" 1527","line":"/// This function always succeeds, has defined behavior for all inputs, and"},
{"lineNum":" 1528","line":"/// accepts any integer bit width."},
{"lineNum":" 1529","line":"/// This function stores in native endian, which means it is implemented as a simple"},
{"lineNum":" 1530","line":"/// memory store."},
{"lineNum":" 1531","line":"pub fn writeIntNative(comptime T: type, buf: *[(@typeInfo(T).Int.bits + 7) / 8]u8, value: T) void {"},
{"lineNum":" 1532","line":"    @ptrCast(*align(1) T, buf).* = value;"},
{"lineNum":" 1533","line":"}"},
{"lineNum":" 1534","line":""},
{"lineNum":" 1535","line":"/// Writes an integer to memory, storing it in twos-complement."},
{"lineNum":" 1536","line":"/// This function always succeeds, has defined behavior for all inputs, but"},
{"lineNum":" 1537","line":"/// the integer bit width must be divisible by 8."},
{"lineNum":" 1538","line":"/// This function stores in foreign endian, which means it does a @byteSwap first."},
{"lineNum":" 1539","line":"pub fn writeIntForeign(comptime T: type, buf: *[@divExact(@typeInfo(T).Int.bits, 8)]u8, value: T) void {"},
{"lineNum":" 1540","line":"    writeIntNative(T, buf, @byteSwap(value));"},
{"lineNum":" 1541","line":"}"},
{"lineNum":" 1542","line":""},
{"lineNum":" 1543","line":"pub const writeIntLittle = switch (native_endian) {"},
{"lineNum":" 1544","line":"    .Little => writeIntNative,"},
{"lineNum":" 1545","line":"    .Big => writeIntForeign,"},
{"lineNum":" 1546","line":"};"},
{"lineNum":" 1547","line":""},
{"lineNum":" 1548","line":"pub const writeIntBig = switch (native_endian) {"},
{"lineNum":" 1549","line":"    .Little => writeIntForeign,"},
{"lineNum":" 1550","line":"    .Big => writeIntNative,"},
{"lineNum":" 1551","line":"};"},
{"lineNum":" 1552","line":""},
{"lineNum":" 1553","line":"/// Writes an integer to memory, storing it in twos-complement."},
{"lineNum":" 1554","line":"/// This function always succeeds, has defined behavior for all inputs, but"},
{"lineNum":" 1555","line":"/// the integer bit width must be divisible by 8."},
{"lineNum":" 1556","line":"pub fn writeInt(comptime T: type, buffer: *[@divExact(@typeInfo(T).Int.bits, 8)]u8, value: T, endian: Endian) void {"},
{"lineNum":" 1557","line":"    if (endian == native_endian) {"},
{"lineNum":" 1558","line":"        return writeIntNative(T, buffer, value);"},
{"lineNum":" 1559","line":"    } else {"},
{"lineNum":" 1560","line":"        return writeIntForeign(T, buffer, value);"},
{"lineNum":" 1561","line":"    }"},
{"lineNum":" 1562","line":"}"},
{"lineNum":" 1563","line":""},
{"lineNum":" 1564","line":"pub fn writePackedIntLittle(comptime T: type, bytes: []u8, bit_offset: usize, value: T) void {"},
{"lineNum":" 1565","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1566","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1567","line":""},
{"lineNum":" 1568","line":"    const bit_count = @as(usize, @bitSizeOf(T));"},
{"lineNum":" 1569","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1570","line":""},
{"lineNum":" 1571","line":"    const store_size = (@bitSizeOf(T) + 7) / 8;"},
{"lineNum":" 1572","line":"    const store_tail_bits = @intCast(u3, (store_size * 8) - bit_count);"},
{"lineNum":" 1573","line":"    const StoreInt = std.meta.Int(.unsigned, store_size * 8);"},
{"lineNum":" 1574","line":""},
{"lineNum":" 1575","line":"    if (bit_count == 0)"},
{"lineNum":" 1576","line":"        return;"},
{"lineNum":" 1577","line":""},
{"lineNum":" 1578","line":"    // Write by storing a StoreInt, and then follow it up with a 1-byte tail"},
{"lineNum":" 1579","line":"    // if bit_offset pushed us over a byte boundary."},
{"lineNum":" 1580","line":"    const write_bytes = bytes[bit_offset / 8 ..];"},
{"lineNum":" 1581","line":"    const head = write_bytes[0] & ((@as(u8, 1) << bit_shift) - 1);"},
{"lineNum":" 1582","line":""},
{"lineNum":" 1583","line":"    var write_value = (@as(StoreInt, @bitCast(uN, value)) << bit_shift) | @intCast(StoreInt, head);"},
{"lineNum":" 1584","line":"    if (bit_shift > store_tail_bits) {"},
{"lineNum":" 1585","line":"        const tail_len = @intCast(Log2N, bit_shift - store_tail_bits);"},
{"lineNum":" 1586","line":"        write_bytes[store_size] &= ~((@as(u8, 1) << @intCast(u3, tail_len)) - 1);"},
{"lineNum":" 1587","line":"        write_bytes[store_size] |= @intCast(u8, (@bitCast(uN, value) >> (@truncate(Log2N, bit_count) -% tail_len)));"},
{"lineNum":" 1588","line":"    } else if (bit_shift < store_tail_bits) {"},
{"lineNum":" 1589","line":"        const tail_len = store_tail_bits - bit_shift;"},
{"lineNum":" 1590","line":"        const tail = write_bytes[store_size - 1] & (@as(u8, 0xfe) << (7 - tail_len));"},
{"lineNum":" 1591","line":"        write_value |= @as(StoreInt, tail) << (8 * (store_size - 1));"},
{"lineNum":" 1592","line":"    }"},
{"lineNum":" 1593","line":""},
{"lineNum":" 1594","line":"    writeIntLittle(StoreInt, write_bytes[0..store_size], write_value);"},
{"lineNum":" 1595","line":"}"},
{"lineNum":" 1596","line":""},
{"lineNum":" 1597","line":"pub fn writePackedIntBig(comptime T: type, bytes: []u8, bit_offset: usize, value: T) void {"},
{"lineNum":" 1598","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1599","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1600","line":""},
{"lineNum":" 1601","line":"    const bit_count = @as(usize, @bitSizeOf(T));"},
{"lineNum":" 1602","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1603","line":"    const byte_count = (bit_shift + bit_count + 7) / 8;"},
{"lineNum":" 1604","line":""},
{"lineNum":" 1605","line":"    const store_size = (@bitSizeOf(T) + 7) / 8;"},
{"lineNum":" 1606","line":"    const store_tail_bits = @intCast(u3, (store_size * 8) - bit_count);"},
{"lineNum":" 1607","line":"    const StoreInt = std.meta.Int(.unsigned, store_size * 8);"},
{"lineNum":" 1608","line":""},
{"lineNum":" 1609","line":"    if (bit_count == 0)"},
{"lineNum":" 1610","line":"        return;"},
{"lineNum":" 1611","line":""},
{"lineNum":" 1612","line":"    // Write by storing a StoreInt, and then follow it up with a 1-byte tail"},
{"lineNum":" 1613","line":"    // if bit_offset pushed us over a byte boundary."},
{"lineNum":" 1614","line":"    const end = bytes.len - (bit_offset / 8);"},
{"lineNum":" 1615","line":"    const write_bytes = bytes[(end - byte_count)..end];"},
{"lineNum":" 1616","line":"    const head = write_bytes[byte_count - 1] & ((@as(u8, 1) << bit_shift) - 1);"},
{"lineNum":" 1617","line":""},
{"lineNum":" 1618","line":"    var write_value = (@as(StoreInt, @bitCast(uN, value)) << bit_shift) | @intCast(StoreInt, head);"},
{"lineNum":" 1619","line":"    if (bit_shift > store_tail_bits) {"},
{"lineNum":" 1620","line":"        const tail_len = @intCast(Log2N, bit_shift - store_tail_bits);"},
{"lineNum":" 1621","line":"        write_bytes[0] &= ~((@as(u8, 1) << @intCast(u3, tail_len)) - 1);"},
{"lineNum":" 1622","line":"        write_bytes[0] |= @intCast(u8, (@bitCast(uN, value) >> (@truncate(Log2N, bit_count) -% tail_len)));"},
{"lineNum":" 1623","line":"    } else if (bit_shift < store_tail_bits) {"},
{"lineNum":" 1624","line":"        const tail_len = store_tail_bits - bit_shift;"},
{"lineNum":" 1625","line":"        const tail = write_bytes[0] & (@as(u8, 0xfe) << (7 - tail_len));"},
{"lineNum":" 1626","line":"        write_value |= @as(StoreInt, tail) << (8 * (store_size - 1));"},
{"lineNum":" 1627","line":"    }"},
{"lineNum":" 1628","line":""},
{"lineNum":" 1629","line":"    writeIntBig(StoreInt, write_bytes[(byte_count - store_size)..][0..store_size], write_value);"},
{"lineNum":" 1630","line":"}"},
{"lineNum":" 1631","line":""},
{"lineNum":" 1632","line":"pub const writePackedIntNative = switch (native_endian) {"},
{"lineNum":" 1633","line":"    .Little => writePackedIntLittle,"},
{"lineNum":" 1634","line":"    .Big => writePackedIntBig,"},
{"lineNum":" 1635","line":"};"},
{"lineNum":" 1636","line":""},
{"lineNum":" 1637","line":"pub const writePackedIntForeign = switch (native_endian) {"},
{"lineNum":" 1638","line":"    .Little => writePackedIntBig,"},
{"lineNum":" 1639","line":"    .Big => writePackedIntLittle,"},
{"lineNum":" 1640","line":"};"},
{"lineNum":" 1641","line":""},
{"lineNum":" 1642","line":"/// Stores an integer to packed memory."},
{"lineNum":" 1643","line":"/// Asserts that buffer contains at least bit_offset + @bitSizeOf(T) bits."},
{"lineNum":" 1644","line":"///"},
{"lineNum":" 1645","line":"/// Example:"},
{"lineNum":" 1646","line":"///     const T = packed struct(u16){ a: u3, b: u7, c: u6 };"},
{"lineNum":" 1647","line":"///     var st = T{ .a = 1, .b = 2, .c = 4 };"},
{"lineNum":" 1648","line":"///     // st.b = 0x7f;"},
{"lineNum":" 1649","line":"///     writePackedInt(u7, std.mem.asBytes(&st), @bitOffsetOf(T, \"b\"), 0x7f, builtin.cpu.arch.endian());"},
{"lineNum":" 1650","line":"///"},
{"lineNum":" 1651","line":"pub fn writePackedInt(comptime T: type, bytes: []u8, bit_offset: usize, value: T, endian: Endian) void {"},
{"lineNum":" 1652","line":"    switch (endian) {"},
{"lineNum":" 1653","line":"        .Little => writePackedIntLittle(T, bytes, bit_offset, value),"},
{"lineNum":" 1654","line":"        .Big => writePackedIntBig(T, bytes, bit_offset, value),"},
{"lineNum":" 1655","line":"    }"},
{"lineNum":" 1656","line":"}"},
{"lineNum":" 1657","line":""},
{"lineNum":" 1658","line":"/// Writes a twos-complement little-endian integer to memory."},
{"lineNum":" 1659","line":"/// Asserts that buf.len >= @typeInfo(T).Int.bits / 8."},
{"lineNum":" 1660","line":"/// The bit count of T must be divisible by 8."},
{"lineNum":" 1661","line":"/// Any extra bytes in buffer after writing the integer are set to zero. To"},
{"lineNum":" 1662","line":"/// avoid the branch to check for extra buffer bytes, use writeIntLittle"},
{"lineNum":" 1663","line":"/// instead."},
{"lineNum":" 1664","line":"pub fn writeIntSliceLittle(comptime T: type, buffer: []u8, value: T) void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1665","line":"    assert(buffer.len >= @divExact(@typeInfo(T).Int.bits, 8));","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1666","line":""},
{"lineNum":" 1667","line":"    if (@typeInfo(T).Int.bits == 0) {"},
{"lineNum":" 1668","line":"        return set(u8, buffer, 0);"},
{"lineNum":" 1669","line":"    } else if (@typeInfo(T).Int.bits == 8) {"},
{"lineNum":" 1670","line":"        set(u8, buffer, 0);"},
{"lineNum":" 1671","line":"        buffer[0] = @bitCast(u8, value);"},
{"lineNum":" 1672","line":"        return;"},
{"lineNum":" 1673","line":"    }"},
{"lineNum":" 1674","line":"    // TODO I want to call writeIntLittle here but comptime eval facilities aren\'t good enough"},
{"lineNum":" 1675","line":"    const uint = std.meta.Int(.unsigned, @typeInfo(T).Int.bits);"},
{"lineNum":" 1676","line":"    var bits = @bitCast(uint, value);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1677","line":"    for (buffer) |*b| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1678","line":"        b.* = @truncate(u8, bits);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1679","line":"        bits >>= 8;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 1680","line":"    }"},
{"lineNum":" 1681","line":"}"},
{"lineNum":" 1682","line":""},
{"lineNum":" 1683","line":"/// Writes a twos-complement big-endian integer to memory."},
{"lineNum":" 1684","line":"/// Asserts that buffer.len >= @typeInfo(T).Int.bits / 8."},
{"lineNum":" 1685","line":"/// The bit count of T must be divisible by 8."},
{"lineNum":" 1686","line":"/// Any extra bytes in buffer before writing the integer are set to zero. To"},
{"lineNum":" 1687","line":"/// avoid the branch to check for extra buffer bytes, use writeIntBig instead."},
{"lineNum":" 1688","line":"pub fn writeIntSliceBig(comptime T: type, buffer: []u8, value: T) void {"},
{"lineNum":" 1689","line":"    assert(buffer.len >= @divExact(@typeInfo(T).Int.bits, 8));"},
{"lineNum":" 1690","line":""},
{"lineNum":" 1691","line":"    if (@typeInfo(T).Int.bits == 0) {"},
{"lineNum":" 1692","line":"        return set(u8, buffer, 0);"},
{"lineNum":" 1693","line":"    } else if (@typeInfo(T).Int.bits == 8) {"},
{"lineNum":" 1694","line":"        set(u8, buffer, 0);"},
{"lineNum":" 1695","line":"        buffer[buffer.len - 1] = @bitCast(u8, value);"},
{"lineNum":" 1696","line":"        return;"},
{"lineNum":" 1697","line":"    }"},
{"lineNum":" 1698","line":""},
{"lineNum":" 1699","line":"    // TODO I want to call writeIntBig here but comptime eval facilities aren\'t good enough"},
{"lineNum":" 1700","line":"    const uint = std.meta.Int(.unsigned, @typeInfo(T).Int.bits);"},
{"lineNum":" 1701","line":"    var bits = @bitCast(uint, value);"},
{"lineNum":" 1702","line":"    var index: usize = buffer.len;"},
{"lineNum":" 1703","line":"    while (index != 0) {"},
{"lineNum":" 1704","line":"        index -= 1;"},
{"lineNum":" 1705","line":"        buffer[index] = @truncate(u8, bits);"},
{"lineNum":" 1706","line":"        bits >>= 8;"},
{"lineNum":" 1707","line":"    }"},
{"lineNum":" 1708","line":"}"},
{"lineNum":" 1709","line":""},
{"lineNum":" 1710","line":"pub const writeIntSliceNative = switch (native_endian) {"},
{"lineNum":" 1711","line":"    .Little => writeIntSliceLittle,"},
{"lineNum":" 1712","line":"    .Big => writeIntSliceBig,"},
{"lineNum":" 1713","line":"};"},
{"lineNum":" 1714","line":""},
{"lineNum":" 1715","line":"pub const writeIntSliceForeign = switch (native_endian) {"},
{"lineNum":" 1716","line":"    .Little => writeIntSliceBig,"},
{"lineNum":" 1717","line":"    .Big => writeIntSliceLittle,"},
{"lineNum":" 1718","line":"};"},
{"lineNum":" 1719","line":""},
{"lineNum":" 1720","line":"/// Writes a twos-complement integer to memory, with the specified endianness."},
{"lineNum":" 1721","line":"/// Asserts that buf.len >= @typeInfo(T).Int.bits / 8."},
{"lineNum":" 1722","line":"/// The bit count of T must be evenly divisible by 8."},
{"lineNum":" 1723","line":"/// Any extra bytes in buffer not part of the integer are set to zero, with"},
{"lineNum":" 1724","line":"/// respect to endianness. To avoid the branch to check for extra buffer bytes,"},
{"lineNum":" 1725","line":"/// use writeInt instead."},
{"lineNum":" 1726","line":"pub fn writeIntSlice(comptime T: type, buffer: []u8, value: T, endian: Endian) void {"},
{"lineNum":" 1727","line":"    comptime assert(@typeInfo(T).Int.bits % 8 == 0);"},
{"lineNum":" 1728","line":"    return switch (endian) {"},
{"lineNum":" 1729","line":"        .Little => writeIntSliceLittle(T, buffer, value),"},
{"lineNum":" 1730","line":"        .Big => writeIntSliceBig(T, buffer, value),"},
{"lineNum":" 1731","line":"    };"},
{"lineNum":" 1732","line":"}"},
{"lineNum":" 1733","line":""},
{"lineNum":" 1734","line":"/// Stores an integer to packed memory with provided bit_count, bit_offset, and signedness."},
{"lineNum":" 1735","line":"/// If negative, the written value is sign-extended."},
{"lineNum":" 1736","line":"///"},
{"lineNum":" 1737","line":"/// Example:"},
{"lineNum":" 1738","line":"///     const T = packed struct(u16){ a: u3, b: u7, c: u6 };"},
{"lineNum":" 1739","line":"///     var st = T{ .a = 1, .b = 2, .c = 4 };"},
{"lineNum":" 1740","line":"///     // st.b = 0x7f;"},
{"lineNum":" 1741","line":"///     var value: u64 = 0x7f;"},
{"lineNum":" 1742","line":"///     writeVarPackedInt(std.mem.asBytes(&st), @bitOffsetOf(T, \"b\"), 7, value, builtin.cpu.arch.endian());"},
{"lineNum":" 1743","line":"///"},
{"lineNum":" 1744","line":"pub fn writeVarPackedInt(bytes: []u8, bit_offset: usize, bit_count: usize, value: anytype, endian: std.builtin.Endian) void {"},
{"lineNum":" 1745","line":"    const T = @TypeOf(value);"},
{"lineNum":" 1746","line":"    const uN = std.meta.Int(.unsigned, @bitSizeOf(T));"},
{"lineNum":" 1747","line":"    const Log2N = std.math.Log2Int(T);"},
{"lineNum":" 1748","line":""},
{"lineNum":" 1749","line":"    const bit_shift = @intCast(u3, bit_offset % 8);"},
{"lineNum":" 1750","line":"    const write_size = (bit_count + bit_shift + 7) / 8;"},
{"lineNum":" 1751","line":"    const lowest_byte = switch (endian) {"},
{"lineNum":" 1752","line":"        .Big => bytes.len - (bit_offset / 8) - write_size,"},
{"lineNum":" 1753","line":"        .Little => bit_offset / 8,"},
{"lineNum":" 1754","line":"    };"},
{"lineNum":" 1755","line":"    const write_bytes = bytes[lowest_byte..][0..write_size];"},
{"lineNum":" 1756","line":""},
{"lineNum":" 1757","line":"    if (write_size == 1) {"},
{"lineNum":" 1758","line":"        // Single byte writes are handled specially, since we need to mask bits"},
{"lineNum":" 1759","line":"        // on both ends of the byte."},
{"lineNum":" 1760","line":"        const mask = (@as(u8, 0xff) >> @intCast(u3, 8 - bit_count));"},
{"lineNum":" 1761","line":"        const new_bits = @intCast(u8, @bitCast(uN, value) & mask) << bit_shift;"},
{"lineNum":" 1762","line":"        write_bytes[0] = (write_bytes[0] & ~(mask << bit_shift)) | new_bits;"},
{"lineNum":" 1763","line":"        return;"},
{"lineNum":" 1764","line":"    }"},
{"lineNum":" 1765","line":""},
{"lineNum":" 1766","line":"    var remaining: T = value;"},
{"lineNum":" 1767","line":""},
{"lineNum":" 1768","line":"    // Iterate bytes forward for Little-endian, backward for Big-endian"},
{"lineNum":" 1769","line":"    const delta: i2 = if (endian == .Big) -1 else 1;"},
{"lineNum":" 1770","line":"    const start = if (endian == .Big) @intCast(isize, write_bytes.len - 1) else 0;"},
{"lineNum":" 1771","line":""},
{"lineNum":" 1772","line":"    var i: isize = start; // isize for signed index arithmetic"},
{"lineNum":" 1773","line":""},
{"lineNum":" 1774","line":"    // Write first byte, using a mask to protects bits preceding bit_offset"},
{"lineNum":" 1775","line":"    const head_mask = @as(u8, 0xff) >> bit_shift;"},
{"lineNum":" 1776","line":"    write_bytes[@intCast(usize, i)] &= ~(head_mask << bit_shift);"},
{"lineNum":" 1777","line":"    write_bytes[@intCast(usize, i)] |= @intCast(u8, @bitCast(uN, remaining) & head_mask) << bit_shift;"},
{"lineNum":" 1778","line":"    remaining >>= @intCast(Log2N, @as(u4, 8) - bit_shift);"},
{"lineNum":" 1779","line":"    i += delta;"},
{"lineNum":" 1780","line":""},
{"lineNum":" 1781","line":"    // Write bytes[1..bytes.len - 1]"},
{"lineNum":" 1782","line":"    if (@bitSizeOf(T) > 8) {"},
{"lineNum":" 1783","line":"        const loop_end = start + delta * (@intCast(isize, write_size) - 1);"},
{"lineNum":" 1784","line":"        while (i != loop_end) : (i += delta) {"},
{"lineNum":" 1785","line":"            write_bytes[@intCast(usize, i)] = @truncate(u8, @bitCast(uN, remaining));"},
{"lineNum":" 1786","line":"            remaining >>= 8;"},
{"lineNum":" 1787","line":"        }"},
{"lineNum":" 1788","line":"    }"},
{"lineNum":" 1789","line":""},
{"lineNum":" 1790","line":"    // Write last byte, using a mask to protect bits following bit_offset + bit_count"},
{"lineNum":" 1791","line":"    const following_bits = -%@truncate(u3, bit_shift + bit_count);"},
{"lineNum":" 1792","line":"    const tail_mask = (@as(u8, 0xff) << following_bits) >> following_bits;"},
{"lineNum":" 1793","line":"    write_bytes[@intCast(usize, i)] &= ~tail_mask;"},
{"lineNum":" 1794","line":"    write_bytes[@intCast(usize, i)] |= @intCast(u8, @bitCast(uN, remaining) & tail_mask);"},
{"lineNum":" 1795","line":"}"},
{"lineNum":" 1796","line":""},
{"lineNum":" 1797","line":"test \"writeIntBig and writeIntLittle\" {"},
{"lineNum":" 1798","line":"    var buf0: [0]u8 = undefined;"},
{"lineNum":" 1799","line":"    var buf1: [1]u8 = undefined;"},
{"lineNum":" 1800","line":"    var buf2: [2]u8 = undefined;"},
{"lineNum":" 1801","line":"    var buf9: [9]u8 = undefined;"},
{"lineNum":" 1802","line":""},
{"lineNum":" 1803","line":"    writeIntBig(u0, &buf0, 0x0);"},
{"lineNum":" 1804","line":"    try testing.expect(eql(u8, buf0[0..], &[_]u8{}));"},
{"lineNum":" 1805","line":"    writeIntLittle(u0, &buf0, 0x0);"},
{"lineNum":" 1806","line":"    try testing.expect(eql(u8, buf0[0..], &[_]u8{}));"},
{"lineNum":" 1807","line":""},
{"lineNum":" 1808","line":"    writeIntBig(u8, &buf1, 0x12);"},
{"lineNum":" 1809","line":"    try testing.expect(eql(u8, buf1[0..], &[_]u8{0x12}));"},
{"lineNum":" 1810","line":"    writeIntLittle(u8, &buf1, 0x34);"},
{"lineNum":" 1811","line":"    try testing.expect(eql(u8, buf1[0..], &[_]u8{0x34}));"},
{"lineNum":" 1812","line":""},
{"lineNum":" 1813","line":"    writeIntBig(u16, &buf2, 0x1234);"},
{"lineNum":" 1814","line":"    try testing.expect(eql(u8, buf2[0..], &[_]u8{ 0x12, 0x34 }));"},
{"lineNum":" 1815","line":"    writeIntLittle(u16, &buf2, 0x5678);"},
{"lineNum":" 1816","line":"    try testing.expect(eql(u8, buf2[0..], &[_]u8{ 0x78, 0x56 }));"},
{"lineNum":" 1817","line":""},
{"lineNum":" 1818","line":"    writeIntBig(u72, &buf9, 0x123456789abcdef024);"},
{"lineNum":" 1819","line":"    try testing.expect(eql(u8, buf9[0..], &[_]u8{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0x24 }));"},
{"lineNum":" 1820","line":"    writeIntLittle(u72, &buf9, 0xfedcba9876543210ec);"},
{"lineNum":" 1821","line":"    try testing.expect(eql(u8, buf9[0..], &[_]u8{ 0xec, 0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe }));"},
{"lineNum":" 1822","line":""},
{"lineNum":" 1823","line":"    writeIntBig(i8, &buf1, -1);"},
{"lineNum":" 1824","line":"    try testing.expect(eql(u8, buf1[0..], &[_]u8{0xff}));"},
{"lineNum":" 1825","line":"    writeIntLittle(i8, &buf1, -2);"},
{"lineNum":" 1826","line":"    try testing.expect(eql(u8, buf1[0..], &[_]u8{0xfe}));"},
{"lineNum":" 1827","line":""},
{"lineNum":" 1828","line":"    writeIntBig(i16, &buf2, -3);"},
{"lineNum":" 1829","line":"    try testing.expect(eql(u8, buf2[0..], &[_]u8{ 0xff, 0xfd }));"},
{"lineNum":" 1830","line":"    writeIntLittle(i16, &buf2, -4);"},
{"lineNum":" 1831","line":"    try testing.expect(eql(u8, buf2[0..], &[_]u8{ 0xfc, 0xff }));"},
{"lineNum":" 1832","line":"}"},
{"lineNum":" 1833","line":""},
{"lineNum":" 1834","line":"/// Swap the byte order of all the members of the fields of a struct"},
{"lineNum":" 1835","line":"/// (Changing their endianess)"},
{"lineNum":" 1836","line":"pub fn byteSwapAllFields(comptime S: type, ptr: *S) void {"},
{"lineNum":" 1837","line":"    if (@typeInfo(S) != .Struct) @compileError(\"byteSwapAllFields expects a struct as the first argument\");"},
{"lineNum":" 1838","line":"    inline for (std.meta.fields(S)) |f| {"},
{"lineNum":" 1839","line":"        @field(ptr, f.name) = @byteSwap(@field(ptr, f.name));"},
{"lineNum":" 1840","line":"    }"},
{"lineNum":" 1841","line":"}"},
{"lineNum":" 1842","line":""},
{"lineNum":" 1843","line":"test \"byteSwapAllFields\" {"},
{"lineNum":" 1844","line":"    const T = extern struct {"},
{"lineNum":" 1845","line":"        f0: u8,"},
{"lineNum":" 1846","line":"        f1: u16,"},
{"lineNum":" 1847","line":"        f2: u32,"},
{"lineNum":" 1848","line":"    };"},
{"lineNum":" 1849","line":"    var s = T{"},
{"lineNum":" 1850","line":"        .f0 = 0x12,"},
{"lineNum":" 1851","line":"        .f1 = 0x1234,"},
{"lineNum":" 1852","line":"        .f2 = 0x12345678,"},
{"lineNum":" 1853","line":"    };"},
{"lineNum":" 1854","line":"    byteSwapAllFields(T, &s);"},
{"lineNum":" 1855","line":"    try std.testing.expectEqual(T{"},
{"lineNum":" 1856","line":"        .f0 = 0x12,"},
{"lineNum":" 1857","line":"        .f1 = 0x3412,"},
{"lineNum":" 1858","line":"        .f2 = 0x78563412,"},
{"lineNum":" 1859","line":"    }, s);"},
{"lineNum":" 1860","line":"}"},
{"lineNum":" 1861","line":""},
{"lineNum":" 1862","line":"/// Returns an iterator that iterates over the slices of `buffer` that are not"},
{"lineNum":" 1863","line":"/// any of the bytes in `delimiter_bytes`."},
{"lineNum":" 1864","line":"///"},
{"lineNum":" 1865","line":"/// `tokenize(u8, \"   abc def    ghi  \", \" \")` will return slices"},
{"lineNum":" 1866","line":"/// for \"abc\", \"def\", \"ghi\", null, in that order."},
{"lineNum":" 1867","line":"///"},
{"lineNum":" 1868","line":"/// If `buffer` is empty, the iterator will return null."},
{"lineNum":" 1869","line":"/// If `delimiter_bytes` does not exist in buffer,"},
{"lineNum":" 1870","line":"/// the iterator will return `buffer`, null, in that order."},
{"lineNum":" 1871","line":"///"},
{"lineNum":" 1872","line":"/// See also: `split` and `splitBackwards`."},
{"lineNum":" 1873","line":"pub fn tokenize(comptime T: type, buffer: []const T, delimiter_bytes: []const T) TokenIterator(T) {"},
{"lineNum":" 1874","line":"    return .{"},
{"lineNum":" 1875","line":"        .index = 0,"},
{"lineNum":" 1876","line":"        .buffer = buffer,"},
{"lineNum":" 1877","line":"        .delimiter_bytes = delimiter_bytes,"},
{"lineNum":" 1878","line":"    };"},
{"lineNum":" 1879","line":"}"},
{"lineNum":" 1880","line":""},
{"lineNum":" 1881","line":"test \"tokenize\" {"},
{"lineNum":" 1882","line":"    var it = tokenize(u8, \"   abc def   ghi  \", \" \");"},
{"lineNum":" 1883","line":"    try testing.expect(eql(u8, it.next().?, \"abc\"));"},
{"lineNum":" 1884","line":"    try testing.expect(eql(u8, it.peek().?, \"def\"));"},
{"lineNum":" 1885","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 1886","line":"    try testing.expect(eql(u8, it.next().?, \"ghi\"));"},
{"lineNum":" 1887","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1888","line":""},
{"lineNum":" 1889","line":"    it = tokenize(u8, \"..\\\\bob\", \"\\\\\");"},
{"lineNum":" 1890","line":"    try testing.expect(eql(u8, it.next().?, \"..\"));"},
{"lineNum":" 1891","line":"    try testing.expect(eql(u8, \"..\", \"..\\\\bob\"[0..it.index]));"},
{"lineNum":" 1892","line":"    try testing.expect(eql(u8, it.next().?, \"bob\"));"},
{"lineNum":" 1893","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1894","line":""},
{"lineNum":" 1895","line":"    it = tokenize(u8, \"//a/b\", \"/\");"},
{"lineNum":" 1896","line":"    try testing.expect(eql(u8, it.next().?, \"a\"));"},
{"lineNum":" 1897","line":"    try testing.expect(eql(u8, it.next().?, \"b\"));"},
{"lineNum":" 1898","line":"    try testing.expect(eql(u8, \"//a/b\", \"//a/b\"[0..it.index]));"},
{"lineNum":" 1899","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1900","line":""},
{"lineNum":" 1901","line":"    it = tokenize(u8, \"|\", \"|\");"},
{"lineNum":" 1902","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1903","line":"    try testing.expect(it.peek() == null);"},
{"lineNum":" 1904","line":""},
{"lineNum":" 1905","line":"    it = tokenize(u8, \"\", \"|\");"},
{"lineNum":" 1906","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1907","line":"    try testing.expect(it.peek() == null);"},
{"lineNum":" 1908","line":""},
{"lineNum":" 1909","line":"    it = tokenize(u8, \"hello\", \"\");"},
{"lineNum":" 1910","line":"    try testing.expect(eql(u8, it.next().?, \"hello\"));"},
{"lineNum":" 1911","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1912","line":""},
{"lineNum":" 1913","line":"    it = tokenize(u8, \"hello\", \" \");"},
{"lineNum":" 1914","line":"    try testing.expect(eql(u8, it.next().?, \"hello\"));"},
{"lineNum":" 1915","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1916","line":""},
{"lineNum":" 1917","line":"    var it16 = tokenize("},
{"lineNum":" 1918","line":"        u16,"},
{"lineNum":" 1919","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"hello\"),"},
{"lineNum":" 1920","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\" \"),"},
{"lineNum":" 1921","line":"    );"},
{"lineNum":" 1922","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"hello\")));"},
{"lineNum":" 1923","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 1924","line":"}"},
{"lineNum":" 1925","line":""},
{"lineNum":" 1926","line":"test \"tokenize (multibyte)\" {"},
{"lineNum":" 1927","line":"    var it = tokenize(u8, \"a|b,c/d e\", \" /,|\");"},
{"lineNum":" 1928","line":"    try testing.expect(eql(u8, it.next().?, \"a\"));"},
{"lineNum":" 1929","line":"    try testing.expect(eql(u8, it.peek().?, \"b\"));"},
{"lineNum":" 1930","line":"    try testing.expect(eql(u8, it.next().?, \"b\"));"},
{"lineNum":" 1931","line":"    try testing.expect(eql(u8, it.next().?, \"c\"));"},
{"lineNum":" 1932","line":"    try testing.expect(eql(u8, it.next().?, \"d\"));"},
{"lineNum":" 1933","line":"    try testing.expect(eql(u8, it.next().?, \"e\"));"},
{"lineNum":" 1934","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1935","line":"    try testing.expect(it.peek() == null);"},
{"lineNum":" 1936","line":""},
{"lineNum":" 1937","line":"    var it16 = tokenize("},
{"lineNum":" 1938","line":"        u16,"},
{"lineNum":" 1939","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"a|b,c/d e\"),"},
{"lineNum":" 1940","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\" /,|\"),"},
{"lineNum":" 1941","line":"    );"},
{"lineNum":" 1942","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"a\")));"},
{"lineNum":" 1943","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"b\")));"},
{"lineNum":" 1944","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"c\")));"},
{"lineNum":" 1945","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"d\")));"},
{"lineNum":" 1946","line":"    try testing.expect(eql(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"e\")));"},
{"lineNum":" 1947","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 1948","line":"}"},
{"lineNum":" 1949","line":""},
{"lineNum":" 1950","line":"test \"tokenize (reset)\" {"},
{"lineNum":" 1951","line":"    var it = tokenize(u8, \"   abc def   ghi  \", \" \");"},
{"lineNum":" 1952","line":"    try testing.expect(eql(u8, it.next().?, \"abc\"));"},
{"lineNum":" 1953","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 1954","line":"    try testing.expect(eql(u8, it.next().?, \"ghi\"));"},
{"lineNum":" 1955","line":""},
{"lineNum":" 1956","line":"    it.reset();"},
{"lineNum":" 1957","line":""},
{"lineNum":" 1958","line":"    try testing.expect(eql(u8, it.next().?, \"abc\"));"},
{"lineNum":" 1959","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 1960","line":"    try testing.expect(eql(u8, it.next().?, \"ghi\"));"},
{"lineNum":" 1961","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 1962","line":"}"},
{"lineNum":" 1963","line":""},
{"lineNum":" 1964","line":"/// Returns an iterator that iterates over the slices of `buffer` that"},
{"lineNum":" 1965","line":"/// are separated by bytes in `delimiter`."},
{"lineNum":" 1966","line":"///"},
{"lineNum":" 1967","line":"/// `split(u8, \"abc|def||ghi\", \"|\")` will return slices"},
{"lineNum":" 1968","line":"/// for \"abc\", \"def\", \"\", \"ghi\", null, in that order."},
{"lineNum":" 1969","line":"///"},
{"lineNum":" 1970","line":"/// If `delimiter` does not exist in buffer,"},
{"lineNum":" 1971","line":"/// the iterator will return `buffer`, null, in that order."},
{"lineNum":" 1972","line":"/// The delimiter length must not be zero."},
{"lineNum":" 1973","line":"///"},
{"lineNum":" 1974","line":"/// See also: `tokenize` and `splitBackwards`."},
{"lineNum":" 1975","line":"pub fn split(comptime T: type, buffer: []const T, delimiter: []const T) SplitIterator(T) {"},
{"lineNum":" 1976","line":"    assert(delimiter.len != 0);"},
{"lineNum":" 1977","line":"    return .{"},
{"lineNum":" 1978","line":"        .index = 0,"},
{"lineNum":" 1979","line":"        .buffer = buffer,"},
{"lineNum":" 1980","line":"        .delimiter = delimiter,"},
{"lineNum":" 1981","line":"    };"},
{"lineNum":" 1982","line":"}"},
{"lineNum":" 1983","line":""},
{"lineNum":" 1984","line":"test \"split\" {"},
{"lineNum":" 1985","line":"    var it = split(u8, \"abc|def||ghi\", \"|\");"},
{"lineNum":" 1986","line":"    try testing.expectEqualSlices(u8, it.rest(), \"abc|def||ghi\");"},
{"lineNum":" 1987","line":"    try testing.expectEqualSlices(u8, it.first(), \"abc\");"},
{"lineNum":" 1988","line":""},
{"lineNum":" 1989","line":"    try testing.expectEqualSlices(u8, it.rest(), \"def||ghi\");"},
{"lineNum":" 1990","line":"    try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 1991","line":""},
{"lineNum":" 1992","line":"    try testing.expectEqualSlices(u8, it.rest(), \"|ghi\");"},
{"lineNum":" 1993","line":"    try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 1994","line":""},
{"lineNum":" 1995","line":"    try testing.expectEqualSlices(u8, it.rest(), \"ghi\");"},
{"lineNum":" 1996","line":"    try testing.expectEqualSlices(u8, it.next().?, \"ghi\");"},
{"lineNum":" 1997","line":""},
{"lineNum":" 1998","line":"    try testing.expectEqualSlices(u8, it.rest(), \"\");"},
{"lineNum":" 1999","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2000","line":""},
{"lineNum":" 2001","line":"    it = split(u8, \"\", \"|\");"},
{"lineNum":" 2002","line":"    try testing.expectEqualSlices(u8, it.first(), \"\");"},
{"lineNum":" 2003","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2004","line":""},
{"lineNum":" 2005","line":"    it = split(u8, \"|\", \"|\");"},
{"lineNum":" 2006","line":"    try testing.expectEqualSlices(u8, it.first(), \"\");"},
{"lineNum":" 2007","line":"    try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2008","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2009","line":""},
{"lineNum":" 2010","line":"    it = split(u8, \"hello\", \" \");"},
{"lineNum":" 2011","line":"    try testing.expectEqualSlices(u8, it.first(), \"hello\");"},
{"lineNum":" 2012","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2013","line":""},
{"lineNum":" 2014","line":"    var it16 = split("},
{"lineNum":" 2015","line":"        u16,"},
{"lineNum":" 2016","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"hello\"),"},
{"lineNum":" 2017","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\" \"),"},
{"lineNum":" 2018","line":"    );"},
{"lineNum":" 2019","line":"    try testing.expectEqualSlices(u16, it16.first(), std.unicode.utf8ToUtf16LeStringLiteral(\"hello\"));"},
{"lineNum":" 2020","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 2021","line":"}"},
{"lineNum":" 2022","line":""},
{"lineNum":" 2023","line":"test \"split (multibyte)\" {"},
{"lineNum":" 2024","line":"    var it = split(u8, \"a, b ,, c, d, e\", \", \");"},
{"lineNum":" 2025","line":"    try testing.expectEqualSlices(u8, it.first(), \"a\");"},
{"lineNum":" 2026","line":"    try testing.expectEqualSlices(u8, it.rest(), \"b ,, c, d, e\");"},
{"lineNum":" 2027","line":"    try testing.expectEqualSlices(u8, it.next().?, \"b ,\");"},
{"lineNum":" 2028","line":"    try testing.expectEqualSlices(u8, it.next().?, \"c\");"},
{"lineNum":" 2029","line":"    try testing.expectEqualSlices(u8, it.next().?, \"d\");"},
{"lineNum":" 2030","line":"    try testing.expectEqualSlices(u8, it.next().?, \"e\");"},
{"lineNum":" 2031","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2032","line":""},
{"lineNum":" 2033","line":"    var it16 = split("},
{"lineNum":" 2034","line":"        u16,"},
{"lineNum":" 2035","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"a, b ,, c, d, e\"),"},
{"lineNum":" 2036","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\", \"),"},
{"lineNum":" 2037","line":"    );"},
{"lineNum":" 2038","line":"    try testing.expectEqualSlices(u16, it16.first(), std.unicode.utf8ToUtf16LeStringLiteral(\"a\"));"},
{"lineNum":" 2039","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"b ,\"));"},
{"lineNum":" 2040","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"c\"));"},
{"lineNum":" 2041","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"d\"));"},
{"lineNum":" 2042","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"e\"));"},
{"lineNum":" 2043","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 2044","line":"}"},
{"lineNum":" 2045","line":""},
{"lineNum":" 2046","line":"test \"split (reset)\" {"},
{"lineNum":" 2047","line":"    var it = split(u8, \"abc def ghi\", \" \");"},
{"lineNum":" 2048","line":"    try testing.expect(eql(u8, it.first(), \"abc\"));"},
{"lineNum":" 2049","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 2050","line":"    try testing.expect(eql(u8, it.next().?, \"ghi\"));"},
{"lineNum":" 2051","line":""},
{"lineNum":" 2052","line":"    it.reset();"},
{"lineNum":" 2053","line":""},
{"lineNum":" 2054","line":"    try testing.expect(eql(u8, it.first(), \"abc\"));"},
{"lineNum":" 2055","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 2056","line":"    try testing.expect(eql(u8, it.next().?, \"ghi\"));"},
{"lineNum":" 2057","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2058","line":"}"},
{"lineNum":" 2059","line":""},
{"lineNum":" 2060","line":"/// Returns an iterator that iterates backwards over the slices of `buffer`"},
{"lineNum":" 2061","line":"/// that are separated by bytes in `delimiter`."},
{"lineNum":" 2062","line":"///"},
{"lineNum":" 2063","line":"/// `splitBackwards(u8, \"abc|def||ghi\", \"|\")` will return slices"},
{"lineNum":" 2064","line":"/// for \"ghi\", \"\", \"def\", \"abc\", null, in that order."},
{"lineNum":" 2065","line":"///"},
{"lineNum":" 2066","line":"/// If `delimiter` does not exist in buffer,"},
{"lineNum":" 2067","line":"/// the iterator will return `buffer`, null, in that order."},
{"lineNum":" 2068","line":"/// The delimiter length must not be zero."},
{"lineNum":" 2069","line":"///"},
{"lineNum":" 2070","line":"/// See also: `tokenize` and `split`."},
{"lineNum":" 2071","line":"pub fn splitBackwards(comptime T: type, buffer: []const T, delimiter: []const T) SplitBackwardsIterator(T) {"},
{"lineNum":" 2072","line":"    assert(delimiter.len != 0);"},
{"lineNum":" 2073","line":"    return SplitBackwardsIterator(T){"},
{"lineNum":" 2074","line":"        .index = buffer.len,"},
{"lineNum":" 2075","line":"        .buffer = buffer,"},
{"lineNum":" 2076","line":"        .delimiter = delimiter,"},
{"lineNum":" 2077","line":"    };"},
{"lineNum":" 2078","line":"}"},
{"lineNum":" 2079","line":""},
{"lineNum":" 2080","line":"test \"splitBackwards\" {"},
{"lineNum":" 2081","line":"    var it = splitBackwards(u8, \"abc|def||ghi\", \"|\");"},
{"lineNum":" 2082","line":"    try testing.expectEqualSlices(u8, it.rest(), \"abc|def||ghi\");"},
{"lineNum":" 2083","line":"    try testing.expectEqualSlices(u8, it.first(), \"ghi\");"},
{"lineNum":" 2084","line":""},
{"lineNum":" 2085","line":"    try testing.expectEqualSlices(u8, it.rest(), \"abc|def|\");"},
{"lineNum":" 2086","line":"    try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2087","line":""},
{"lineNum":" 2088","line":"    try testing.expectEqualSlices(u8, it.rest(), \"abc|def\");"},
{"lineNum":" 2089","line":"    try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 2090","line":""},
{"lineNum":" 2091","line":"    try testing.expectEqualSlices(u8, it.rest(), \"abc\");"},
{"lineNum":" 2092","line":"    try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2093","line":""},
{"lineNum":" 2094","line":"    try testing.expectEqualSlices(u8, it.rest(), \"\");"},
{"lineNum":" 2095","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2096","line":""},
{"lineNum":" 2097","line":"    it = splitBackwards(u8, \"\", \"|\");"},
{"lineNum":" 2098","line":"    try testing.expectEqualSlices(u8, it.first(), \"\");"},
{"lineNum":" 2099","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2100","line":""},
{"lineNum":" 2101","line":"    it = splitBackwards(u8, \"|\", \"|\");"},
{"lineNum":" 2102","line":"    try testing.expectEqualSlices(u8, it.first(), \"\");"},
{"lineNum":" 2103","line":"    try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2104","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2105","line":""},
{"lineNum":" 2106","line":"    it = splitBackwards(u8, \"hello\", \" \");"},
{"lineNum":" 2107","line":"    try testing.expectEqualSlices(u8, it.first(), \"hello\");"},
{"lineNum":" 2108","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2109","line":""},
{"lineNum":" 2110","line":"    var it16 = splitBackwards("},
{"lineNum":" 2111","line":"        u16,"},
{"lineNum":" 2112","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"hello\"),"},
{"lineNum":" 2113","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\" \"),"},
{"lineNum":" 2114","line":"    );"},
{"lineNum":" 2115","line":"    try testing.expectEqualSlices(u16, it16.first(), std.unicode.utf8ToUtf16LeStringLiteral(\"hello\"));"},
{"lineNum":" 2116","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 2117","line":"}"},
{"lineNum":" 2118","line":""},
{"lineNum":" 2119","line":"test \"splitBackwards (multibyte)\" {"},
{"lineNum":" 2120","line":"    var it = splitBackwards(u8, \"a, b ,, c, d, e\", \", \");"},
{"lineNum":" 2121","line":"    try testing.expectEqualSlices(u8, it.rest(), \"a, b ,, c, d, e\");"},
{"lineNum":" 2122","line":"    try testing.expectEqualSlices(u8, it.first(), \"e\");"},
{"lineNum":" 2123","line":""},
{"lineNum":" 2124","line":"    try testing.expectEqualSlices(u8, it.rest(), \"a, b ,, c, d\");"},
{"lineNum":" 2125","line":"    try testing.expectEqualSlices(u8, it.next().?, \"d\");"},
{"lineNum":" 2126","line":""},
{"lineNum":" 2127","line":"    try testing.expectEqualSlices(u8, it.rest(), \"a, b ,, c\");"},
{"lineNum":" 2128","line":"    try testing.expectEqualSlices(u8, it.next().?, \"c\");"},
{"lineNum":" 2129","line":""},
{"lineNum":" 2130","line":"    try testing.expectEqualSlices(u8, it.rest(), \"a, b ,\");"},
{"lineNum":" 2131","line":"    try testing.expectEqualSlices(u8, it.next().?, \"b ,\");"},
{"lineNum":" 2132","line":""},
{"lineNum":" 2133","line":"    try testing.expectEqualSlices(u8, it.rest(), \"a\");"},
{"lineNum":" 2134","line":"    try testing.expectEqualSlices(u8, it.next().?, \"a\");"},
{"lineNum":" 2135","line":""},
{"lineNum":" 2136","line":"    try testing.expectEqualSlices(u8, it.rest(), \"\");"},
{"lineNum":" 2137","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2138","line":""},
{"lineNum":" 2139","line":"    var it16 = splitBackwards("},
{"lineNum":" 2140","line":"        u16,"},
{"lineNum":" 2141","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\"a, b ,, c, d, e\"),"},
{"lineNum":" 2142","line":"        std.unicode.utf8ToUtf16LeStringLiteral(\", \"),"},
{"lineNum":" 2143","line":"    );"},
{"lineNum":" 2144","line":"    try testing.expectEqualSlices(u16, it16.first(), std.unicode.utf8ToUtf16LeStringLiteral(\"e\"));"},
{"lineNum":" 2145","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"d\"));"},
{"lineNum":" 2146","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"c\"));"},
{"lineNum":" 2147","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"b ,\"));"},
{"lineNum":" 2148","line":"    try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"a\"));"},
{"lineNum":" 2149","line":"    try testing.expect(it16.next() == null);"},
{"lineNum":" 2150","line":"}"},
{"lineNum":" 2151","line":""},
{"lineNum":" 2152","line":"test \"splitBackwards (reset)\" {"},
{"lineNum":" 2153","line":"    var it = splitBackwards(u8, \"abc def ghi\", \" \");"},
{"lineNum":" 2154","line":"    try testing.expect(eql(u8, it.first(), \"ghi\"));"},
{"lineNum":" 2155","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 2156","line":"    try testing.expect(eql(u8, it.next().?, \"abc\"));"},
{"lineNum":" 2157","line":""},
{"lineNum":" 2158","line":"    it.reset();"},
{"lineNum":" 2159","line":""},
{"lineNum":" 2160","line":"    try testing.expect(eql(u8, it.first(), \"ghi\"));"},
{"lineNum":" 2161","line":"    try testing.expect(eql(u8, it.next().?, \"def\"));"},
{"lineNum":" 2162","line":"    try testing.expect(eql(u8, it.next().?, \"abc\"));"},
{"lineNum":" 2163","line":"    try testing.expect(it.next() == null);"},
{"lineNum":" 2164","line":"}"},
{"lineNum":" 2165","line":""},
{"lineNum":" 2166","line":"/// Returns an iterator with a sliding window of slices for `buffer`."},
{"lineNum":" 2167","line":"/// The sliding window has length `size` and on every iteration moves"},
{"lineNum":" 2168","line":"/// forward by `advance`."},
{"lineNum":" 2169","line":"///"},
{"lineNum":" 2170","line":"/// Extract data for moving average with:"},
{"lineNum":" 2171","line":"/// `window(u8, \"abcdefg\", 3, 1)` will return slices"},
{"lineNum":" 2172","line":"/// \"abc\", \"bcd\", \"cde\", \"def\", \"efg\", null, in that order."},
{"lineNum":" 2173","line":"///"},
{"lineNum":" 2174","line":"/// Chunk or split every N items with:"},
{"lineNum":" 2175","line":"/// `window(u8, \"abcdefg\", 3, 3)` will return slices"},
{"lineNum":" 2176","line":"/// \"abc\", \"def\", \"g\", null, in that order."},
{"lineNum":" 2177","line":"///"},
{"lineNum":" 2178","line":"/// Pick every even index with:"},
{"lineNum":" 2179","line":"/// `window(u8, \"abcdefg\", 1, 2)` will return slices"},
{"lineNum":" 2180","line":"/// \"a\", \"c\", \"e\", \"g\" null, in that order."},
{"lineNum":" 2181","line":"///"},
{"lineNum":" 2182","line":"/// The `size` and `advance` must be not be zero."},
{"lineNum":" 2183","line":"pub fn window(comptime T: type, buffer: []const T, size: usize, advance: usize) WindowIterator(T) {"},
{"lineNum":" 2184","line":"    assert(size != 0);"},
{"lineNum":" 2185","line":"    assert(advance != 0);"},
{"lineNum":" 2186","line":"    return .{"},
{"lineNum":" 2187","line":"        .index = 0,"},
{"lineNum":" 2188","line":"        .buffer = buffer,"},
{"lineNum":" 2189","line":"        .size = size,"},
{"lineNum":" 2190","line":"        .advance = advance,"},
{"lineNum":" 2191","line":"    };"},
{"lineNum":" 2192","line":"}"},
{"lineNum":" 2193","line":""},
{"lineNum":" 2194","line":"test \"window\" {"},
{"lineNum":" 2195","line":"    {"},
{"lineNum":" 2196","line":"        // moving average size 3"},
{"lineNum":" 2197","line":"        var it = window(u8, \"abcdefg\", 3, 1);"},
{"lineNum":" 2198","line":"        try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2199","line":"        try testing.expectEqualSlices(u8, it.next().?, \"bcd\");"},
{"lineNum":" 2200","line":"        try testing.expectEqualSlices(u8, it.next().?, \"cde\");"},
{"lineNum":" 2201","line":"        try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 2202","line":"        try testing.expectEqualSlices(u8, it.next().?, \"efg\");"},
{"lineNum":" 2203","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2204","line":""},
{"lineNum":" 2205","line":"        // multibyte"},
{"lineNum":" 2206","line":"        var it16 = window(u16, std.unicode.utf8ToUtf16LeStringLiteral(\"abcdefg\"), 3, 1);"},
{"lineNum":" 2207","line":"        try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"abc\"));"},
{"lineNum":" 2208","line":"        try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"bcd\"));"},
{"lineNum":" 2209","line":"        try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"cde\"));"},
{"lineNum":" 2210","line":"        try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"def\"));"},
{"lineNum":" 2211","line":"        try testing.expectEqualSlices(u16, it16.next().?, std.unicode.utf8ToUtf16LeStringLiteral(\"efg\"));"},
{"lineNum":" 2212","line":"        try testing.expectEqual(it16.next(), null);"},
{"lineNum":" 2213","line":"    }"},
{"lineNum":" 2214","line":""},
{"lineNum":" 2215","line":"    {"},
{"lineNum":" 2216","line":"        // chunk/split every 3"},
{"lineNum":" 2217","line":"        var it = window(u8, \"abcdefg\", 3, 3);"},
{"lineNum":" 2218","line":"        try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2219","line":"        try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 2220","line":"        try testing.expectEqualSlices(u8, it.next().?, \"g\");"},
{"lineNum":" 2221","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2222","line":"    }"},
{"lineNum":" 2223","line":""},
{"lineNum":" 2224","line":"    {"},
{"lineNum":" 2225","line":"        // pick even"},
{"lineNum":" 2226","line":"        var it = window(u8, \"abcdefg\", 1, 2);"},
{"lineNum":" 2227","line":"        try testing.expectEqualSlices(u8, it.next().?, \"a\");"},
{"lineNum":" 2228","line":"        try testing.expectEqualSlices(u8, it.next().?, \"c\");"},
{"lineNum":" 2229","line":"        try testing.expectEqualSlices(u8, it.next().?, \"e\");"},
{"lineNum":" 2230","line":"        try testing.expectEqualSlices(u8, it.next().?, \"g\");"},
{"lineNum":" 2231","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2232","line":"    }"},
{"lineNum":" 2233","line":""},
{"lineNum":" 2234","line":"    {"},
{"lineNum":" 2235","line":"        // empty"},
{"lineNum":" 2236","line":"        var it = window(u8, \"\", 1, 1);"},
{"lineNum":" 2237","line":"        try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2238","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2239","line":""},
{"lineNum":" 2240","line":"        it = window(u8, \"\", 10, 1);"},
{"lineNum":" 2241","line":"        try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2242","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2243","line":""},
{"lineNum":" 2244","line":"        it = window(u8, \"\", 1, 10);"},
{"lineNum":" 2245","line":"        try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2246","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2247","line":""},
{"lineNum":" 2248","line":"        it = window(u8, \"\", 10, 10);"},
{"lineNum":" 2249","line":"        try testing.expectEqualSlices(u8, it.next().?, \"\");"},
{"lineNum":" 2250","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2251","line":"    }"},
{"lineNum":" 2252","line":""},
{"lineNum":" 2253","line":"    {"},
{"lineNum":" 2254","line":"        // first"},
{"lineNum":" 2255","line":"        var it = window(u8, \"abcdefg\", 3, 3);"},
{"lineNum":" 2256","line":"        try testing.expectEqualSlices(u8, it.first(), \"abc\");"},
{"lineNum":" 2257","line":"        it.reset();"},
{"lineNum":" 2258","line":"        try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2259","line":"    }"},
{"lineNum":" 2260","line":""},
{"lineNum":" 2261","line":"    {"},
{"lineNum":" 2262","line":"        // reset"},
{"lineNum":" 2263","line":"        var it = window(u8, \"abcdefg\", 3, 3);"},
{"lineNum":" 2264","line":"        try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2265","line":"        try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 2266","line":"        try testing.expectEqualSlices(u8, it.next().?, \"g\");"},
{"lineNum":" 2267","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2268","line":""},
{"lineNum":" 2269","line":"        it.reset();"},
{"lineNum":" 2270","line":"        try testing.expectEqualSlices(u8, it.next().?, \"abc\");"},
{"lineNum":" 2271","line":"        try testing.expectEqualSlices(u8, it.next().?, \"def\");"},
{"lineNum":" 2272","line":"        try testing.expectEqualSlices(u8, it.next().?, \"g\");"},
{"lineNum":" 2273","line":"        try testing.expectEqual(it.next(), null);"},
{"lineNum":" 2274","line":"    }"},
{"lineNum":" 2275","line":"}"},
{"lineNum":" 2276","line":""},
{"lineNum":" 2277","line":"pub fn WindowIterator(comptime T: type) type {"},
{"lineNum":" 2278","line":"    return struct {"},
{"lineNum":" 2279","line":"        buffer: []const T,"},
{"lineNum":" 2280","line":"        index: ?usize,"},
{"lineNum":" 2281","line":"        size: usize,"},
{"lineNum":" 2282","line":"        advance: usize,"},
{"lineNum":" 2283","line":""},
{"lineNum":" 2284","line":"        const Self = @This();"},
{"lineNum":" 2285","line":""},
{"lineNum":" 2286","line":"        /// Returns a slice of the first window. This never fails."},
{"lineNum":" 2287","line":"        /// Call this only to get the first window and then use `next` to get"},
{"lineNum":" 2288","line":"        /// all subsequent windows."},
{"lineNum":" 2289","line":"        pub fn first(self: *Self) []const T {"},
{"lineNum":" 2290","line":"            assert(self.index.? == 0);"},
{"lineNum":" 2291","line":"            return self.next().?;"},
{"lineNum":" 2292","line":"        }"},
{"lineNum":" 2293","line":""},
{"lineNum":" 2294","line":"        /// Returns a slice of the next window, or null if window is at end."},
{"lineNum":" 2295","line":"        pub fn next(self: *Self) ?[]const T {"},
{"lineNum":" 2296","line":"            const start = self.index orelse return null;"},
{"lineNum":" 2297","line":"            const next_index = start + self.advance;"},
{"lineNum":" 2298","line":"            const end = if (start + self.size < self.buffer.len and next_index < self.buffer.len) blk: {"},
{"lineNum":" 2299","line":"                self.index = next_index;"},
{"lineNum":" 2300","line":"                break :blk start + self.size;"},
{"lineNum":" 2301","line":"            } else blk: {"},
{"lineNum":" 2302","line":"                self.index = null;"},
{"lineNum":" 2303","line":"                break :blk self.buffer.len;"},
{"lineNum":" 2304","line":"            };"},
{"lineNum":" 2305","line":""},
{"lineNum":" 2306","line":"            return self.buffer[start..end];"},
{"lineNum":" 2307","line":"        }"},
{"lineNum":" 2308","line":""},
{"lineNum":" 2309","line":"        /// Resets the iterator to the initial window."},
{"lineNum":" 2310","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":" 2311","line":"            self.index = 0;"},
{"lineNum":" 2312","line":"        }"},
{"lineNum":" 2313","line":"    };"},
{"lineNum":" 2314","line":"}"},
{"lineNum":" 2315","line":""},
{"lineNum":" 2316","line":"pub fn startsWith(comptime T: type, haystack: []const T, needle: []const T) bool {"},
{"lineNum":" 2317","line":"    return if (needle.len > haystack.len) false else eql(T, haystack[0..needle.len], needle);"},
{"lineNum":" 2318","line":"}"},
{"lineNum":" 2319","line":""},
{"lineNum":" 2320","line":"test \"startsWith\" {"},
{"lineNum":" 2321","line":"    try testing.expect(startsWith(u8, \"Bob\", \"Bo\"));"},
{"lineNum":" 2322","line":"    try testing.expect(!startsWith(u8, \"Needle in haystack\", \"haystack\"));"},
{"lineNum":" 2323","line":"}"},
{"lineNum":" 2324","line":""},
{"lineNum":" 2325","line":"pub fn endsWith(comptime T: type, haystack: []const T, needle: []const T) bool {"},
{"lineNum":" 2326","line":"    return if (needle.len > haystack.len) false else eql(T, haystack[haystack.len - needle.len ..], needle);"},
{"lineNum":" 2327","line":"}"},
{"lineNum":" 2328","line":""},
{"lineNum":" 2329","line":"test \"endsWith\" {"},
{"lineNum":" 2330","line":"    try testing.expect(endsWith(u8, \"Needle in haystack\", \"haystack\"));"},
{"lineNum":" 2331","line":"    try testing.expect(!endsWith(u8, \"Bob\", \"Bo\"));"},
{"lineNum":" 2332","line":"}"},
{"lineNum":" 2333","line":""},
{"lineNum":" 2334","line":"pub fn TokenIterator(comptime T: type) type {"},
{"lineNum":" 2335","line":"    return struct {"},
{"lineNum":" 2336","line":"        buffer: []const T,"},
{"lineNum":" 2337","line":"        delimiter_bytes: []const T,"},
{"lineNum":" 2338","line":"        index: usize,"},
{"lineNum":" 2339","line":""},
{"lineNum":" 2340","line":"        const Self = @This();"},
{"lineNum":" 2341","line":""},
{"lineNum":" 2342","line":"        /// Returns a slice of the current token, or null if tokenization is"},
{"lineNum":" 2343","line":"        /// complete, and advances to the next token."},
{"lineNum":" 2344","line":"        pub fn next(self: *Self) ?[]const T {"},
{"lineNum":" 2345","line":"            const result = self.peek() orelse return null;"},
{"lineNum":" 2346","line":"            self.index += result.len;"},
{"lineNum":" 2347","line":"            return result;"},
{"lineNum":" 2348","line":"        }"},
{"lineNum":" 2349","line":""},
{"lineNum":" 2350","line":"        /// Returns a slice of the current token, or null if tokenization is"},
{"lineNum":" 2351","line":"        /// complete. Does not advance to the next token."},
{"lineNum":" 2352","line":"        pub fn peek(self: *Self) ?[]const T {"},
{"lineNum":" 2353","line":"            // move to beginning of token"},
{"lineNum":" 2354","line":"            while (self.index < self.buffer.len and self.isSplitByte(self.buffer[self.index])) : (self.index += 1) {}"},
{"lineNum":" 2355","line":"            const start = self.index;"},
{"lineNum":" 2356","line":"            if (start == self.buffer.len) {"},
{"lineNum":" 2357","line":"                return null;"},
{"lineNum":" 2358","line":"            }"},
{"lineNum":" 2359","line":""},
{"lineNum":" 2360","line":"            // move to end of token"},
{"lineNum":" 2361","line":"            var end = start;"},
{"lineNum":" 2362","line":"            while (end < self.buffer.len and !self.isSplitByte(self.buffer[end])) : (end += 1) {}"},
{"lineNum":" 2363","line":""},
{"lineNum":" 2364","line":"            return self.buffer[start..end];"},
{"lineNum":" 2365","line":"        }"},
{"lineNum":" 2366","line":""},
{"lineNum":" 2367","line":"        /// Returns a slice of the remaining bytes. Does not affect iterator state."},
{"lineNum":" 2368","line":"        pub fn rest(self: Self) []const T {"},
{"lineNum":" 2369","line":"            // move to beginning of token"},
{"lineNum":" 2370","line":"            var index: usize = self.index;"},
{"lineNum":" 2371","line":"            while (index < self.buffer.len and self.isSplitByte(self.buffer[index])) : (index += 1) {}"},
{"lineNum":" 2372","line":"            return self.buffer[index..];"},
{"lineNum":" 2373","line":"        }"},
{"lineNum":" 2374","line":""},
{"lineNum":" 2375","line":"        /// Resets the iterator to the initial token."},
{"lineNum":" 2376","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":" 2377","line":"            self.index = 0;"},
{"lineNum":" 2378","line":"        }"},
{"lineNum":" 2379","line":""},
{"lineNum":" 2380","line":"        fn isSplitByte(self: Self, byte: T) bool {"},
{"lineNum":" 2381","line":"            for (self.delimiter_bytes) |delimiter_byte| {"},
{"lineNum":" 2382","line":"                if (byte == delimiter_byte) {"},
{"lineNum":" 2383","line":"                    return true;"},
{"lineNum":" 2384","line":"                }"},
{"lineNum":" 2385","line":"            }"},
{"lineNum":" 2386","line":"            return false;"},
{"lineNum":" 2387","line":"        }"},
{"lineNum":" 2388","line":"    };"},
{"lineNum":" 2389","line":"}"},
{"lineNum":" 2390","line":""},
{"lineNum":" 2391","line":"pub fn SplitIterator(comptime T: type) type {"},
{"lineNum":" 2392","line":"    return struct {"},
{"lineNum":" 2393","line":"        buffer: []const T,"},
{"lineNum":" 2394","line":"        index: ?usize,"},
{"lineNum":" 2395","line":"        delimiter: []const T,"},
{"lineNum":" 2396","line":""},
{"lineNum":" 2397","line":"        const Self = @This();"},
{"lineNum":" 2398","line":""},
{"lineNum":" 2399","line":"        /// Returns a slice of the first field. This never fails."},
{"lineNum":" 2400","line":"        /// Call this only to get the first field and then use `next` to get all subsequent fields."},
{"lineNum":" 2401","line":"        pub fn first(self: *Self) []const T {"},
{"lineNum":" 2402","line":"            assert(self.index.? == 0);"},
{"lineNum":" 2403","line":"            return self.next().?;"},
{"lineNum":" 2404","line":"        }"},
{"lineNum":" 2405","line":""},
{"lineNum":" 2406","line":"        /// Returns a slice of the next field, or null if splitting is complete."},
{"lineNum":" 2407","line":"        pub fn next(self: *Self) ?[]const T {"},
{"lineNum":" 2408","line":"            const start = self.index orelse return null;"},
{"lineNum":" 2409","line":"            const end = if (indexOfPos(T, self.buffer, start, self.delimiter)) |delim_start| blk: {"},
{"lineNum":" 2410","line":"                self.index = delim_start + self.delimiter.len;"},
{"lineNum":" 2411","line":"                break :blk delim_start;"},
{"lineNum":" 2412","line":"            } else blk: {"},
{"lineNum":" 2413","line":"                self.index = null;"},
{"lineNum":" 2414","line":"                break :blk self.buffer.len;"},
{"lineNum":" 2415","line":"            };"},
{"lineNum":" 2416","line":"            return self.buffer[start..end];"},
{"lineNum":" 2417","line":"        }"},
{"lineNum":" 2418","line":""},
{"lineNum":" 2419","line":"        /// Returns a slice of the remaining bytes. Does not affect iterator state."},
{"lineNum":" 2420","line":"        pub fn rest(self: Self) []const T {"},
{"lineNum":" 2421","line":"            const end = self.buffer.len;"},
{"lineNum":" 2422","line":"            const start = self.index orelse end;"},
{"lineNum":" 2423","line":"            return self.buffer[start..end];"},
{"lineNum":" 2424","line":"        }"},
{"lineNum":" 2425","line":""},
{"lineNum":" 2426","line":"        /// Resets the iterator to the initial slice."},
{"lineNum":" 2427","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":" 2428","line":"            self.index = 0;"},
{"lineNum":" 2429","line":"        }"},
{"lineNum":" 2430","line":"    };"},
{"lineNum":" 2431","line":"}"},
{"lineNum":" 2432","line":""},
{"lineNum":" 2433","line":"pub fn SplitBackwardsIterator(comptime T: type) type {"},
{"lineNum":" 2434","line":"    return struct {"},
{"lineNum":" 2435","line":"        buffer: []const T,"},
{"lineNum":" 2436","line":"        index: ?usize,"},
{"lineNum":" 2437","line":"        delimiter: []const T,"},
{"lineNum":" 2438","line":""},
{"lineNum":" 2439","line":"        const Self = @This();"},
{"lineNum":" 2440","line":""},
{"lineNum":" 2441","line":"        /// Returns a slice of the first field. This never fails."},
{"lineNum":" 2442","line":"        /// Call this only to get the first field and then use `next` to get all subsequent fields."},
{"lineNum":" 2443","line":"        pub fn first(self: *Self) []const T {"},
{"lineNum":" 2444","line":"            assert(self.index.? == self.buffer.len);"},
{"lineNum":" 2445","line":"            return self.next().?;"},
{"lineNum":" 2446","line":"        }"},
{"lineNum":" 2447","line":""},
{"lineNum":" 2448","line":"        /// Returns a slice of the next field, or null if splitting is complete."},
{"lineNum":" 2449","line":"        pub fn next(self: *Self) ?[]const T {"},
{"lineNum":" 2450","line":"            const end = self.index orelse return null;"},
{"lineNum":" 2451","line":"            const start = if (lastIndexOf(T, self.buffer[0..end], self.delimiter)) |delim_start| blk: {"},
{"lineNum":" 2452","line":"                self.index = delim_start;"},
{"lineNum":" 2453","line":"                break :blk delim_start + self.delimiter.len;"},
{"lineNum":" 2454","line":"            } else blk: {"},
{"lineNum":" 2455","line":"                self.index = null;"},
{"lineNum":" 2456","line":"                break :blk 0;"},
{"lineNum":" 2457","line":"            };"},
{"lineNum":" 2458","line":"            return self.buffer[start..end];"},
{"lineNum":" 2459","line":"        }"},
{"lineNum":" 2460","line":""},
{"lineNum":" 2461","line":"        /// Returns a slice of the remaining bytes. Does not affect iterator state."},
{"lineNum":" 2462","line":"        pub fn rest(self: Self) []const T {"},
{"lineNum":" 2463","line":"            const end = self.index orelse 0;"},
{"lineNum":" 2464","line":"            return self.buffer[0..end];"},
{"lineNum":" 2465","line":"        }"},
{"lineNum":" 2466","line":""},
{"lineNum":" 2467","line":"        /// Resets the iterator to the initial slice."},
{"lineNum":" 2468","line":"        pub fn reset(self: *Self) void {"},
{"lineNum":" 2469","line":"            self.index = self.buffer.len;"},
{"lineNum":" 2470","line":"        }"},
{"lineNum":" 2471","line":"    };"},
{"lineNum":" 2472","line":"}"},
{"lineNum":" 2473","line":""},
{"lineNum":" 2474","line":"/// Naively combines a series of slices with a separator."},
{"lineNum":" 2475","line":"/// Allocates memory for the result, which must be freed by the caller."},
{"lineNum":" 2476","line":"pub fn join(allocator: Allocator, separator: []const u8, slices: []const []const u8) ![]u8 {"},
{"lineNum":" 2477","line":"    return joinMaybeZ(allocator, separator, slices, false);"},
{"lineNum":" 2478","line":"}"},
{"lineNum":" 2479","line":""},
{"lineNum":" 2480","line":"/// Naively combines a series of slices with a separator and null terminator."},
{"lineNum":" 2481","line":"/// Allocates memory for the result, which must be freed by the caller."},
{"lineNum":" 2482","line":"pub fn joinZ(allocator: Allocator, separator: []const u8, slices: []const []const u8) ![:0]u8 {"},
{"lineNum":" 2483","line":"    const out = try joinMaybeZ(allocator, separator, slices, true);"},
{"lineNum":" 2484","line":"    return out[0 .. out.len - 1 :0];"},
{"lineNum":" 2485","line":"}"},
{"lineNum":" 2486","line":""},
{"lineNum":" 2487","line":"fn joinMaybeZ(allocator: Allocator, separator: []const u8, slices: []const []const u8, zero: bool) ![]u8 {"},
{"lineNum":" 2488","line":"    if (slices.len == 0) return if (zero) try allocator.dupe(u8, &[1]u8{0}) else &[0]u8{};"},
{"lineNum":" 2489","line":""},
{"lineNum":" 2490","line":"    const total_len = blk: {"},
{"lineNum":" 2491","line":"        var sum: usize = separator.len * (slices.len - 1);"},
{"lineNum":" 2492","line":"        for (slices) |slice| sum += slice.len;"},
{"lineNum":" 2493","line":"        if (zero) sum += 1;"},
{"lineNum":" 2494","line":"        break :blk sum;"},
{"lineNum":" 2495","line":"    };"},
{"lineNum":" 2496","line":""},
{"lineNum":" 2497","line":"    const buf = try allocator.alloc(u8, total_len);"},
{"lineNum":" 2498","line":"    errdefer allocator.free(buf);"},
{"lineNum":" 2499","line":""},
{"lineNum":" 2500","line":"    copy(u8, buf, slices[0]);"},
{"lineNum":" 2501","line":"    var buf_index: usize = slices[0].len;"},
{"lineNum":" 2502","line":"    for (slices[1..]) |slice| {"},
{"lineNum":" 2503","line":"        copy(u8, buf[buf_index..], separator);"},
{"lineNum":" 2504","line":"        buf_index += separator.len;"},
{"lineNum":" 2505","line":"        copy(u8, buf[buf_index..], slice);"},
{"lineNum":" 2506","line":"        buf_index += slice.len;"},
{"lineNum":" 2507","line":"    }"},
{"lineNum":" 2508","line":""},
{"lineNum":" 2509","line":"    if (zero) buf[buf.len - 1] = 0;"},
{"lineNum":" 2510","line":""},
{"lineNum":" 2511","line":"    // No need for shrink since buf is exactly the correct size."},
{"lineNum":" 2512","line":"    return buf;"},
{"lineNum":" 2513","line":"}"},
{"lineNum":" 2514","line":""},
{"lineNum":" 2515","line":"test \"join\" {"},
{"lineNum":" 2516","line":"    {"},
{"lineNum":" 2517","line":"        const str = try join(testing.allocator, \",\", &[_][]const u8{});"},
{"lineNum":" 2518","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2519","line":"        try testing.expect(eql(u8, str, \"\"));"},
{"lineNum":" 2520","line":"    }"},
{"lineNum":" 2521","line":"    {"},
{"lineNum":" 2522","line":"        const str = try join(testing.allocator, \",\", &[_][]const u8{ \"a\", \"b\", \"c\" });"},
{"lineNum":" 2523","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2524","line":"        try testing.expect(eql(u8, str, \"a,b,c\"));"},
{"lineNum":" 2525","line":"    }"},
{"lineNum":" 2526","line":"    {"},
{"lineNum":" 2527","line":"        const str = try join(testing.allocator, \",\", &[_][]const u8{\"a\"});"},
{"lineNum":" 2528","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2529","line":"        try testing.expect(eql(u8, str, \"a\"));"},
{"lineNum":" 2530","line":"    }"},
{"lineNum":" 2531","line":"    {"},
{"lineNum":" 2532","line":"        const str = try join(testing.allocator, \",\", &[_][]const u8{ \"a\", \"\", \"b\", \"\", \"c\" });"},
{"lineNum":" 2533","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2534","line":"        try testing.expect(eql(u8, str, \"a,,b,,c\"));"},
{"lineNum":" 2535","line":"    }"},
{"lineNum":" 2536","line":"}"},
{"lineNum":" 2537","line":""},
{"lineNum":" 2538","line":"test \"joinZ\" {"},
{"lineNum":" 2539","line":"    {"},
{"lineNum":" 2540","line":"        const str = try joinZ(testing.allocator, \",\", &[_][]const u8{});"},
{"lineNum":" 2541","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2542","line":"        try testing.expect(eql(u8, str, \"\"));"},
{"lineNum":" 2543","line":"        try testing.expectEqual(str[str.len], 0);"},
{"lineNum":" 2544","line":"    }"},
{"lineNum":" 2545","line":"    {"},
{"lineNum":" 2546","line":"        const str = try joinZ(testing.allocator, \",\", &[_][]const u8{ \"a\", \"b\", \"c\" });"},
{"lineNum":" 2547","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2548","line":"        try testing.expect(eql(u8, str, \"a,b,c\"));"},
{"lineNum":" 2549","line":"        try testing.expectEqual(str[str.len], 0);"},
{"lineNum":" 2550","line":"    }"},
{"lineNum":" 2551","line":"    {"},
{"lineNum":" 2552","line":"        const str = try joinZ(testing.allocator, \",\", &[_][]const u8{\"a\"});"},
{"lineNum":" 2553","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2554","line":"        try testing.expect(eql(u8, str, \"a\"));"},
{"lineNum":" 2555","line":"        try testing.expectEqual(str[str.len], 0);"},
{"lineNum":" 2556","line":"    }"},
{"lineNum":" 2557","line":"    {"},
{"lineNum":" 2558","line":"        const str = try joinZ(testing.allocator, \",\", &[_][]const u8{ \"a\", \"\", \"b\", \"\", \"c\" });"},
{"lineNum":" 2559","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2560","line":"        try testing.expect(eql(u8, str, \"a,,b,,c\"));"},
{"lineNum":" 2561","line":"        try testing.expectEqual(str[str.len], 0);"},
{"lineNum":" 2562","line":"    }"},
{"lineNum":" 2563","line":"}"},
{"lineNum":" 2564","line":""},
{"lineNum":" 2565","line":"/// Copies each T from slices into a new slice that exactly holds all the elements."},
{"lineNum":" 2566","line":"pub fn concat(allocator: Allocator, comptime T: type, slices: []const []const T) ![]T {"},
{"lineNum":" 2567","line":"    return concatMaybeSentinel(allocator, T, slices, null);"},
{"lineNum":" 2568","line":"}"},
{"lineNum":" 2569","line":""},
{"lineNum":" 2570","line":"/// Copies each T from slices into a new slice that exactly holds all the elements."},
{"lineNum":" 2571","line":"pub fn concatWithSentinel(allocator: Allocator, comptime T: type, slices: []const []const T, comptime s: T) ![:s]T {"},
{"lineNum":" 2572","line":"    const ret = try concatMaybeSentinel(allocator, T, slices, s);"},
{"lineNum":" 2573","line":"    return ret[0 .. ret.len - 1 :s];"},
{"lineNum":" 2574","line":"}"},
{"lineNum":" 2575","line":""},
{"lineNum":" 2576","line":"/// Copies each T from slices into a new slice that exactly holds all the elements as well as the sentinel."},
{"lineNum":" 2577","line":"pub fn concatMaybeSentinel(allocator: Allocator, comptime T: type, slices: []const []const T, comptime s: ?T) ![]T {"},
{"lineNum":" 2578","line":"    if (slices.len == 0) return if (s) |sentinel| try allocator.dupe(T, &[1]T{sentinel}) else &[0]T{};"},
{"lineNum":" 2579","line":""},
{"lineNum":" 2580","line":"    const total_len = blk: {"},
{"lineNum":" 2581","line":"        var sum: usize = 0;"},
{"lineNum":" 2582","line":"        for (slices) |slice| {"},
{"lineNum":" 2583","line":"            sum += slice.len;"},
{"lineNum":" 2584","line":"        }"},
{"lineNum":" 2585","line":""},
{"lineNum":" 2586","line":"        if (s) |_| {"},
{"lineNum":" 2587","line":"            sum += 1;"},
{"lineNum":" 2588","line":"        }"},
{"lineNum":" 2589","line":""},
{"lineNum":" 2590","line":"        break :blk sum;"},
{"lineNum":" 2591","line":"    };"},
{"lineNum":" 2592","line":""},
{"lineNum":" 2593","line":"    const buf = try allocator.alloc(T, total_len);"},
{"lineNum":" 2594","line":"    errdefer allocator.free(buf);"},
{"lineNum":" 2595","line":""},
{"lineNum":" 2596","line":"    var buf_index: usize = 0;"},
{"lineNum":" 2597","line":"    for (slices) |slice| {"},
{"lineNum":" 2598","line":"        copy(T, buf[buf_index..], slice);"},
{"lineNum":" 2599","line":"        buf_index += slice.len;"},
{"lineNum":" 2600","line":"    }"},
{"lineNum":" 2601","line":""},
{"lineNum":" 2602","line":"    if (s) |sentinel| {"},
{"lineNum":" 2603","line":"        buf[buf.len - 1] = sentinel;"},
{"lineNum":" 2604","line":"    }"},
{"lineNum":" 2605","line":""},
{"lineNum":" 2606","line":"    // No need for shrink since buf is exactly the correct size."},
{"lineNum":" 2607","line":"    return buf;"},
{"lineNum":" 2608","line":"}"},
{"lineNum":" 2609","line":""},
{"lineNum":" 2610","line":"test \"concat\" {"},
{"lineNum":" 2611","line":"    {"},
{"lineNum":" 2612","line":"        const str = try concat(testing.allocator, u8, &[_][]const u8{ \"abc\", \"def\", \"ghi\" });"},
{"lineNum":" 2613","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2614","line":"        try testing.expect(eql(u8, str, \"abcdefghi\"));"},
{"lineNum":" 2615","line":"    }"},
{"lineNum":" 2616","line":"    {"},
{"lineNum":" 2617","line":"        const str = try concat(testing.allocator, u32, &[_][]const u32{"},
{"lineNum":" 2618","line":"            &[_]u32{ 0, 1 },"},
{"lineNum":" 2619","line":"            &[_]u32{ 2, 3, 4 },"},
{"lineNum":" 2620","line":"            &[_]u32{},"},
{"lineNum":" 2621","line":"            &[_]u32{5},"},
{"lineNum":" 2622","line":"        });"},
{"lineNum":" 2623","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2624","line":"        try testing.expect(eql(u32, str, &[_]u32{ 0, 1, 2, 3, 4, 5 }));"},
{"lineNum":" 2625","line":"    }"},
{"lineNum":" 2626","line":"    {"},
{"lineNum":" 2627","line":"        const str = try concatWithSentinel(testing.allocator, u8, &[_][]const u8{ \"abc\", \"def\", \"ghi\" }, 0);"},
{"lineNum":" 2628","line":"        defer testing.allocator.free(str);"},
{"lineNum":" 2629","line":"        try testing.expectEqualSentinel(u8, 0, str, \"abcdefghi\");"},
{"lineNum":" 2630","line":"    }"},
{"lineNum":" 2631","line":"    {"},
{"lineNum":" 2632","line":"        const slice = try concatWithSentinel(testing.allocator, u8, &[_][]const u8{}, 0);"},
{"lineNum":" 2633","line":"        defer testing.allocator.free(slice);"},
{"lineNum":" 2634","line":"        try testing.expectEqualSentinel(u8, 0, slice, &[_:0]u8{});"},
{"lineNum":" 2635","line":"    }"},
{"lineNum":" 2636","line":"    {"},
{"lineNum":" 2637","line":"        const slice = try concatWithSentinel(testing.allocator, u32, &[_][]const u32{"},
{"lineNum":" 2638","line":"            &[_]u32{ 0, 1 },"},
{"lineNum":" 2639","line":"            &[_]u32{ 2, 3, 4 },"},
{"lineNum":" 2640","line":"            &[_]u32{},"},
{"lineNum":" 2641","line":"            &[_]u32{5},"},
{"lineNum":" 2642","line":"        }, 2);"},
{"lineNum":" 2643","line":"        defer testing.allocator.free(slice);"},
{"lineNum":" 2644","line":"        try testing.expectEqualSentinel(u32, 2, slice, &[_:2]u32{ 0, 1, 2, 3, 4, 5 });"},
{"lineNum":" 2645","line":"    }"},
{"lineNum":" 2646","line":"}"},
{"lineNum":" 2647","line":""},
{"lineNum":" 2648","line":"test \"testStringEquality\" {"},
{"lineNum":" 2649","line":"    try testing.expect(eql(u8, \"abcd\", \"abcd\"));"},
{"lineNum":" 2650","line":"    try testing.expect(!eql(u8, \"abcdef\", \"abZdef\"));"},
{"lineNum":" 2651","line":"    try testing.expect(!eql(u8, \"abcdefg\", \"abcdef\"));"},
{"lineNum":" 2652","line":"}"},
{"lineNum":" 2653","line":""},
{"lineNum":" 2654","line":"test \"testReadInt\" {"},
{"lineNum":" 2655","line":"    try testReadIntImpl();"},
{"lineNum":" 2656","line":"    comptime try testReadIntImpl();"},
{"lineNum":" 2657","line":"}"},
{"lineNum":" 2658","line":"fn testReadIntImpl() !void {"},
{"lineNum":" 2659","line":"    {"},
{"lineNum":" 2660","line":"        const bytes = [_]u8{"},
{"lineNum":" 2661","line":"            0x12,"},
{"lineNum":" 2662","line":"            0x34,"},
{"lineNum":" 2663","line":"            0x56,"},
{"lineNum":" 2664","line":"            0x78,"},
{"lineNum":" 2665","line":"        };"},
{"lineNum":" 2666","line":"        try testing.expect(readInt(u32, &bytes, Endian.Big) == 0x12345678);"},
{"lineNum":" 2667","line":"        try testing.expect(readIntBig(u32, &bytes) == 0x12345678);"},
{"lineNum":" 2668","line":"        try testing.expect(readIntBig(i32, &bytes) == 0x12345678);"},
{"lineNum":" 2669","line":"        try testing.expect(readInt(u32, &bytes, Endian.Little) == 0x78563412);"},
{"lineNum":" 2670","line":"        try testing.expect(readIntLittle(u32, &bytes) == 0x78563412);"},
{"lineNum":" 2671","line":"        try testing.expect(readIntLittle(i32, &bytes) == 0x78563412);"},
{"lineNum":" 2672","line":"    }"},
{"lineNum":" 2673","line":"    {"},
{"lineNum":" 2674","line":"        const buf = [_]u8{"},
{"lineNum":" 2675","line":"            0x00,"},
{"lineNum":" 2676","line":"            0x00,"},
{"lineNum":" 2677","line":"            0x12,"},
{"lineNum":" 2678","line":"            0x34,"},
{"lineNum":" 2679","line":"        };"},
{"lineNum":" 2680","line":"        const answer = readInt(u32, &buf, Endian.Big);"},
{"lineNum":" 2681","line":"        try testing.expect(answer == 0x00001234);"},
{"lineNum":" 2682","line":"    }"},
{"lineNum":" 2683","line":"    {"},
{"lineNum":" 2684","line":"        const buf = [_]u8{"},
{"lineNum":" 2685","line":"            0x12,"},
{"lineNum":" 2686","line":"            0x34,"},
{"lineNum":" 2687","line":"            0x00,"},
{"lineNum":" 2688","line":"            0x00,"},
{"lineNum":" 2689","line":"        };"},
{"lineNum":" 2690","line":"        const answer = readInt(u32, &buf, Endian.Little);"},
{"lineNum":" 2691","line":"        try testing.expect(answer == 0x00003412);"},
{"lineNum":" 2692","line":"    }"},
{"lineNum":" 2693","line":"    {"},
{"lineNum":" 2694","line":"        const bytes = [_]u8{"},
{"lineNum":" 2695","line":"            0xff,"},
{"lineNum":" 2696","line":"            0xfe,"},
{"lineNum":" 2697","line":"        };"},
{"lineNum":" 2698","line":"        try testing.expect(readIntBig(u16, &bytes) == 0xfffe);"},
{"lineNum":" 2699","line":"        try testing.expect(readIntBig(i16, &bytes) == -0x0002);"},
{"lineNum":" 2700","line":"        try testing.expect(readIntLittle(u16, &bytes) == 0xfeff);"},
{"lineNum":" 2701","line":"        try testing.expect(readIntLittle(i16, &bytes) == -0x0101);"},
{"lineNum":" 2702","line":"    }"},
{"lineNum":" 2703","line":"}"},
{"lineNum":" 2704","line":""},
{"lineNum":" 2705","line":"test \"writeIntSlice\" {"},
{"lineNum":" 2706","line":"    try testWriteIntImpl();"},
{"lineNum":" 2707","line":"    comptime try testWriteIntImpl();"},
{"lineNum":" 2708","line":"}"},
{"lineNum":" 2709","line":"fn testWriteIntImpl() !void {"},
{"lineNum":" 2710","line":"    var bytes: [8]u8 = undefined;"},
{"lineNum":" 2711","line":""},
{"lineNum":" 2712","line":"    writeIntSlice(u0, bytes[0..], 0, Endian.Big);"},
{"lineNum":" 2713","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2714","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2715","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2716","line":"    }));"},
{"lineNum":" 2717","line":""},
{"lineNum":" 2718","line":"    writeIntSlice(u0, bytes[0..], 0, Endian.Little);"},
{"lineNum":" 2719","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2720","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2721","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2722","line":"    }));"},
{"lineNum":" 2723","line":""},
{"lineNum":" 2724","line":"    writeIntSlice(u64, bytes[0..], 0x12345678CAFEBABE, Endian.Big);"},
{"lineNum":" 2725","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2726","line":"        0x12,"},
{"lineNum":" 2727","line":"        0x34,"},
{"lineNum":" 2728","line":"        0x56,"},
{"lineNum":" 2729","line":"        0x78,"},
{"lineNum":" 2730","line":"        0xCA,"},
{"lineNum":" 2731","line":"        0xFE,"},
{"lineNum":" 2732","line":"        0xBA,"},
{"lineNum":" 2733","line":"        0xBE,"},
{"lineNum":" 2734","line":"    }));"},
{"lineNum":" 2735","line":""},
{"lineNum":" 2736","line":"    writeIntSlice(u64, bytes[0..], 0xBEBAFECA78563412, Endian.Little);"},
{"lineNum":" 2737","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2738","line":"        0x12,"},
{"lineNum":" 2739","line":"        0x34,"},
{"lineNum":" 2740","line":"        0x56,"},
{"lineNum":" 2741","line":"        0x78,"},
{"lineNum":" 2742","line":"        0xCA,"},
{"lineNum":" 2743","line":"        0xFE,"},
{"lineNum":" 2744","line":"        0xBA,"},
{"lineNum":" 2745","line":"        0xBE,"},
{"lineNum":" 2746","line":"    }));"},
{"lineNum":" 2747","line":""},
{"lineNum":" 2748","line":"    writeIntSlice(u32, bytes[0..], 0x12345678, Endian.Big);"},
{"lineNum":" 2749","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2750","line":"        0x00,"},
{"lineNum":" 2751","line":"        0x00,"},
{"lineNum":" 2752","line":"        0x00,"},
{"lineNum":" 2753","line":"        0x00,"},
{"lineNum":" 2754","line":"        0x12,"},
{"lineNum":" 2755","line":"        0x34,"},
{"lineNum":" 2756","line":"        0x56,"},
{"lineNum":" 2757","line":"        0x78,"},
{"lineNum":" 2758","line":"    }));"},
{"lineNum":" 2759","line":""},
{"lineNum":" 2760","line":"    writeIntSlice(u32, bytes[0..], 0x78563412, Endian.Little);"},
{"lineNum":" 2761","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2762","line":"        0x12,"},
{"lineNum":" 2763","line":"        0x34,"},
{"lineNum":" 2764","line":"        0x56,"},
{"lineNum":" 2765","line":"        0x78,"},
{"lineNum":" 2766","line":"        0x00,"},
{"lineNum":" 2767","line":"        0x00,"},
{"lineNum":" 2768","line":"        0x00,"},
{"lineNum":" 2769","line":"        0x00,"},
{"lineNum":" 2770","line":"    }));"},
{"lineNum":" 2771","line":""},
{"lineNum":" 2772","line":"    writeIntSlice(u16, bytes[0..], 0x1234, Endian.Big);"},
{"lineNum":" 2773","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2774","line":"        0x00,"},
{"lineNum":" 2775","line":"        0x00,"},
{"lineNum":" 2776","line":"        0x00,"},
{"lineNum":" 2777","line":"        0x00,"},
{"lineNum":" 2778","line":"        0x00,"},
{"lineNum":" 2779","line":"        0x00,"},
{"lineNum":" 2780","line":"        0x12,"},
{"lineNum":" 2781","line":"        0x34,"},
{"lineNum":" 2782","line":"    }));"},
{"lineNum":" 2783","line":""},
{"lineNum":" 2784","line":"    writeIntSlice(u16, bytes[0..], 0x1234, Endian.Little);"},
{"lineNum":" 2785","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2786","line":"        0x34,"},
{"lineNum":" 2787","line":"        0x12,"},
{"lineNum":" 2788","line":"        0x00,"},
{"lineNum":" 2789","line":"        0x00,"},
{"lineNum":" 2790","line":"        0x00,"},
{"lineNum":" 2791","line":"        0x00,"},
{"lineNum":" 2792","line":"        0x00,"},
{"lineNum":" 2793","line":"        0x00,"},
{"lineNum":" 2794","line":"    }));"},
{"lineNum":" 2795","line":""},
{"lineNum":" 2796","line":"    writeIntSlice(i16, bytes[0..], @as(i16, -21555), Endian.Little);"},
{"lineNum":" 2797","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2798","line":"        0xCD,"},
{"lineNum":" 2799","line":"        0xAB,"},
{"lineNum":" 2800","line":"        0x00,"},
{"lineNum":" 2801","line":"        0x00,"},
{"lineNum":" 2802","line":"        0x00,"},
{"lineNum":" 2803","line":"        0x00,"},
{"lineNum":" 2804","line":"        0x00,"},
{"lineNum":" 2805","line":"        0x00,"},
{"lineNum":" 2806","line":"    }));"},
{"lineNum":" 2807","line":""},
{"lineNum":" 2808","line":"    writeIntSlice(i16, bytes[0..], @as(i16, -21555), Endian.Big);"},
{"lineNum":" 2809","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2810","line":"        0x00,"},
{"lineNum":" 2811","line":"        0x00,"},
{"lineNum":" 2812","line":"        0x00,"},
{"lineNum":" 2813","line":"        0x00,"},
{"lineNum":" 2814","line":"        0x00,"},
{"lineNum":" 2815","line":"        0x00,"},
{"lineNum":" 2816","line":"        0xAB,"},
{"lineNum":" 2817","line":"        0xCD,"},
{"lineNum":" 2818","line":"    }));"},
{"lineNum":" 2819","line":""},
{"lineNum":" 2820","line":"    writeIntSlice(u8, bytes[0..], 0x12, Endian.Big);"},
{"lineNum":" 2821","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2822","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2823","line":"        0x00, 0x00, 0x00, 0x12,"},
{"lineNum":" 2824","line":"    }));"},
{"lineNum":" 2825","line":""},
{"lineNum":" 2826","line":"    writeIntSlice(u8, bytes[0..], 0x12, Endian.Little);"},
{"lineNum":" 2827","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2828","line":"        0x12, 0x00, 0x00, 0x00,"},
{"lineNum":" 2829","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2830","line":"    }));"},
{"lineNum":" 2831","line":""},
{"lineNum":" 2832","line":"    writeIntSlice(i8, bytes[0..], -1, Endian.Big);"},
{"lineNum":" 2833","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2834","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2835","line":"        0x00, 0x00, 0x00, 0xff,"},
{"lineNum":" 2836","line":"    }));"},
{"lineNum":" 2837","line":""},
{"lineNum":" 2838","line":"    writeIntSlice(i8, bytes[0..], -1, Endian.Little);"},
{"lineNum":" 2839","line":"    try testing.expect(eql(u8, &bytes, &[_]u8{"},
{"lineNum":" 2840","line":"        0xff, 0x00, 0x00, 0x00,"},
{"lineNum":" 2841","line":"        0x00, 0x00, 0x00, 0x00,"},
{"lineNum":" 2842","line":"    }));"},
{"lineNum":" 2843","line":"}"},
{"lineNum":" 2844","line":""},
{"lineNum":" 2845","line":"/// Returns the smallest number in a slice. O(n)."},
{"lineNum":" 2846","line":"/// `slice` must not be empty."},
{"lineNum":" 2847","line":"pub fn min(comptime T: type, slice: []const T) T {"},
{"lineNum":" 2848","line":"    assert(slice.len > 0);"},
{"lineNum":" 2849","line":"    var best = slice[0];"},
{"lineNum":" 2850","line":"    for (slice[1..]) |item| {"},
{"lineNum":" 2851","line":"        best = math.min(best, item);"},
{"lineNum":" 2852","line":"    }"},
{"lineNum":" 2853","line":"    return best;"},
{"lineNum":" 2854","line":"}"},
{"lineNum":" 2855","line":""},
{"lineNum":" 2856","line":"test \"min\" {"},
{"lineNum":" 2857","line":"    try testing.expectEqual(min(u8, \"abcdefg\"), \'a\');"},
{"lineNum":" 2858","line":"    try testing.expectEqual(min(u8, \"bcdefga\"), \'a\');"},
{"lineNum":" 2859","line":"    try testing.expectEqual(min(u8, \"a\"), \'a\');"},
{"lineNum":" 2860","line":"}"},
{"lineNum":" 2861","line":""},
{"lineNum":" 2862","line":"/// Returns the largest number in a slice. O(n)."},
{"lineNum":" 2863","line":"/// `slice` must not be empty."},
{"lineNum":" 2864","line":"pub fn max(comptime T: type, slice: []const T) T {"},
{"lineNum":" 2865","line":"    assert(slice.len > 0);"},
{"lineNum":" 2866","line":"    var best = slice[0];"},
{"lineNum":" 2867","line":"    for (slice[1..]) |item| {"},
{"lineNum":" 2868","line":"        best = math.max(best, item);"},
{"lineNum":" 2869","line":"    }"},
{"lineNum":" 2870","line":"    return best;"},
{"lineNum":" 2871","line":"}"},
{"lineNum":" 2872","line":""},
{"lineNum":" 2873","line":"test \"max\" {"},
{"lineNum":" 2874","line":"    try testing.expectEqual(max(u8, \"abcdefg\"), \'g\');"},
{"lineNum":" 2875","line":"    try testing.expectEqual(max(u8, \"gabcdef\"), \'g\');"},
{"lineNum":" 2876","line":"    try testing.expectEqual(max(u8, \"g\"), \'g\');"},
{"lineNum":" 2877","line":"}"},
{"lineNum":" 2878","line":""},
{"lineNum":" 2879","line":"/// Finds the smallest and largest number in a slice. O(n)."},
{"lineNum":" 2880","line":"/// Returns an anonymous struct with the fields `min` and `max`."},
{"lineNum":" 2881","line":"/// `slice` must not be empty."},
{"lineNum":" 2882","line":"pub fn minMax(comptime T: type, slice: []const T) struct { min: T, max: T } {"},
{"lineNum":" 2883","line":"    assert(slice.len > 0);"},
{"lineNum":" 2884","line":"    var minVal = slice[0];"},
{"lineNum":" 2885","line":"    var maxVal = slice[0];"},
{"lineNum":" 2886","line":"    for (slice[1..]) |item| {"},
{"lineNum":" 2887","line":"        minVal = math.min(minVal, item);"},
{"lineNum":" 2888","line":"        maxVal = math.max(maxVal, item);"},
{"lineNum":" 2889","line":"    }"},
{"lineNum":" 2890","line":"    return .{ .min = minVal, .max = maxVal };"},
{"lineNum":" 2891","line":"}"},
{"lineNum":" 2892","line":""},
{"lineNum":" 2893","line":"test \"minMax\" {"},
{"lineNum":" 2894","line":"    try testing.expectEqual(minMax(u8, \"abcdefg\"), .{ .min = \'a\', .max = \'g\' });"},
{"lineNum":" 2895","line":"    try testing.expectEqual(minMax(u8, \"bcdefga\"), .{ .min = \'a\', .max = \'g\' });"},
{"lineNum":" 2896","line":"    try testing.expectEqual(minMax(u8, \"a\"), .{ .min = \'a\', .max = \'a\' });"},
{"lineNum":" 2897","line":"}"},
{"lineNum":" 2898","line":""},
{"lineNum":" 2899","line":"/// Returns the index of the smallest number in a slice. O(n)."},
{"lineNum":" 2900","line":"/// `slice` must not be empty."},
{"lineNum":" 2901","line":"pub fn indexOfMin(comptime T: type, slice: []const T) usize {"},
{"lineNum":" 2902","line":"    assert(slice.len > 0);"},
{"lineNum":" 2903","line":"    var best = slice[0];"},
{"lineNum":" 2904","line":"    var index: usize = 0;"},
{"lineNum":" 2905","line":"    for (slice[1..], 0..) |item, i| {"},
{"lineNum":" 2906","line":"        if (item < best) {"},
{"lineNum":" 2907","line":"            best = item;"},
{"lineNum":" 2908","line":"            index = i + 1;"},
{"lineNum":" 2909","line":"        }"},
{"lineNum":" 2910","line":"    }"},
{"lineNum":" 2911","line":"    return index;"},
{"lineNum":" 2912","line":"}"},
{"lineNum":" 2913","line":""},
{"lineNum":" 2914","line":"test \"indexOfMin\" {"},
{"lineNum":" 2915","line":"    try testing.expectEqual(indexOfMin(u8, \"abcdefg\"), 0);"},
{"lineNum":" 2916","line":"    try testing.expectEqual(indexOfMin(u8, \"bcdefga\"), 6);"},
{"lineNum":" 2917","line":"    try testing.expectEqual(indexOfMin(u8, \"a\"), 0);"},
{"lineNum":" 2918","line":"}"},
{"lineNum":" 2919","line":""},
{"lineNum":" 2920","line":"/// Returns the index of the largest number in a slice. O(n)."},
{"lineNum":" 2921","line":"/// `slice` must not be empty."},
{"lineNum":" 2922","line":"pub fn indexOfMax(comptime T: type, slice: []const T) usize {"},
{"lineNum":" 2923","line":"    assert(slice.len > 0);"},
{"lineNum":" 2924","line":"    var best = slice[0];"},
{"lineNum":" 2925","line":"    var index: usize = 0;"},
{"lineNum":" 2926","line":"    for (slice[1..], 0..) |item, i| {"},
{"lineNum":" 2927","line":"        if (item > best) {"},
{"lineNum":" 2928","line":"            best = item;"},
{"lineNum":" 2929","line":"            index = i + 1;"},
{"lineNum":" 2930","line":"        }"},
{"lineNum":" 2931","line":"    }"},
{"lineNum":" 2932","line":"    return index;"},
{"lineNum":" 2933","line":"}"},
{"lineNum":" 2934","line":""},
{"lineNum":" 2935","line":"test \"indexOfMax\" {"},
{"lineNum":" 2936","line":"    try testing.expectEqual(indexOfMax(u8, \"abcdefg\"), 6);"},
{"lineNum":" 2937","line":"    try testing.expectEqual(indexOfMax(u8, \"gabcdef\"), 0);"},
{"lineNum":" 2938","line":"    try testing.expectEqual(indexOfMax(u8, \"a\"), 0);"},
{"lineNum":" 2939","line":"}"},
{"lineNum":" 2940","line":""},
{"lineNum":" 2941","line":"/// Finds the indices of the smallest and largest number in a slice. O(n)."},
{"lineNum":" 2942","line":"/// Returns an anonymous struct with the fields `index_min` and `index_max`."},
{"lineNum":" 2943","line":"/// `slice` must not be empty."},
{"lineNum":" 2944","line":"pub fn indexOfMinMax(comptime T: type, slice: []const T) struct { index_min: usize, index_max: usize } {"},
{"lineNum":" 2945","line":"    assert(slice.len > 0);"},
{"lineNum":" 2946","line":"    var minVal = slice[0];"},
{"lineNum":" 2947","line":"    var maxVal = slice[0];"},
{"lineNum":" 2948","line":"    var minIdx: usize = 0;"},
{"lineNum":" 2949","line":"    var maxIdx: usize = 0;"},
{"lineNum":" 2950","line":"    for (slice[1..], 0..) |item, i| {"},
{"lineNum":" 2951","line":"        if (item < minVal) {"},
{"lineNum":" 2952","line":"            minVal = item;"},
{"lineNum":" 2953","line":"            minIdx = i + 1;"},
{"lineNum":" 2954","line":"        }"},
{"lineNum":" 2955","line":"        if (item > maxVal) {"},
{"lineNum":" 2956","line":"            maxVal = item;"},
{"lineNum":" 2957","line":"            maxIdx = i + 1;"},
{"lineNum":" 2958","line":"        }"},
{"lineNum":" 2959","line":"    }"},
{"lineNum":" 2960","line":"    return .{ .index_min = minIdx, .index_max = maxIdx };"},
{"lineNum":" 2961","line":"}"},
{"lineNum":" 2962","line":""},
{"lineNum":" 2963","line":"test \"indexOfMinMax\" {"},
{"lineNum":" 2964","line":"    try testing.expectEqual(indexOfMinMax(u8, \"abcdefg\"), .{ .index_min = 0, .index_max = 6 });"},
{"lineNum":" 2965","line":"    try testing.expectEqual(indexOfMinMax(u8, \"gabcdef\"), .{ .index_min = 1, .index_max = 0 });"},
{"lineNum":" 2966","line":"    try testing.expectEqual(indexOfMinMax(u8, \"a\"), .{ .index_min = 0, .index_max = 0 });"},
{"lineNum":" 2967","line":"}"},
{"lineNum":" 2968","line":""},
{"lineNum":" 2969","line":"pub fn swap(comptime T: type, a: *T, b: *T) void {","class":"linePartCov","hits":"1","order":"858","possible_hits":"3",},
{"lineNum":" 2970","line":"    const tmp = a.*;","class":"linePartCov","hits":"1","order":"859","possible_hits":"3",},
{"lineNum":" 2971","line":"    a.* = b.*;","class":"linePartCov","hits":"1","order":"860","possible_hits":"3",},
{"lineNum":" 2972","line":"    b.* = tmp;","class":"linePartCov","hits":"1","order":"861","possible_hits":"3",},
{"lineNum":" 2973","line":"}"},
{"lineNum":" 2974","line":""},
{"lineNum":" 2975","line":"/// In-place order reversal of a slice"},
{"lineNum":" 2976","line":"pub fn reverse(comptime T: type, items: []T) void {"},
{"lineNum":" 2977","line":"    var i: usize = 0;"},
{"lineNum":" 2978","line":"    const end = items.len / 2;"},
{"lineNum":" 2979","line":"    while (i < end) : (i += 1) {"},
{"lineNum":" 2980","line":"        swap(T, &items[i], &items[items.len - i - 1]);"},
{"lineNum":" 2981","line":"    }"},
{"lineNum":" 2982","line":"}"},
{"lineNum":" 2983","line":""},
{"lineNum":" 2984","line":"test \"reverse\" {"},
{"lineNum":" 2985","line":"    var arr = [_]i32{ 5, 3, 1, 2, 4 };"},
{"lineNum":" 2986","line":"    reverse(i32, arr[0..]);"},
{"lineNum":" 2987","line":""},
{"lineNum":" 2988","line":"    try testing.expect(eql(i32, &arr, &[_]i32{ 4, 2, 1, 3, 5 }));"},
{"lineNum":" 2989","line":"}"},
{"lineNum":" 2990","line":""},
{"lineNum":" 2991","line":"fn ReverseIterator(comptime T: type) type {"},
{"lineNum":" 2992","line":"    const Pointer = blk: {"},
{"lineNum":" 2993","line":"        switch (@typeInfo(T)) {"},
{"lineNum":" 2994","line":"            .Pointer => |ptr_info| switch (ptr_info.size) {"},
{"lineNum":" 2995","line":"                .One => switch (@typeInfo(ptr_info.child)) {"},
{"lineNum":" 2996","line":"                    .Array => |array_info| {"},
{"lineNum":" 2997","line":"                        var new_ptr_info = ptr_info;"},
{"lineNum":" 2998","line":"                        new_ptr_info.size = .Many;"},
{"lineNum":" 2999","line":"                        new_ptr_info.child = array_info.child;"},
{"lineNum":" 3000","line":"                        new_ptr_info.sentinel = array_info.sentinel;"},
{"lineNum":" 3001","line":"                        break :blk @Type(.{ .Pointer = new_ptr_info });"},
{"lineNum":" 3002","line":"                    },"},
{"lineNum":" 3003","line":"                    else => {},"},
{"lineNum":" 3004","line":"                },"},
{"lineNum":" 3005","line":"                .Slice => {"},
{"lineNum":" 3006","line":"                    var new_ptr_info = ptr_info;"},
{"lineNum":" 3007","line":"                    new_ptr_info.size = .Many;"},
{"lineNum":" 3008","line":"                    break :blk @Type(.{ .Pointer = new_ptr_info });"},
{"lineNum":" 3009","line":"                },"},
{"lineNum":" 3010","line":"                else => {},"},
{"lineNum":" 3011","line":"            },"},
{"lineNum":" 3012","line":"            else => {},"},
{"lineNum":" 3013","line":"        }"},
{"lineNum":" 3014","line":"        @compileError(\"expected slice or pointer to array, found \'\" ++ @typeName(T) ++ \"\'\");"},
{"lineNum":" 3015","line":"    };"},
{"lineNum":" 3016","line":"    const Element = std.meta.Elem(Pointer);"},
{"lineNum":" 3017","line":"    const ElementPointer = @TypeOf(&@as(Pointer, undefined)[0]);"},
{"lineNum":" 3018","line":"    return struct {"},
{"lineNum":" 3019","line":"        ptr: Pointer,"},
{"lineNum":" 3020","line":"        index: usize,"},
{"lineNum":" 3021","line":"        pub fn next(self: *@This()) ?Element {"},
{"lineNum":" 3022","line":"            if (self.index == 0) return null;"},
{"lineNum":" 3023","line":"            self.index -= 1;"},
{"lineNum":" 3024","line":"            return self.ptr[self.index];"},
{"lineNum":" 3025","line":"        }"},
{"lineNum":" 3026","line":"        pub fn nextPtr(self: *@This()) ?ElementPointer {"},
{"lineNum":" 3027","line":"            if (self.index == 0) return null;"},
{"lineNum":" 3028","line":"            self.index -= 1;"},
{"lineNum":" 3029","line":"            return &self.ptr[self.index];"},
{"lineNum":" 3030","line":"        }"},
{"lineNum":" 3031","line":"    };"},
{"lineNum":" 3032","line":"}"},
{"lineNum":" 3033","line":""},
{"lineNum":" 3034","line":"/// Iterates over a slice in reverse."},
{"lineNum":" 3035","line":"pub fn reverseIterator(slice: anytype) ReverseIterator(@TypeOf(slice)) {"},
{"lineNum":" 3036","line":"    const T = @TypeOf(slice);"},
{"lineNum":" 3037","line":"    if (comptime trait.isPtrTo(.Array)(T)) {"},
{"lineNum":" 3038","line":"        return .{ .ptr = slice, .index = slice.len };"},
{"lineNum":" 3039","line":"    } else {"},
{"lineNum":" 3040","line":"        comptime assert(trait.isSlice(T));"},
{"lineNum":" 3041","line":"        return .{ .ptr = slice.ptr, .index = slice.len };"},
{"lineNum":" 3042","line":"    }"},
{"lineNum":" 3043","line":"}"},
{"lineNum":" 3044","line":""},
{"lineNum":" 3045","line":"test \"reverseIterator\" {"},
{"lineNum":" 3046","line":"    {"},
{"lineNum":" 3047","line":"        var it = reverseIterator(\"abc\");"},
{"lineNum":" 3048","line":"        try testing.expectEqual(@as(?u8, \'c\'), it.next());"},
{"lineNum":" 3049","line":"        try testing.expectEqual(@as(?u8, \'b\'), it.next());"},
{"lineNum":" 3050","line":"        try testing.expectEqual(@as(?u8, \'a\'), it.next());"},
{"lineNum":" 3051","line":"        try testing.expectEqual(@as(?u8, null), it.next());"},
{"lineNum":" 3052","line":"    }"},
{"lineNum":" 3053","line":"    {"},
{"lineNum":" 3054","line":"        var array = [2]i32{ 3, 7 };"},
{"lineNum":" 3055","line":"        const slice: []const i32 = &array;"},
{"lineNum":" 3056","line":"        var it = reverseIterator(slice);"},
{"lineNum":" 3057","line":"        try testing.expectEqual(@as(?i32, 7), it.next());"},
{"lineNum":" 3058","line":"        try testing.expectEqual(@as(?i32, 3), it.next());"},
{"lineNum":" 3059","line":"        try testing.expectEqual(@as(?i32, null), it.next());"},
{"lineNum":" 3060","line":""},
{"lineNum":" 3061","line":"        it = reverseIterator(slice);"},
{"lineNum":" 3062","line":"        try testing.expect(trait.isConstPtr(@TypeOf(it.nextPtr().?)));"},
{"lineNum":" 3063","line":"        try testing.expectEqual(@as(?i32, 7), it.nextPtr().?.*);"},
{"lineNum":" 3064","line":"        try testing.expectEqual(@as(?i32, 3), it.nextPtr().?.*);"},
{"lineNum":" 3065","line":"        try testing.expectEqual(@as(?*const i32, null), it.nextPtr());"},
{"lineNum":" 3066","line":""},
{"lineNum":" 3067","line":"        var mut_slice: []i32 = &array;"},
{"lineNum":" 3068","line":"        var mut_it = reverseIterator(mut_slice);"},
{"lineNum":" 3069","line":"        mut_it.nextPtr().?.* += 1;"},
{"lineNum":" 3070","line":"        mut_it.nextPtr().?.* += 2;"},
{"lineNum":" 3071","line":"        try testing.expectEqual([2]i32{ 5, 8 }, array);"},
{"lineNum":" 3072","line":"    }"},
{"lineNum":" 3073","line":"    {"},
{"lineNum":" 3074","line":"        var array = [2]i32{ 3, 7 };"},
{"lineNum":" 3075","line":"        const ptr_to_array: *const [2]i32 = &array;"},
{"lineNum":" 3076","line":"        var it = reverseIterator(ptr_to_array);"},
{"lineNum":" 3077","line":"        try testing.expectEqual(@as(?i32, 7), it.next());"},
{"lineNum":" 3078","line":"        try testing.expectEqual(@as(?i32, 3), it.next());"},
{"lineNum":" 3079","line":"        try testing.expectEqual(@as(?i32, null), it.next());"},
{"lineNum":" 3080","line":""},
{"lineNum":" 3081","line":"        it = reverseIterator(ptr_to_array);"},
{"lineNum":" 3082","line":"        try testing.expect(trait.isConstPtr(@TypeOf(it.nextPtr().?)));"},
{"lineNum":" 3083","line":"        try testing.expectEqual(@as(?i32, 7), it.nextPtr().?.*);"},
{"lineNum":" 3084","line":"        try testing.expectEqual(@as(?i32, 3), it.nextPtr().?.*);"},
{"lineNum":" 3085","line":"        try testing.expectEqual(@as(?*const i32, null), it.nextPtr());"},
{"lineNum":" 3086","line":""},
{"lineNum":" 3087","line":"        var mut_ptr_to_array: *[2]i32 = &array;"},
{"lineNum":" 3088","line":"        var mut_it = reverseIterator(mut_ptr_to_array);"},
{"lineNum":" 3089","line":"        mut_it.nextPtr().?.* += 1;"},
{"lineNum":" 3090","line":"        mut_it.nextPtr().?.* += 2;"},
{"lineNum":" 3091","line":"        try testing.expectEqual([2]i32{ 5, 8 }, array);"},
{"lineNum":" 3092","line":"    }"},
{"lineNum":" 3093","line":"}"},
{"lineNum":" 3094","line":""},
{"lineNum":" 3095","line":"/// In-place rotation of the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)"},
{"lineNum":" 3096","line":"/// Assumes 0 <= amount <= items.len"},
{"lineNum":" 3097","line":"pub fn rotate(comptime T: type, items: []T, amount: usize) void {"},
{"lineNum":" 3098","line":"    reverse(T, items[0..amount]);"},
{"lineNum":" 3099","line":"    reverse(T, items[amount..]);"},
{"lineNum":" 3100","line":"    reverse(T, items);"},
{"lineNum":" 3101","line":"}"},
{"lineNum":" 3102","line":""},
{"lineNum":" 3103","line":"test \"rotate\" {"},
{"lineNum":" 3104","line":"    var arr = [_]i32{ 5, 3, 1, 2, 4 };"},
{"lineNum":" 3105","line":"    rotate(i32, arr[0..], 2);"},
{"lineNum":" 3106","line":""},
{"lineNum":" 3107","line":"    try testing.expect(eql(i32, &arr, &[_]i32{ 1, 2, 4, 5, 3 }));"},
{"lineNum":" 3108","line":"}"},
{"lineNum":" 3109","line":""},
{"lineNum":" 3110","line":"/// Replace needle with replacement as many times as possible, writing to an output buffer which is assumed to be of"},
{"lineNum":" 3111","line":"/// appropriate size. Use replacementSize to calculate an appropriate buffer size."},
{"lineNum":" 3112","line":"/// The needle must not be empty."},
{"lineNum":" 3113","line":"/// Returns the number of replacements made."},
{"lineNum":" 3114","line":"pub fn replace(comptime T: type, input: []const T, needle: []const T, replacement: []const T, output: []T) usize {"},
{"lineNum":" 3115","line":"    // Empty needle will loop until output buffer overflows."},
{"lineNum":" 3116","line":"    assert(needle.len > 0);"},
{"lineNum":" 3117","line":""},
{"lineNum":" 3118","line":"    var i: usize = 0;"},
{"lineNum":" 3119","line":"    var slide: usize = 0;"},
{"lineNum":" 3120","line":"    var replacements: usize = 0;"},
{"lineNum":" 3121","line":"    while (slide < input.len) {"},
{"lineNum":" 3122","line":"        if (mem.startsWith(T, input[slide..], needle)) {"},
{"lineNum":" 3123","line":"            mem.copy(T, output[i .. i + replacement.len], replacement);"},
{"lineNum":" 3124","line":"            i += replacement.len;"},
{"lineNum":" 3125","line":"            slide += needle.len;"},
{"lineNum":" 3126","line":"            replacements += 1;"},
{"lineNum":" 3127","line":"        } else {"},
{"lineNum":" 3128","line":"            output[i] = input[slide];"},
{"lineNum":" 3129","line":"            i += 1;"},
{"lineNum":" 3130","line":"            slide += 1;"},
{"lineNum":" 3131","line":"        }"},
{"lineNum":" 3132","line":"    }"},
{"lineNum":" 3133","line":""},
{"lineNum":" 3134","line":"    return replacements;"},
{"lineNum":" 3135","line":"}"},
{"lineNum":" 3136","line":""},
{"lineNum":" 3137","line":"test \"replace\" {"},
{"lineNum":" 3138","line":"    var output: [29]u8 = undefined;"},
{"lineNum":" 3139","line":"    var replacements = replace(u8, \"All your base are belong to us\", \"base\", \"Zig\", output[0..]);"},
{"lineNum":" 3140","line":"    var expected: []const u8 = \"All your Zig are belong to us\";"},
{"lineNum":" 3141","line":"    try testing.expect(replacements == 1);"},
{"lineNum":" 3142","line":"    try testing.expectEqualStrings(expected, output[0..expected.len]);"},
{"lineNum":" 3143","line":""},
{"lineNum":" 3144","line":"    replacements = replace(u8, \"Favor reading code over writing code.\", \"code\", \"\", output[0..]);"},
{"lineNum":" 3145","line":"    expected = \"Favor reading  over writing .\";"},
{"lineNum":" 3146","line":"    try testing.expect(replacements == 2);"},
{"lineNum":" 3147","line":"    try testing.expectEqualStrings(expected, output[0..expected.len]);"},
{"lineNum":" 3148","line":""},
{"lineNum":" 3149","line":"    // Empty needle is not allowed but input may be empty."},
{"lineNum":" 3150","line":"    replacements = replace(u8, \"\", \"x\", \"y\", output[0..0]);"},
{"lineNum":" 3151","line":"    expected = \"\";"},
{"lineNum":" 3152","line":"    try testing.expect(replacements == 0);"},
{"lineNum":" 3153","line":"    try testing.expectEqualStrings(expected, output[0..expected.len]);"},
{"lineNum":" 3154","line":""},
{"lineNum":" 3155","line":"    // Adjacent replacements."},
{"lineNum":" 3156","line":""},
{"lineNum":" 3157","line":"    replacements = replace(u8, \"\\\\n\\\\n\", \"\\\\n\", \"\\n\", output[0..]);"},
{"lineNum":" 3158","line":"    expected = \"\\n\\n\";"},
{"lineNum":" 3159","line":"    try testing.expect(replacements == 2);"},
{"lineNum":" 3160","line":"    try testing.expectEqualStrings(expected, output[0..expected.len]);"},
{"lineNum":" 3161","line":""},
{"lineNum":" 3162","line":"    replacements = replace(u8, \"abbba\", \"b\", \"cd\", output[0..]);"},
{"lineNum":" 3163","line":"    expected = \"acdcdcda\";"},
{"lineNum":" 3164","line":"    try testing.expect(replacements == 3);"},
{"lineNum":" 3165","line":"    try testing.expectEqualStrings(expected, output[0..expected.len]);"},
{"lineNum":" 3166","line":"}"},
{"lineNum":" 3167","line":""},
{"lineNum":" 3168","line":"/// Replace all occurences of `needle` with `replacement`."},
{"lineNum":" 3169","line":"pub fn replaceScalar(comptime T: type, slice: []T, needle: T, replacement: T) void {"},
{"lineNum":" 3170","line":"    for (slice, 0..) |e, i| {"},
{"lineNum":" 3171","line":"        if (e == needle) {"},
{"lineNum":" 3172","line":"            slice[i] = replacement;"},
{"lineNum":" 3173","line":"        }"},
{"lineNum":" 3174","line":"    }"},
{"lineNum":" 3175","line":"}"},
{"lineNum":" 3176","line":""},
{"lineNum":" 3177","line":"/// Collapse consecutive duplicate elements into one entry."},
{"lineNum":" 3178","line":"pub fn collapseRepeatsLen(comptime T: type, slice: []T, elem: T) usize {"},
{"lineNum":" 3179","line":"    if (slice.len == 0) return 0;"},
{"lineNum":" 3180","line":"    var write_idx: usize = 1;"},
{"lineNum":" 3181","line":"    var read_idx: usize = 1;"},
{"lineNum":" 3182","line":"    while (read_idx < slice.len) : (read_idx += 1) {"},
{"lineNum":" 3183","line":"        if (slice[read_idx - 1] != elem or slice[read_idx] != elem) {"},
{"lineNum":" 3184","line":"            slice[write_idx] = slice[read_idx];"},
{"lineNum":" 3185","line":"            write_idx += 1;"},
{"lineNum":" 3186","line":"        }"},
{"lineNum":" 3187","line":"    }"},
{"lineNum":" 3188","line":"    return write_idx;"},
{"lineNum":" 3189","line":"}"},
{"lineNum":" 3190","line":""},
{"lineNum":" 3191","line":"/// Collapse consecutive duplicate elements into one entry."},
{"lineNum":" 3192","line":"pub fn collapseRepeats(comptime T: type, slice: []T, elem: T) []T {"},
{"lineNum":" 3193","line":"    return slice[0..collapseRepeatsLen(T, slice, elem)];"},
{"lineNum":" 3194","line":"}"},
{"lineNum":" 3195","line":""},
{"lineNum":" 3196","line":"fn testCollapseRepeats(str: []const u8, elem: u8, expected: []const u8) !void {"},
{"lineNum":" 3197","line":"    const mutable = try std.testing.allocator.dupe(u8, str);"},
{"lineNum":" 3198","line":"    defer std.testing.allocator.free(mutable);"},
{"lineNum":" 3199","line":"    try testing.expect(std.mem.eql(u8, collapseRepeats(u8, mutable, elem), expected));"},
{"lineNum":" 3200","line":"}"},
{"lineNum":" 3201","line":"test \"collapseRepeats\" {"},
{"lineNum":" 3202","line":"    try testCollapseRepeats(\"\", \'/\', \"\");"},
{"lineNum":" 3203","line":"    try testCollapseRepeats(\"a\", \'/\', \"a\");"},
{"lineNum":" 3204","line":"    try testCollapseRepeats(\"/\", \'/\', \"/\");"},
{"lineNum":" 3205","line":"    try testCollapseRepeats(\"//\", \'/\', \"/\");"},
{"lineNum":" 3206","line":"    try testCollapseRepeats(\"/a\", \'/\', \"/a\");"},
{"lineNum":" 3207","line":"    try testCollapseRepeats(\"//a\", \'/\', \"/a\");"},
{"lineNum":" 3208","line":"    try testCollapseRepeats(\"a/\", \'/\', \"a/\");"},
{"lineNum":" 3209","line":"    try testCollapseRepeats(\"a//\", \'/\', \"a/\");"},
{"lineNum":" 3210","line":"    try testCollapseRepeats(\"a/a\", \'/\', \"a/a\");"},
{"lineNum":" 3211","line":"    try testCollapseRepeats(\"a//a\", \'/\', \"a/a\");"},
{"lineNum":" 3212","line":"    try testCollapseRepeats(\"//a///a////\", \'/\', \"/a/a/\");"},
{"lineNum":" 3213","line":"}"},
{"lineNum":" 3214","line":""},
{"lineNum":" 3215","line":"/// Calculate the size needed in an output buffer to perform a replacement."},
{"lineNum":" 3216","line":"/// The needle must not be empty."},
{"lineNum":" 3217","line":"pub fn replacementSize(comptime T: type, input: []const T, needle: []const T, replacement: []const T) usize {"},
{"lineNum":" 3218","line":"    // Empty needle will loop forever."},
{"lineNum":" 3219","line":"    assert(needle.len > 0);"},
{"lineNum":" 3220","line":""},
{"lineNum":" 3221","line":"    var i: usize = 0;"},
{"lineNum":" 3222","line":"    var size: usize = input.len;"},
{"lineNum":" 3223","line":"    while (i < input.len) {"},
{"lineNum":" 3224","line":"        if (mem.startsWith(T, input[i..], needle)) {"},
{"lineNum":" 3225","line":"            size = size - needle.len + replacement.len;"},
{"lineNum":" 3226","line":"            i += needle.len;"},
{"lineNum":" 3227","line":"        } else {"},
{"lineNum":" 3228","line":"            i += 1;"},
{"lineNum":" 3229","line":"        }"},
{"lineNum":" 3230","line":"    }"},
{"lineNum":" 3231","line":""},
{"lineNum":" 3232","line":"    return size;"},
{"lineNum":" 3233","line":"}"},
{"lineNum":" 3234","line":""},
{"lineNum":" 3235","line":"test \"replacementSize\" {"},
{"lineNum":" 3236","line":"    try testing.expect(replacementSize(u8, \"All your base are belong to us\", \"base\", \"Zig\") == 29);"},
{"lineNum":" 3237","line":"    try testing.expect(replacementSize(u8, \"Favor reading code over writing code.\", \"code\", \"\") == 29);"},
{"lineNum":" 3238","line":"    try testing.expect(replacementSize(u8, \"Only one obvious way to do things.\", \"things.\", \"things in Zig.\") == 41);"},
{"lineNum":" 3239","line":""},
{"lineNum":" 3240","line":"    // Empty needle is not allowed but input may be empty."},
{"lineNum":" 3241","line":"    try testing.expect(replacementSize(u8, \"\", \"x\", \"y\") == 0);"},
{"lineNum":" 3242","line":""},
{"lineNum":" 3243","line":"    // Adjacent replacements."},
{"lineNum":" 3244","line":"    try testing.expect(replacementSize(u8, \"\\\\n\\\\n\", \"\\\\n\", \"\\n\") == 2);"},
{"lineNum":" 3245","line":"    try testing.expect(replacementSize(u8, \"abbba\", \"b\", \"cd\") == 8);"},
{"lineNum":" 3246","line":"}"},
{"lineNum":" 3247","line":""},
{"lineNum":" 3248","line":"/// Perform a replacement on an allocated buffer of pre-determined size. Caller must free returned memory."},
{"lineNum":" 3249","line":"pub fn replaceOwned(comptime T: type, allocator: Allocator, input: []const T, needle: []const T, replacement: []const T) Allocator.Error![]T {"},
{"lineNum":" 3250","line":"    var output = try allocator.alloc(T, replacementSize(T, input, needle, replacement));"},
{"lineNum":" 3251","line":"    _ = replace(T, input, needle, replacement, output);"},
{"lineNum":" 3252","line":"    return output;"},
{"lineNum":" 3253","line":"}"},
{"lineNum":" 3254","line":""},
{"lineNum":" 3255","line":"test \"replaceOwned\" {"},
{"lineNum":" 3256","line":"    const gpa = std.testing.allocator;"},
{"lineNum":" 3257","line":""},
{"lineNum":" 3258","line":"    const base_replace = replaceOwned(u8, gpa, \"All your base are belong to us\", \"base\", \"Zig\") catch @panic(\"out of memory\");"},
{"lineNum":" 3259","line":"    defer gpa.free(base_replace);"},
{"lineNum":" 3260","line":"    try testing.expect(eql(u8, base_replace, \"All your Zig are belong to us\"));"},
{"lineNum":" 3261","line":""},
{"lineNum":" 3262","line":"    const zen_replace = replaceOwned(u8, gpa, \"Favor reading code over writing code.\", \" code\", \"\") catch @panic(\"out of memory\");"},
{"lineNum":" 3263","line":"    defer gpa.free(zen_replace);"},
{"lineNum":" 3264","line":"    try testing.expect(eql(u8, zen_replace, \"Favor reading over writing.\"));"},
{"lineNum":" 3265","line":"}"},
{"lineNum":" 3266","line":""},
{"lineNum":" 3267","line":"/// Converts a little-endian integer to host endianness."},
{"lineNum":" 3268","line":"pub fn littleToNative(comptime T: type, x: T) T {"},
{"lineNum":" 3269","line":"    return switch (native_endian) {"},
{"lineNum":" 3270","line":"        .Little => x,"},
{"lineNum":" 3271","line":"        .Big => @byteSwap(x),"},
{"lineNum":" 3272","line":"    };"},
{"lineNum":" 3273","line":"}"},
{"lineNum":" 3274","line":""},
{"lineNum":" 3275","line":"/// Converts a big-endian integer to host endianness."},
{"lineNum":" 3276","line":"pub fn bigToNative(comptime T: type, x: T) T {"},
{"lineNum":" 3277","line":"    return switch (native_endian) {"},
{"lineNum":" 3278","line":"        .Little => @byteSwap(x),"},
{"lineNum":" 3279","line":"        .Big => x,"},
{"lineNum":" 3280","line":"    };"},
{"lineNum":" 3281","line":"}"},
{"lineNum":" 3282","line":""},
{"lineNum":" 3283","line":"/// Converts an integer from specified endianness to host endianness."},
{"lineNum":" 3284","line":"pub fn toNative(comptime T: type, x: T, endianness_of_x: Endian) T {"},
{"lineNum":" 3285","line":"    return switch (endianness_of_x) {"},
{"lineNum":" 3286","line":"        .Little => littleToNative(T, x),"},
{"lineNum":" 3287","line":"        .Big => bigToNative(T, x),"},
{"lineNum":" 3288","line":"    };"},
{"lineNum":" 3289","line":"}"},
{"lineNum":" 3290","line":""},
{"lineNum":" 3291","line":"/// Converts an integer which has host endianness to the desired endianness."},
{"lineNum":" 3292","line":"pub fn nativeTo(comptime T: type, x: T, desired_endianness: Endian) T {"},
{"lineNum":" 3293","line":"    return switch (desired_endianness) {"},
{"lineNum":" 3294","line":"        .Little => nativeToLittle(T, x),"},
{"lineNum":" 3295","line":"        .Big => nativeToBig(T, x),"},
{"lineNum":" 3296","line":"    };"},
{"lineNum":" 3297","line":"}"},
{"lineNum":" 3298","line":""},
{"lineNum":" 3299","line":"/// Converts an integer which has host endianness to little endian."},
{"lineNum":" 3300","line":"pub fn nativeToLittle(comptime T: type, x: T) T {"},
{"lineNum":" 3301","line":"    return switch (native_endian) {"},
{"lineNum":" 3302","line":"        .Little => x,"},
{"lineNum":" 3303","line":"        .Big => @byteSwap(x),"},
{"lineNum":" 3304","line":"    };"},
{"lineNum":" 3305","line":"}"},
{"lineNum":" 3306","line":""},
{"lineNum":" 3307","line":"/// Converts an integer which has host endianness to big endian."},
{"lineNum":" 3308","line":"pub fn nativeToBig(comptime T: type, x: T) T {"},
{"lineNum":" 3309","line":"    return switch (native_endian) {"},
{"lineNum":" 3310","line":"        .Little => @byteSwap(x),"},
{"lineNum":" 3311","line":"        .Big => x,"},
{"lineNum":" 3312","line":"    };"},
{"lineNum":" 3313","line":"}"},
{"lineNum":" 3314","line":""},
{"lineNum":" 3315","line":"/// Returns the number of elements that, if added to the given pointer, align it"},
{"lineNum":" 3316","line":"/// to a multiple of the given quantity, or `null` if one of the following"},
{"lineNum":" 3317","line":"/// conditions is met:"},
{"lineNum":" 3318","line":"/// - The aligned pointer would not fit the address space,"},
{"lineNum":" 3319","line":"/// - The delta required to align the pointer is not a multiple of the pointee\'s"},
{"lineNum":" 3320","line":"///   type."},
{"lineNum":" 3321","line":"pub fn alignPointerOffset(ptr: anytype, align_to: usize) ?usize {","class":"lineCov","hits":"1","order":"231","possible_hits":"1",},
{"lineNum":" 3322","line":"    assert(isValidAlign(align_to));","class":"lineCov","hits":"1","order":"232","possible_hits":"1",},
{"lineNum":" 3323","line":""},
{"lineNum":" 3324","line":"    const T = @TypeOf(ptr);"},
{"lineNum":" 3325","line":"    const info = @typeInfo(T);"},
{"lineNum":" 3326","line":"    if (info != .Pointer or info.Pointer.size != .Many)"},
{"lineNum":" 3327","line":"        @compileError(\"expected many item pointer, got \" ++ @typeName(T));"},
{"lineNum":" 3328","line":""},
{"lineNum":" 3329","line":"    // Do nothing if the pointer is already well-aligned."},
{"lineNum":" 3330","line":"    if (align_to <= info.Pointer.alignment)","class":"lineCov","hits":"1","order":"235","possible_hits":"1",},
{"lineNum":" 3331","line":"        return 0;","class":"lineCov","hits":"1","order":"236","possible_hits":"1",},
{"lineNum":" 3332","line":""},
{"lineNum":" 3333","line":"    // Calculate the aligned base address with an eye out for overflow."},
{"lineNum":" 3334","line":"    const addr = @ptrToInt(ptr);","class":"lineCov","hits":"1","order":"272","possible_hits":"1",},
{"lineNum":" 3335","line":"    var ov = @addWithOverflow(addr, align_to - 1);","class":"lineCov","hits":"1","order":"273","possible_hits":"1",},
{"lineNum":" 3336","line":"    if (ov[1] != 0) return null;","class":"lineCov","hits":"1","order":"274","possible_hits":"1",},
{"lineNum":" 3337","line":"    ov[0] &= ~@as(usize, align_to - 1);","class":"lineCov","hits":"1","order":"275","possible_hits":"1",},
{"lineNum":" 3338","line":""},
{"lineNum":" 3339","line":"    // The delta is expressed in terms of bytes, turn it into a number of child"},
{"lineNum":" 3340","line":"    // type elements."},
{"lineNum":" 3341","line":"    const delta = ov[0] - addr;","class":"lineCov","hits":"1","order":"276","possible_hits":"1",},
{"lineNum":" 3342","line":"    const pointee_size = @sizeOf(info.Pointer.child);"},
{"lineNum":" 3343","line":"    if (delta % pointee_size != 0) return null;","class":"lineCov","hits":"1","order":"277","possible_hits":"1",},
{"lineNum":" 3344","line":"    return delta / pointee_size;","class":"lineCov","hits":"1","order":"278","possible_hits":"1",},
{"lineNum":" 3345","line":"}"},
{"lineNum":" 3346","line":""},
{"lineNum":" 3347","line":"/// Aligns a given pointer value to a specified alignment factor."},
{"lineNum":" 3348","line":"/// Returns an aligned pointer or null if one of the following conditions is"},
{"lineNum":" 3349","line":"/// met:"},
{"lineNum":" 3350","line":"/// - The aligned pointer would not fit the address space,"},
{"lineNum":" 3351","line":"/// - The delta required to align the pointer is not a multiple of the pointee\'s"},
{"lineNum":" 3352","line":"///   type."},
{"lineNum":" 3353","line":"pub fn alignPointer(ptr: anytype, align_to: usize) ?@TypeOf(ptr) {"},
{"lineNum":" 3354","line":"    const adjust_off = alignPointerOffset(ptr, align_to) orelse return null;"},
{"lineNum":" 3355","line":"    const T = @TypeOf(ptr);"},
{"lineNum":" 3356","line":"    // Avoid the use of intToPtr to avoid losing the pointer provenance info."},
{"lineNum":" 3357","line":"    return @alignCast(@typeInfo(T).Pointer.alignment, ptr + adjust_off);"},
{"lineNum":" 3358","line":"}"},
{"lineNum":" 3359","line":""},
{"lineNum":" 3360","line":"test \"alignPointer\" {"},
{"lineNum":" 3361","line":"    const S = struct {"},
{"lineNum":" 3362","line":"        fn checkAlign(comptime T: type, base: usize, align_to: usize, expected: usize) !void {"},
{"lineNum":" 3363","line":"            var ptr = @intToPtr(T, base);"},
{"lineNum":" 3364","line":"            var aligned = alignPointer(ptr, align_to);"},
{"lineNum":" 3365","line":"            try testing.expectEqual(expected, @ptrToInt(aligned));"},
{"lineNum":" 3366","line":"        }"},
{"lineNum":" 3367","line":"    };"},
{"lineNum":" 3368","line":""},
{"lineNum":" 3369","line":"    try S.checkAlign([*]u8, 0x123, 0x200, 0x200);"},
{"lineNum":" 3370","line":"    try S.checkAlign([*]align(4) u8, 0x10, 2, 0x10);"},
{"lineNum":" 3371","line":"    try S.checkAlign([*]u32, 0x10, 2, 0x10);"},
{"lineNum":" 3372","line":"    try S.checkAlign([*]u32, 0x4, 16, 0x10);"},
{"lineNum":" 3373","line":"    // Misaligned."},
{"lineNum":" 3374","line":"    try S.checkAlign([*]align(1) u32, 0x3, 2, 0);"},
{"lineNum":" 3375","line":"    // Overflow."},
{"lineNum":" 3376","line":"    try S.checkAlign([*]u32, math.maxInt(usize) - 3, 8, 0);"},
{"lineNum":" 3377","line":"}"},
{"lineNum":" 3378","line":""},
{"lineNum":" 3379","line":"fn CopyPtrAttrs("},
{"lineNum":" 3380","line":"    comptime source: type,"},
{"lineNum":" 3381","line":"    comptime size: std.builtin.Type.Pointer.Size,"},
{"lineNum":" 3382","line":"    comptime child: type,"},
{"lineNum":" 3383","line":") type {"},
{"lineNum":" 3384","line":"    const info = @typeInfo(source).Pointer;"},
{"lineNum":" 3385","line":"    return @Type(.{"},
{"lineNum":" 3386","line":"        .Pointer = .{"},
{"lineNum":" 3387","line":"            .size = size,"},
{"lineNum":" 3388","line":"            .is_const = info.is_const,"},
{"lineNum":" 3389","line":"            .is_volatile = info.is_volatile,"},
{"lineNum":" 3390","line":"            .is_allowzero = info.is_allowzero,"},
{"lineNum":" 3391","line":"            .alignment = info.alignment,"},
{"lineNum":" 3392","line":"            .address_space = info.address_space,"},
{"lineNum":" 3393","line":"            .child = child,"},
{"lineNum":" 3394","line":"            .sentinel = null,"},
{"lineNum":" 3395","line":"        },"},
{"lineNum":" 3396","line":"    });"},
{"lineNum":" 3397","line":"}"},
{"lineNum":" 3398","line":""},
{"lineNum":" 3399","line":"fn AsBytesReturnType(comptime P: type) type {"},
{"lineNum":" 3400","line":"    if (!trait.isSingleItemPtr(P))"},
{"lineNum":" 3401","line":"        @compileError(\"expected single item pointer, passed \" ++ @typeName(P));"},
{"lineNum":" 3402","line":""},
{"lineNum":" 3403","line":"    const size = @sizeOf(meta.Child(P));"},
{"lineNum":" 3404","line":""},
{"lineNum":" 3405","line":"    return CopyPtrAttrs(P, .One, [size]u8);"},
{"lineNum":" 3406","line":"}"},
{"lineNum":" 3407","line":""},
{"lineNum":" 3408","line":"/// Given a pointer to a single item, returns a slice of the underlying bytes, preserving pointer attributes."},
{"lineNum":" 3409","line":"pub fn asBytes(ptr: anytype) AsBytesReturnType(@TypeOf(ptr)) {","class":"linePartCov","hits":"1","order":"970","possible_hits":"4",},
{"lineNum":" 3410","line":"    const P = @TypeOf(ptr);"},
{"lineNum":" 3411","line":"    const T = AsBytesReturnType(P);"},
{"lineNum":" 3412","line":"    return @ptrCast(T, @alignCast(meta.alignment(T), ptr));","class":"linePartCov","hits":"1","order":"971","possible_hits":"4",},
{"lineNum":" 3413","line":"}"},
{"lineNum":" 3414","line":""},
{"lineNum":" 3415","line":"test \"asBytes\" {"},
{"lineNum":" 3416","line":"    const deadbeef = @as(u32, 0xDEADBEEF);"},
{"lineNum":" 3417","line":"    const deadbeef_bytes = switch (native_endian) {"},
{"lineNum":" 3418","line":"        .Big => \"\\xDE\\xAD\\xBE\\xEF\","},
{"lineNum":" 3419","line":"        .Little => \"\\xEF\\xBE\\xAD\\xDE\","},
{"lineNum":" 3420","line":"    };"},
{"lineNum":" 3421","line":""},
{"lineNum":" 3422","line":"    try testing.expect(eql(u8, asBytes(&deadbeef), deadbeef_bytes));"},
{"lineNum":" 3423","line":""},
{"lineNum":" 3424","line":"    var codeface = @as(u32, 0xC0DEFACE);"},
{"lineNum":" 3425","line":"    for (asBytes(&codeface)) |*b|"},
{"lineNum":" 3426","line":"        b.* = 0;"},
{"lineNum":" 3427","line":"    try testing.expect(codeface == 0);"},
{"lineNum":" 3428","line":""},
{"lineNum":" 3429","line":"    const S = packed struct {"},
{"lineNum":" 3430","line":"        a: u8,"},
{"lineNum":" 3431","line":"        b: u8,"},
{"lineNum":" 3432","line":"        c: u8,"},
{"lineNum":" 3433","line":"        d: u8,"},
{"lineNum":" 3434","line":"    };"},
{"lineNum":" 3435","line":""},
{"lineNum":" 3436","line":"    const inst = S{"},
{"lineNum":" 3437","line":"        .a = 0xBE,"},
{"lineNum":" 3438","line":"        .b = 0xEF,"},
{"lineNum":" 3439","line":"        .c = 0xDE,"},
{"lineNum":" 3440","line":"        .d = 0xA1,"},
{"lineNum":" 3441","line":"    };"},
{"lineNum":" 3442","line":"    switch (native_endian) {"},
{"lineNum":" 3443","line":"        .Little => {"},
{"lineNum":" 3444","line":"            try testing.expect(eql(u8, asBytes(&inst), \"\\xBE\\xEF\\xDE\\xA1\"));"},
{"lineNum":" 3445","line":"        },"},
{"lineNum":" 3446","line":"        .Big => {"},
{"lineNum":" 3447","line":"            try testing.expect(eql(u8, asBytes(&inst), \"\\xA1\\xDE\\xEF\\xBE\"));"},
{"lineNum":" 3448","line":"        },"},
{"lineNum":" 3449","line":"    }"},
{"lineNum":" 3450","line":""},
{"lineNum":" 3451","line":"    const ZST = struct {};"},
{"lineNum":" 3452","line":"    const zero = ZST{};"},
{"lineNum":" 3453","line":"    try testing.expect(eql(u8, asBytes(&zero), \"\"));"},
{"lineNum":" 3454","line":"}"},
{"lineNum":" 3455","line":""},
{"lineNum":" 3456","line":"test \"asBytes preserves pointer attributes\" {"},
{"lineNum":" 3457","line":"    const inArr: u32 align(16) = 0xDEADBEEF;"},
{"lineNum":" 3458","line":"    const inPtr = @ptrCast(*align(16) const volatile u32, &inArr);"},
{"lineNum":" 3459","line":"    const outSlice = asBytes(inPtr);"},
{"lineNum":" 3460","line":""},
{"lineNum":" 3461","line":"    const in = @typeInfo(@TypeOf(inPtr)).Pointer;"},
{"lineNum":" 3462","line":"    const out = @typeInfo(@TypeOf(outSlice)).Pointer;"},
{"lineNum":" 3463","line":""},
{"lineNum":" 3464","line":"    try testing.expectEqual(in.is_const, out.is_const);"},
{"lineNum":" 3465","line":"    try testing.expectEqual(in.is_volatile, out.is_volatile);"},
{"lineNum":" 3466","line":"    try testing.expectEqual(in.is_allowzero, out.is_allowzero);"},
{"lineNum":" 3467","line":"    try testing.expectEqual(in.alignment, out.alignment);"},
{"lineNum":" 3468","line":"}"},
{"lineNum":" 3469","line":""},
{"lineNum":" 3470","line":"/// Given any value, returns a copy of its bytes in an array."},
{"lineNum":" 3471","line":"pub fn toBytes(value: anytype) [@sizeOf(@TypeOf(value))]u8 {"},
{"lineNum":" 3472","line":"    return asBytes(&value).*;"},
{"lineNum":" 3473","line":"}"},
{"lineNum":" 3474","line":""},
{"lineNum":" 3475","line":"test \"toBytes\" {"},
{"lineNum":" 3476","line":"    var my_bytes = toBytes(@as(u32, 0x12345678));"},
{"lineNum":" 3477","line":"    switch (native_endian) {"},
{"lineNum":" 3478","line":"        .Big => try testing.expect(eql(u8, &my_bytes, \"\\x12\\x34\\x56\\x78\")),"},
{"lineNum":" 3479","line":"        .Little => try testing.expect(eql(u8, &my_bytes, \"\\x78\\x56\\x34\\x12\")),"},
{"lineNum":" 3480","line":"    }"},
{"lineNum":" 3481","line":""},
{"lineNum":" 3482","line":"    my_bytes[0] = \'\\x99\';"},
{"lineNum":" 3483","line":"    switch (native_endian) {"},
{"lineNum":" 3484","line":"        .Big => try testing.expect(eql(u8, &my_bytes, \"\\x99\\x34\\x56\\x78\")),"},
{"lineNum":" 3485","line":"        .Little => try testing.expect(eql(u8, &my_bytes, \"\\x99\\x56\\x34\\x12\")),"},
{"lineNum":" 3486","line":"    }"},
{"lineNum":" 3487","line":"}"},
{"lineNum":" 3488","line":""},
{"lineNum":" 3489","line":"fn BytesAsValueReturnType(comptime T: type, comptime B: type) type {"},
{"lineNum":" 3490","line":"    const size = @as(usize, @sizeOf(T));"},
{"lineNum":" 3491","line":""},
{"lineNum":" 3492","line":"    if (comptime !trait.is(.Pointer)(B) or"},
{"lineNum":" 3493","line":"        (meta.Child(B) != [size]u8 and meta.Child(B) != [size:0]u8))"},
{"lineNum":" 3494","line":"    {"},
{"lineNum":" 3495","line":"        comptime var buf: [100]u8 = undefined;"},
{"lineNum":" 3496","line":"        @compileError(std.fmt.bufPrint(&buf, \"expected *[{}]u8, passed \" ++ @typeName(B), .{size}) catch unreachable);"},
{"lineNum":" 3497","line":"    }"},
{"lineNum":" 3498","line":""},
{"lineNum":" 3499","line":"    return CopyPtrAttrs(B, .One, T);"},
{"lineNum":" 3500","line":"}"},
{"lineNum":" 3501","line":""},
{"lineNum":" 3502","line":"/// Given a pointer to an array of bytes, returns a pointer to a value of the specified type"},
{"lineNum":" 3503","line":"/// backed by those bytes, preserving pointer attributes."},
{"lineNum":" 3504","line":"pub fn bytesAsValue(comptime T: type, bytes: anytype) BytesAsValueReturnType(T, @TypeOf(bytes)) {"},
{"lineNum":" 3505","line":"    return @ptrCast(BytesAsValueReturnType(T, @TypeOf(bytes)), bytes);"},
{"lineNum":" 3506","line":"}"},
{"lineNum":" 3507","line":""},
{"lineNum":" 3508","line":"test \"bytesAsValue\" {"},
{"lineNum":" 3509","line":"    const deadbeef = @as(u32, 0xDEADBEEF);"},
{"lineNum":" 3510","line":"    const deadbeef_bytes = switch (native_endian) {"},
{"lineNum":" 3511","line":"        .Big => \"\\xDE\\xAD\\xBE\\xEF\","},
{"lineNum":" 3512","line":"        .Little => \"\\xEF\\xBE\\xAD\\xDE\","},
{"lineNum":" 3513","line":"    };"},
{"lineNum":" 3514","line":""},
{"lineNum":" 3515","line":"    try testing.expect(deadbeef == bytesAsValue(u32, deadbeef_bytes).*);"},
{"lineNum":" 3516","line":""},
{"lineNum":" 3517","line":"    var codeface_bytes: [4]u8 = switch (native_endian) {"},
{"lineNum":" 3518","line":"        .Big => \"\\xC0\\xDE\\xFA\\xCE\","},
{"lineNum":" 3519","line":"        .Little => \"\\xCE\\xFA\\xDE\\xC0\","},
{"lineNum":" 3520","line":"    }.*;"},
{"lineNum":" 3521","line":"    var codeface = bytesAsValue(u32, &codeface_bytes);"},
{"lineNum":" 3522","line":"    try testing.expect(codeface.* == 0xC0DEFACE);"},
{"lineNum":" 3523","line":"    codeface.* = 0;"},
{"lineNum":" 3524","line":"    for (codeface_bytes) |b|"},
{"lineNum":" 3525","line":"        try testing.expect(b == 0);"},
{"lineNum":" 3526","line":""},
{"lineNum":" 3527","line":"    const S = packed struct {"},
{"lineNum":" 3528","line":"        a: u8,"},
{"lineNum":" 3529","line":"        b: u8,"},
{"lineNum":" 3530","line":"        c: u8,"},
{"lineNum":" 3531","line":"        d: u8,"},
{"lineNum":" 3532","line":"    };"},
{"lineNum":" 3533","line":""},
{"lineNum":" 3534","line":"    const inst = S{"},
{"lineNum":" 3535","line":"        .a = 0xBE,"},
{"lineNum":" 3536","line":"        .b = 0xEF,"},
{"lineNum":" 3537","line":"        .c = 0xDE,"},
{"lineNum":" 3538","line":"        .d = 0xA1,"},
{"lineNum":" 3539","line":"    };"},
{"lineNum":" 3540","line":"    const inst_bytes = switch (native_endian) {"},
{"lineNum":" 3541","line":"        .Little => \"\\xBE\\xEF\\xDE\\xA1\","},
{"lineNum":" 3542","line":"        .Big => \"\\xA1\\xDE\\xEF\\xBE\","},
{"lineNum":" 3543","line":"    };"},
{"lineNum":" 3544","line":"    const inst2 = bytesAsValue(S, inst_bytes);"},
{"lineNum":" 3545","line":"    try testing.expect(meta.eql(inst, inst2.*));"},
{"lineNum":" 3546","line":"}"},
{"lineNum":" 3547","line":""},
{"lineNum":" 3548","line":"test \"bytesAsValue preserves pointer attributes\" {"},
{"lineNum":" 3549","line":"    const inArr align(16) = [4]u8{ 0xDE, 0xAD, 0xBE, 0xEF };"},
{"lineNum":" 3550","line":"    const inSlice = @ptrCast(*align(16) const volatile [4]u8, &inArr)[0..];"},
{"lineNum":" 3551","line":"    const outPtr = bytesAsValue(u32, inSlice);"},
{"lineNum":" 3552","line":""},
{"lineNum":" 3553","line":"    const in = @typeInfo(@TypeOf(inSlice)).Pointer;"},
{"lineNum":" 3554","line":"    const out = @typeInfo(@TypeOf(outPtr)).Pointer;"},
{"lineNum":" 3555","line":""},
{"lineNum":" 3556","line":"    try testing.expectEqual(in.is_const, out.is_const);"},
{"lineNum":" 3557","line":"    try testing.expectEqual(in.is_volatile, out.is_volatile);"},
{"lineNum":" 3558","line":"    try testing.expectEqual(in.is_allowzero, out.is_allowzero);"},
{"lineNum":" 3559","line":"    try testing.expectEqual(in.alignment, out.alignment);"},
{"lineNum":" 3560","line":"}"},
{"lineNum":" 3561","line":""},
{"lineNum":" 3562","line":"/// Given a pointer to an array of bytes, returns a value of the specified type backed by a"},
{"lineNum":" 3563","line":"/// copy of those bytes."},
{"lineNum":" 3564","line":"pub fn bytesToValue(comptime T: type, bytes: anytype) T {"},
{"lineNum":" 3565","line":"    return bytesAsValue(T, bytes).*;"},
{"lineNum":" 3566","line":"}"},
{"lineNum":" 3567","line":"test \"bytesToValue\" {"},
{"lineNum":" 3568","line":"    const deadbeef_bytes = switch (native_endian) {"},
{"lineNum":" 3569","line":"        .Big => \"\\xDE\\xAD\\xBE\\xEF\","},
{"lineNum":" 3570","line":"        .Little => \"\\xEF\\xBE\\xAD\\xDE\","},
{"lineNum":" 3571","line":"    };"},
{"lineNum":" 3572","line":""},
{"lineNum":" 3573","line":"    const deadbeef = bytesToValue(u32, deadbeef_bytes);"},
{"lineNum":" 3574","line":"    try testing.expect(deadbeef == @as(u32, 0xDEADBEEF));"},
{"lineNum":" 3575","line":"}"},
{"lineNum":" 3576","line":""},
{"lineNum":" 3577","line":"fn BytesAsSliceReturnType(comptime T: type, comptime bytesType: type) type {"},
{"lineNum":" 3578","line":"    if (!(trait.isSlice(bytesType) or trait.isPtrTo(.Array)(bytesType)) or meta.Elem(bytesType) != u8) {"},
{"lineNum":" 3579","line":"        @compileError(\"expected []u8 or *[_]u8, passed \" ++ @typeName(bytesType));"},
{"lineNum":" 3580","line":"    }"},
{"lineNum":" 3581","line":""},
{"lineNum":" 3582","line":"    if (trait.isPtrTo(.Array)(bytesType) and @typeInfo(meta.Child(bytesType)).Array.len % @sizeOf(T) != 0) {"},
{"lineNum":" 3583","line":"        @compileError(\"number of bytes in \" ++ @typeName(bytesType) ++ \" is not divisible by size of \" ++ @typeName(T));"},
{"lineNum":" 3584","line":"    }"},
{"lineNum":" 3585","line":""},
{"lineNum":" 3586","line":"    return CopyPtrAttrs(bytesType, .Slice, T);"},
{"lineNum":" 3587","line":"}"},
{"lineNum":" 3588","line":""},
{"lineNum":" 3589","line":"/// Given a slice of bytes, returns a slice of the specified type"},
{"lineNum":" 3590","line":"/// backed by those bytes, preserving pointer attributes."},
{"lineNum":" 3591","line":"pub fn bytesAsSlice(comptime T: type, bytes: anytype) BytesAsSliceReturnType(T, @TypeOf(bytes)) {","class":"linePartCov","hits":"9","order":"245","possible_hits":"19",},
{"lineNum":" 3592","line":"    // let\'s not give an undefined pointer to @ptrCast"},
{"lineNum":" 3593","line":"    // it may be equal to zero and fail a null check"},
{"lineNum":" 3594","line":"    if (bytes.len == 0) {","class":"linePartCov","hits":"9","order":"246","possible_hits":"19",},
{"lineNum":" 3595","line":"        return &[0]T{};","class":"lineNoCov","hits":"0","possible_hits":"19",},
{"lineNum":" 3596","line":"    }"},
{"lineNum":" 3597","line":""},
{"lineNum":" 3598","line":"    const cast_target = CopyPtrAttrs(@TypeOf(bytes), .Many, T);"},
{"lineNum":" 3599","line":""},
{"lineNum":" 3600","line":"    return @ptrCast(cast_target, bytes)[0..@divExact(bytes.len, @sizeOf(T))];","class":"linePartCov","hits":"9","order":"247","possible_hits":"19",},
{"lineNum":" 3601","line":"}"},
{"lineNum":" 3602","line":""},
{"lineNum":" 3603","line":"test \"bytesAsSlice\" {"},
{"lineNum":" 3604","line":"    {"},
{"lineNum":" 3605","line":"        const bytes = [_]u8{ 0xDE, 0xAD, 0xBE, 0xEF };"},
{"lineNum":" 3606","line":"        const slice = bytesAsSlice(u16, bytes[0..]);"},
{"lineNum":" 3607","line":"        try testing.expect(slice.len == 2);"},
{"lineNum":" 3608","line":"        try testing.expect(bigToNative(u16, slice[0]) == 0xDEAD);"},
{"lineNum":" 3609","line":"        try testing.expect(bigToNative(u16, slice[1]) == 0xBEEF);"},
{"lineNum":" 3610","line":"    }"},
{"lineNum":" 3611","line":"    {"},
{"lineNum":" 3612","line":"        const bytes = [_]u8{ 0xDE, 0xAD, 0xBE, 0xEF };"},
{"lineNum":" 3613","line":"        var runtime_zero: usize = 0;"},
{"lineNum":" 3614","line":"        const slice = bytesAsSlice(u16, bytes[runtime_zero..]);"},
{"lineNum":" 3615","line":"        try testing.expect(slice.len == 2);"},
{"lineNum":" 3616","line":"        try testing.expect(bigToNative(u16, slice[0]) == 0xDEAD);"},
{"lineNum":" 3617","line":"        try testing.expect(bigToNative(u16, slice[1]) == 0xBEEF);"},
{"lineNum":" 3618","line":"    }"},
{"lineNum":" 3619","line":"}"},
{"lineNum":" 3620","line":""},
{"lineNum":" 3621","line":"test \"bytesAsSlice keeps pointer alignment\" {"},
{"lineNum":" 3622","line":"    {"},
{"lineNum":" 3623","line":"        var bytes = [_]u8{ 0x01, 0x02, 0x03, 0x04 };"},
{"lineNum":" 3624","line":"        const numbers = bytesAsSlice(u32, bytes[0..]);"},
{"lineNum":" 3625","line":"        comptime try testing.expect(@TypeOf(numbers) == []align(@alignOf(@TypeOf(bytes))) u32);"},
{"lineNum":" 3626","line":"    }"},
{"lineNum":" 3627","line":"    {"},
{"lineNum":" 3628","line":"        var bytes = [_]u8{ 0x01, 0x02, 0x03, 0x04 };"},
{"lineNum":" 3629","line":"        var runtime_zero: usize = 0;"},
{"lineNum":" 3630","line":"        const numbers = bytesAsSlice(u32, bytes[runtime_zero..]);"},
{"lineNum":" 3631","line":"        comptime try testing.expect(@TypeOf(numbers) == []align(@alignOf(@TypeOf(bytes))) u32);"},
{"lineNum":" 3632","line":"    }"},
{"lineNum":" 3633","line":"}"},
{"lineNum":" 3634","line":""},
{"lineNum":" 3635","line":"test \"bytesAsSlice on a packed struct\" {"},
{"lineNum":" 3636","line":"    const F = packed struct {"},
{"lineNum":" 3637","line":"        a: u8,"},
{"lineNum":" 3638","line":"    };"},
{"lineNum":" 3639","line":""},
{"lineNum":" 3640","line":"    var b = [1]u8{9};"},
{"lineNum":" 3641","line":"    var f = bytesAsSlice(F, &b);"},
{"lineNum":" 3642","line":"    try testing.expect(f[0].a == 9);"},
{"lineNum":" 3643","line":"}"},
{"lineNum":" 3644","line":""},
{"lineNum":" 3645","line":"test \"bytesAsSlice with specified alignment\" {"},
{"lineNum":" 3646","line":"    var bytes align(4) = [_]u8{"},
{"lineNum":" 3647","line":"        0x33,"},
{"lineNum":" 3648","line":"        0x33,"},
{"lineNum":" 3649","line":"        0x33,"},
{"lineNum":" 3650","line":"        0x33,"},
{"lineNum":" 3651","line":"    };"},
{"lineNum":" 3652","line":"    const slice: []u32 = std.mem.bytesAsSlice(u32, bytes[0..]);"},
{"lineNum":" 3653","line":"    try testing.expect(slice[0] == 0x33333333);"},
{"lineNum":" 3654","line":"}"},
{"lineNum":" 3655","line":""},
{"lineNum":" 3656","line":"test \"bytesAsSlice preserves pointer attributes\" {"},
{"lineNum":" 3657","line":"    const inArr align(16) = [4]u8{ 0xDE, 0xAD, 0xBE, 0xEF };"},
{"lineNum":" 3658","line":"    const inSlice = @ptrCast(*align(16) const volatile [4]u8, &inArr)[0..];"},
{"lineNum":" 3659","line":"    const outSlice = bytesAsSlice(u16, inSlice);"},
{"lineNum":" 3660","line":""},
{"lineNum":" 3661","line":"    const in = @typeInfo(@TypeOf(inSlice)).Pointer;"},
{"lineNum":" 3662","line":"    const out = @typeInfo(@TypeOf(outSlice)).Pointer;"},
{"lineNum":" 3663","line":""},
{"lineNum":" 3664","line":"    try testing.expectEqual(in.is_const, out.is_const);"},
{"lineNum":" 3665","line":"    try testing.expectEqual(in.is_volatile, out.is_volatile);"},
{"lineNum":" 3666","line":"    try testing.expectEqual(in.is_allowzero, out.is_allowzero);"},
{"lineNum":" 3667","line":"    try testing.expectEqual(in.alignment, out.alignment);"},
{"lineNum":" 3668","line":"}"},
{"lineNum":" 3669","line":""},
{"lineNum":" 3670","line":"fn SliceAsBytesReturnType(comptime sliceType: type) type {"},
{"lineNum":" 3671","line":"    if (!trait.isSlice(sliceType) and !trait.isPtrTo(.Array)(sliceType)) {"},
{"lineNum":" 3672","line":"        @compileError(\"expected []T or *[_]T, passed \" ++ @typeName(sliceType));"},
{"lineNum":" 3673","line":"    }"},
{"lineNum":" 3674","line":""},
{"lineNum":" 3675","line":"    return CopyPtrAttrs(sliceType, .Slice, u8);"},
{"lineNum":" 3676","line":"}"},
{"lineNum":" 3677","line":""},
{"lineNum":" 3678","line":"/// Given a slice, returns a slice of the underlying bytes, preserving pointer attributes."},
{"lineNum":" 3679","line":"pub fn sliceAsBytes(slice: anytype) SliceAsBytesReturnType(@TypeOf(slice)) {","class":"linePartCov","hits":"7","order":"252","possible_hits":"17",},
{"lineNum":" 3680","line":"    const Slice = @TypeOf(slice);"},
{"lineNum":" 3681","line":""},
{"lineNum":" 3682","line":"    // let\'s not give an undefined pointer to @ptrCast"},
{"lineNum":" 3683","line":"    // it may be equal to zero and fail a null check"},
{"lineNum":" 3684","line":"    if (slice.len == 0 and comptime meta.sentinel(Slice) == null) {","class":"linePartCov","hits":"6","order":"253","possible_hits":"16",},
{"lineNum":" 3685","line":"        return &[0]u8{};","class":"linePartCov","hits":"5","order":"254","possible_hits":"16",},
{"lineNum":" 3686","line":"    }"},
{"lineNum":" 3687","line":""},
{"lineNum":" 3688","line":"    const cast_target = CopyPtrAttrs(Slice, .Many, u8);"},
{"lineNum":" 3689","line":""},
{"lineNum":" 3690","line":"    return @ptrCast(cast_target, slice)[0 .. slice.len * @sizeOf(meta.Elem(Slice))];","class":"linePartCov","hits":"6","order":"312","possible_hits":"17",},
{"lineNum":" 3691","line":"}"},
{"lineNum":" 3692","line":""},
{"lineNum":" 3693","line":"test \"sliceAsBytes\" {"},
{"lineNum":" 3694","line":"    const bytes = [_]u16{ 0xDEAD, 0xBEEF };"},
{"lineNum":" 3695","line":"    const slice = sliceAsBytes(bytes[0..]);"},
{"lineNum":" 3696","line":"    try testing.expect(slice.len == 4);"},
{"lineNum":" 3697","line":"    try testing.expect(eql(u8, slice, switch (native_endian) {"},
{"lineNum":" 3698","line":"        .Big => \"\\xDE\\xAD\\xBE\\xEF\","},
{"lineNum":" 3699","line":"        .Little => \"\\xAD\\xDE\\xEF\\xBE\","},
{"lineNum":" 3700","line":"    }));"},
{"lineNum":" 3701","line":"}"},
{"lineNum":" 3702","line":""},
{"lineNum":" 3703","line":"test \"sliceAsBytes with sentinel slice\" {"},
{"lineNum":" 3704","line":"    const empty_string: [:0]const u8 = \"\";"},
{"lineNum":" 3705","line":"    const bytes = sliceAsBytes(empty_string);"},
{"lineNum":" 3706","line":"    try testing.expect(bytes.len == 0);"},
{"lineNum":" 3707","line":"}"},
{"lineNum":" 3708","line":""},
{"lineNum":" 3709","line":"test \"sliceAsBytes packed struct at runtime and comptime\" {"},
{"lineNum":" 3710","line":"    const Foo = packed struct {"},
{"lineNum":" 3711","line":"        a: u4,"},
{"lineNum":" 3712","line":"        b: u4,"},
{"lineNum":" 3713","line":"    };"},
{"lineNum":" 3714","line":"    const S = struct {"},
{"lineNum":" 3715","line":"        fn doTheTest() !void {"},
{"lineNum":" 3716","line":"            var foo: Foo = undefined;"},
{"lineNum":" 3717","line":"            var slice = sliceAsBytes(@as(*[1]Foo, &foo)[0..1]);"},
{"lineNum":" 3718","line":"            slice[0] = 0x13;"},
{"lineNum":" 3719","line":"            try testing.expect(foo.a == 0x3);"},
{"lineNum":" 3720","line":"            try testing.expect(foo.b == 0x1);"},
{"lineNum":" 3721","line":"        }"},
{"lineNum":" 3722","line":"    };"},
{"lineNum":" 3723","line":"    try S.doTheTest();"},
{"lineNum":" 3724","line":"    comptime try S.doTheTest();"},
{"lineNum":" 3725","line":"}"},
{"lineNum":" 3726","line":""},
{"lineNum":" 3727","line":"test \"sliceAsBytes and bytesAsSlice back\" {"},
{"lineNum":" 3728","line":"    try testing.expect(@sizeOf(i32) == 4);"},
{"lineNum":" 3729","line":""},
{"lineNum":" 3730","line":"    var big_thing_array = [_]i32{ 1, 2, 3, 4 };"},
{"lineNum":" 3731","line":"    const big_thing_slice: []i32 = big_thing_array[0..];"},
{"lineNum":" 3732","line":""},
{"lineNum":" 3733","line":"    const bytes = sliceAsBytes(big_thing_slice);"},
{"lineNum":" 3734","line":"    try testing.expect(bytes.len == 4 * 4);"},
{"lineNum":" 3735","line":""},
{"lineNum":" 3736","line":"    bytes[4] = 0;"},
{"lineNum":" 3737","line":"    bytes[5] = 0;"},
{"lineNum":" 3738","line":"    bytes[6] = 0;"},
{"lineNum":" 3739","line":"    bytes[7] = 0;"},
{"lineNum":" 3740","line":"    try testing.expect(big_thing_slice[1] == 0);"},
{"lineNum":" 3741","line":""},
{"lineNum":" 3742","line":"    const big_thing_again = bytesAsSlice(i32, bytes);"},
{"lineNum":" 3743","line":"    try testing.expect(big_thing_again[2] == 3);"},
{"lineNum":" 3744","line":""},
{"lineNum":" 3745","line":"    big_thing_again[2] = -1;"},
{"lineNum":" 3746","line":"    try testing.expect(bytes[8] == math.maxInt(u8));"},
{"lineNum":" 3747","line":"    try testing.expect(bytes[9] == math.maxInt(u8));"},
{"lineNum":" 3748","line":"    try testing.expect(bytes[10] == math.maxInt(u8));"},
{"lineNum":" 3749","line":"    try testing.expect(bytes[11] == math.maxInt(u8));"},
{"lineNum":" 3750","line":"}"},
{"lineNum":" 3751","line":""},
{"lineNum":" 3752","line":"test \"sliceAsBytes preserves pointer attributes\" {"},
{"lineNum":" 3753","line":"    const inArr align(16) = [2]u16{ 0xDEAD, 0xBEEF };"},
{"lineNum":" 3754","line":"    const inSlice = @ptrCast(*align(16) const volatile [2]u16, &inArr)[0..];"},
{"lineNum":" 3755","line":"    const outSlice = sliceAsBytes(inSlice);"},
{"lineNum":" 3756","line":""},
{"lineNum":" 3757","line":"    const in = @typeInfo(@TypeOf(inSlice)).Pointer;"},
{"lineNum":" 3758","line":"    const out = @typeInfo(@TypeOf(outSlice)).Pointer;"},
{"lineNum":" 3759","line":""},
{"lineNum":" 3760","line":"    try testing.expectEqual(in.is_const, out.is_const);"},
{"lineNum":" 3761","line":"    try testing.expectEqual(in.is_volatile, out.is_volatile);"},
{"lineNum":" 3762","line":"    try testing.expectEqual(in.is_allowzero, out.is_allowzero);"},
{"lineNum":" 3763","line":"    try testing.expectEqual(in.alignment, out.alignment);"},
{"lineNum":" 3764","line":"}"},
{"lineNum":" 3765","line":""},
{"lineNum":" 3766","line":"/// Round an address up to the next (or current) aligned address."},
{"lineNum":" 3767","line":"/// The alignment must be a power of 2 and greater than 0."},
{"lineNum":" 3768","line":"/// Asserts that rounding up the address does not cause integer overflow."},
{"lineNum":" 3769","line":"pub fn alignForward(addr: usize, alignment: usize) usize {","class":"lineCov","hits":"1","order":"45","possible_hits":"1",},
{"lineNum":" 3770","line":"    return alignForwardGeneric(usize, addr, alignment);","class":"lineCov","hits":"1","order":"46","possible_hits":"1",},
{"lineNum":" 3771","line":"}"},
{"lineNum":" 3772","line":""},
{"lineNum":" 3773","line":"pub fn alignForwardLog2(addr: usize, log2_alignment: u8) usize {"},
{"lineNum":" 3774","line":"    const alignment = @as(usize, 1) << @intCast(math.Log2Int(usize), log2_alignment);"},
{"lineNum":" 3775","line":"    return alignForward(addr, alignment);"},
{"lineNum":" 3776","line":"}"},
{"lineNum":" 3777","line":""},
{"lineNum":" 3778","line":"/// Round an address up to the next (or current) aligned address."},
{"lineNum":" 3779","line":"/// The alignment must be a power of 2 and greater than 0."},
{"lineNum":" 3780","line":"/// Asserts that rounding up the address does not cause integer overflow."},
{"lineNum":" 3781","line":"pub fn alignForwardGeneric(comptime T: type, addr: T, alignment: T) T {","class":"lineCov","hits":"1","order":"47","possible_hits":"1",},
{"lineNum":" 3782","line":"    assert(isValidAlignGeneric(T, alignment));","class":"lineCov","hits":"1","order":"48","possible_hits":"1",},
{"lineNum":" 3783","line":"    return alignBackwardGeneric(T, addr + (alignment - 1), alignment);","class":"lineCov","hits":"1","order":"56","possible_hits":"1",},
{"lineNum":" 3784","line":"}"},
{"lineNum":" 3785","line":""},
{"lineNum":" 3786","line":"/// Force an evaluation of the expression; this tries to prevent"},
{"lineNum":" 3787","line":"/// the compiler from optimizing the computation away even if the"},
{"lineNum":" 3788","line":"/// result eventually gets discarded."},
{"lineNum":" 3789","line":"// TODO: use @declareSideEffect() when it is available - https://github.com/ziglang/zig/issues/6168"},
{"lineNum":" 3790","line":"pub fn doNotOptimizeAway(val: anytype) void {"},
{"lineNum":" 3791","line":"    var a: u8 = 0;"},
{"lineNum":" 3792","line":"    if (@typeInfo(@TypeOf(.{a})).Struct.fields[0].is_comptime) return;"},
{"lineNum":" 3793","line":""},
{"lineNum":" 3794","line":"    const max_gp_register_bits = @bitSizeOf(c_long);"},
{"lineNum":" 3795","line":"    const t = @typeInfo(@TypeOf(val));"},
{"lineNum":" 3796","line":"    switch (t) {"},
{"lineNum":" 3797","line":"        .Void, .Null, .ComptimeInt, .ComptimeFloat => return,"},
{"lineNum":" 3798","line":"        .Enum => doNotOptimizeAway(@enumToInt(val)),"},
{"lineNum":" 3799","line":"        .Bool => doNotOptimizeAway(@boolToInt(val)),"},
{"lineNum":" 3800","line":"        .Int => {"},
{"lineNum":" 3801","line":"            const bits = t.Int.bits;"},
{"lineNum":" 3802","line":"            if (bits <= max_gp_register_bits and builtin.zig_backend != .stage2_c) {"},
{"lineNum":" 3803","line":"                const val2 = @as("},
{"lineNum":" 3804","line":"                    std.meta.Int(t.Int.signedness, @max(8, std.math.ceilPowerOfTwoAssert(u16, bits))),"},
{"lineNum":" 3805","line":"                    val,"},
{"lineNum":" 3806","line":"                );"},
{"lineNum":" 3807","line":"                asm volatile (\"\""},
{"lineNum":" 3808","line":"                    :"},
{"lineNum":" 3809","line":"                    : [val2] \"r\" (val2),"},
{"lineNum":" 3810","line":"                );"},
{"lineNum":" 3811","line":"            } else doNotOptimizeAway(&val);"},
{"lineNum":" 3812","line":"        },"},
{"lineNum":" 3813","line":"        .Float => {"},
{"lineNum":" 3814","line":"            if ((t.Float.bits == 32 or t.Float.bits == 64) and builtin.zig_backend != .stage2_c) {"},
{"lineNum":" 3815","line":"                asm volatile (\"\""},
{"lineNum":" 3816","line":"                    :"},
{"lineNum":" 3817","line":"                    : [val] \"rm\" (val),"},
{"lineNum":" 3818","line":"                );"},
{"lineNum":" 3819","line":"            } else doNotOptimizeAway(&val);"},
{"lineNum":" 3820","line":"        },"},
{"lineNum":" 3821","line":"        .Pointer => {"},
{"lineNum":" 3822","line":"            if (builtin.zig_backend == .stage2_c) {"},
{"lineNum":" 3823","line":"                doNotOptimizeAwayC(val);"},
{"lineNum":" 3824","line":"            } else {"},
{"lineNum":" 3825","line":"                asm volatile (\"\""},
{"lineNum":" 3826","line":"                    :"},
{"lineNum":" 3827","line":"                    : [val] \"m\" (val),"},
{"lineNum":" 3828","line":"                    : \"memory\""},
{"lineNum":" 3829","line":"                );"},
{"lineNum":" 3830","line":"            }"},
{"lineNum":" 3831","line":"        },"},
{"lineNum":" 3832","line":"        .Array => {"},
{"lineNum":" 3833","line":"            if (t.Array.len * @sizeOf(t.Array.child) <= 64) {"},
{"lineNum":" 3834","line":"                for (val) |v| doNotOptimizeAway(v);"},
{"lineNum":" 3835","line":"            } else doNotOptimizeAway(&val);"},
{"lineNum":" 3836","line":"        },"},
{"lineNum":" 3837","line":"        else => doNotOptimizeAway(&val),"},
{"lineNum":" 3838","line":"    }"},
{"lineNum":" 3839","line":"}"},
{"lineNum":" 3840","line":""},
{"lineNum":" 3841","line":"/// .stage2_c doesn\'t support asm blocks yet, so use volatile stores instead"},
{"lineNum":" 3842","line":"var deopt_target: if (builtin.zig_backend == .stage2_c) u8 else void = undefined;"},
{"lineNum":" 3843","line":"fn doNotOptimizeAwayC(ptr: anytype) void {"},
{"lineNum":" 3844","line":"    const dest = @ptrCast(*volatile u8, &deopt_target);"},
{"lineNum":" 3845","line":"    for (asBytes(ptr)) |b| {"},
{"lineNum":" 3846","line":"        dest.* = b;"},
{"lineNum":" 3847","line":"    }"},
{"lineNum":" 3848","line":"    dest.* = 0;"},
{"lineNum":" 3849","line":"}"},
{"lineNum":" 3850","line":""},
{"lineNum":" 3851","line":"test \"doNotOptimizeAway\" {"},
{"lineNum":" 3852","line":"    comptime doNotOptimizeAway(\"test\");"},
{"lineNum":" 3853","line":""},
{"lineNum":" 3854","line":"    doNotOptimizeAway(null);"},
{"lineNum":" 3855","line":"    doNotOptimizeAway(true);"},
{"lineNum":" 3856","line":"    doNotOptimizeAway(0);"},
{"lineNum":" 3857","line":"    doNotOptimizeAway(0.0);"},
{"lineNum":" 3858","line":"    doNotOptimizeAway(@as(u1, 0));"},
{"lineNum":" 3859","line":"    doNotOptimizeAway(@as(u3, 0));"},
{"lineNum":" 3860","line":"    doNotOptimizeAway(@as(u8, 0));"},
{"lineNum":" 3861","line":"    doNotOptimizeAway(@as(u16, 0));"},
{"lineNum":" 3862","line":"    doNotOptimizeAway(@as(u32, 0));"},
{"lineNum":" 3863","line":"    doNotOptimizeAway(@as(u64, 0));"},
{"lineNum":" 3864","line":"    doNotOptimizeAway(@as(u128, 0));"},
{"lineNum":" 3865","line":"    doNotOptimizeAway(@as(u13, 0));"},
{"lineNum":" 3866","line":"    doNotOptimizeAway(@as(u37, 0));"},
{"lineNum":" 3867","line":"    doNotOptimizeAway(@as(u96, 0));"},
{"lineNum":" 3868","line":"    doNotOptimizeAway(@as(u200, 0));"},
{"lineNum":" 3869","line":"    doNotOptimizeAway(@as(f32, 0.0));"},
{"lineNum":" 3870","line":"    doNotOptimizeAway(@as(f64, 0.0));"},
{"lineNum":" 3871","line":"    doNotOptimizeAway([_]u8{0} ** 4);"},
{"lineNum":" 3872","line":"    doNotOptimizeAway([_]u8{0} ** 100);"},
{"lineNum":" 3873","line":"    doNotOptimizeAway(@as(std.builtin.Endian, .Little));"},
{"lineNum":" 3874","line":"}"},
{"lineNum":" 3875","line":""},
{"lineNum":" 3876","line":"test \"alignForward\" {"},
{"lineNum":" 3877","line":"    try testing.expect(alignForward(1, 1) == 1);"},
{"lineNum":" 3878","line":"    try testing.expect(alignForward(2, 1) == 2);"},
{"lineNum":" 3879","line":"    try testing.expect(alignForward(1, 2) == 2);"},
{"lineNum":" 3880","line":"    try testing.expect(alignForward(2, 2) == 2);"},
{"lineNum":" 3881","line":"    try testing.expect(alignForward(3, 2) == 4);"},
{"lineNum":" 3882","line":"    try testing.expect(alignForward(4, 2) == 4);"},
{"lineNum":" 3883","line":"    try testing.expect(alignForward(7, 8) == 8);"},
{"lineNum":" 3884","line":"    try testing.expect(alignForward(8, 8) == 8);"},
{"lineNum":" 3885","line":"    try testing.expect(alignForward(9, 8) == 16);"},
{"lineNum":" 3886","line":"    try testing.expect(alignForward(15, 8) == 16);"},
{"lineNum":" 3887","line":"    try testing.expect(alignForward(16, 8) == 16);"},
{"lineNum":" 3888","line":"    try testing.expect(alignForward(17, 8) == 24);"},
{"lineNum":" 3889","line":"}"},
{"lineNum":" 3890","line":""},
{"lineNum":" 3891","line":"/// Round an address down to the previous (or current) aligned address."},
{"lineNum":" 3892","line":"/// Unlike `alignBackward`, `alignment` can be any positive number, not just a power of 2."},
{"lineNum":" 3893","line":"pub fn alignBackwardAnyAlign(i: usize, alignment: usize) usize {"},
{"lineNum":" 3894","line":"    if (isValidAlign(alignment))"},
{"lineNum":" 3895","line":"        return alignBackward(i, alignment);"},
{"lineNum":" 3896","line":"    assert(alignment != 0);"},
{"lineNum":" 3897","line":"    return i - @mod(i, alignment);"},
{"lineNum":" 3898","line":"}"},
{"lineNum":" 3899","line":""},
{"lineNum":" 3900","line":"/// Round an address down to the previous (or current) aligned address."},
{"lineNum":" 3901","line":"/// The alignment must be a power of 2 and greater than 0."},
{"lineNum":" 3902","line":"pub fn alignBackward(addr: usize, alignment: usize) usize {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3903","line":"    return alignBackwardGeneric(usize, addr, alignment);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":" 3904","line":"}"},
{"lineNum":" 3905","line":""},
{"lineNum":" 3906","line":"/// Round an address down to the previous (or current) aligned address."},
{"lineNum":" 3907","line":"/// The alignment must be a power of 2 and greater than 0."},
{"lineNum":" 3908","line":"pub fn alignBackwardGeneric(comptime T: type, addr: T, alignment: T) T {","class":"lineCov","hits":"2","order":"57","possible_hits":"2",},
{"lineNum":" 3909","line":"    assert(isValidAlignGeneric(T, alignment));","class":"lineCov","hits":"2","order":"58","possible_hits":"2",},
{"lineNum":" 3910","line":"    // 000010000 // example alignment"},
{"lineNum":" 3911","line":"    // 000001111 // subtract 1"},
{"lineNum":" 3912","line":"    // 111110000 // binary not"},
{"lineNum":" 3913","line":"    return addr & ~(alignment - 1);","class":"lineCov","hits":"2","order":"59","possible_hits":"2",},
{"lineNum":" 3914","line":"}"},
{"lineNum":" 3915","line":""},
{"lineNum":" 3916","line":"/// Returns whether `alignment` is a valid alignment, meaning it is"},
{"lineNum":" 3917","line":"/// a positive power of 2."},
{"lineNum":" 3918","line":"pub fn isValidAlign(alignment: usize) bool {","class":"lineCov","hits":"1","order":"233","possible_hits":"1",},
{"lineNum":" 3919","line":"    return isValidAlignGeneric(usize, alignment);","class":"lineCov","hits":"1","order":"234","possible_hits":"1",},
{"lineNum":" 3920","line":"}"},
{"lineNum":" 3921","line":""},
{"lineNum":" 3922","line":"/// Returns whether `alignment` is a valid alignment, meaning it is"},
{"lineNum":" 3923","line":"/// a positive power of 2."},
{"lineNum":" 3924","line":"pub fn isValidAlignGeneric(comptime T: type, alignment: T) bool {","class":"lineCov","hits":"2","order":"49","possible_hits":"2",},
{"lineNum":" 3925","line":"    return alignment > 0 and std.math.isPowerOfTwo(alignment);","class":"lineCov","hits":"2","order":"50","possible_hits":"2",},
{"lineNum":" 3926","line":"}"},
{"lineNum":" 3927","line":""},
{"lineNum":" 3928","line":"pub fn isAlignedAnyAlign(i: usize, alignment: usize) bool {"},
{"lineNum":" 3929","line":"    if (isValidAlign(alignment))"},
{"lineNum":" 3930","line":"        return isAligned(i, alignment);"},
{"lineNum":" 3931","line":"    assert(alignment != 0);"},
{"lineNum":" 3932","line":"    return 0 == @mod(i, alignment);"},
{"lineNum":" 3933","line":"}"},
{"lineNum":" 3934","line":""},
{"lineNum":" 3935","line":"pub fn isAlignedLog2(addr: usize, log2_alignment: u8) bool {"},
{"lineNum":" 3936","line":"    return @ctz(addr) >= log2_alignment;"},
{"lineNum":" 3937","line":"}"},
{"lineNum":" 3938","line":""},
{"lineNum":" 3939","line":"/// Given an address and an alignment, return true if the address is a multiple of the alignment"},
{"lineNum":" 3940","line":"/// The alignment must be a power of 2 and greater than 0."},
{"lineNum":" 3941","line":"pub fn isAligned(addr: usize, alignment: usize) bool {","class":"lineCov","hits":"1","order":"833","possible_hits":"1",},
{"lineNum":" 3942","line":"    return isAlignedGeneric(u64, addr, alignment);","class":"lineCov","hits":"1","order":"834","possible_hits":"1",},
{"lineNum":" 3943","line":"}"},
{"lineNum":" 3944","line":""},
{"lineNum":" 3945","line":"pub fn isAlignedGeneric(comptime T: type, addr: T, alignment: T) bool {","class":"lineCov","hits":"1","order":"835","possible_hits":"1",},
{"lineNum":" 3946","line":"    return alignBackwardGeneric(T, addr, alignment) == addr;","class":"lineCov","hits":"1","order":"836","possible_hits":"1",},
{"lineNum":" 3947","line":"}"},
{"lineNum":" 3948","line":""},
{"lineNum":" 3949","line":"test \"isAligned\" {"},
{"lineNum":" 3950","line":"    try testing.expect(isAligned(0, 4));"},
{"lineNum":" 3951","line":"    try testing.expect(isAligned(1, 1));"},
{"lineNum":" 3952","line":"    try testing.expect(isAligned(2, 1));"},
{"lineNum":" 3953","line":"    try testing.expect(isAligned(2, 2));"},
{"lineNum":" 3954","line":"    try testing.expect(!isAligned(2, 4));"},
{"lineNum":" 3955","line":"    try testing.expect(isAligned(3, 1));"},
{"lineNum":" 3956","line":"    try testing.expect(!isAligned(3, 2));"},
{"lineNum":" 3957","line":"    try testing.expect(!isAligned(3, 4));"},
{"lineNum":" 3958","line":"    try testing.expect(isAligned(4, 4));"},
{"lineNum":" 3959","line":"    try testing.expect(isAligned(4, 2));"},
{"lineNum":" 3960","line":"    try testing.expect(isAligned(4, 1));"},
{"lineNum":" 3961","line":"    try testing.expect(!isAligned(4, 8));"},
{"lineNum":" 3962","line":"    try testing.expect(!isAligned(4, 16));"},
{"lineNum":" 3963","line":"}"},
{"lineNum":" 3964","line":""},
{"lineNum":" 3965","line":"test \"freeing empty string with null-terminated sentinel\" {"},
{"lineNum":" 3966","line":"    const empty_string = try testing.allocator.dupeZ(u8, \"\");"},
{"lineNum":" 3967","line":"    testing.allocator.free(empty_string);"},
{"lineNum":" 3968","line":"}"},
{"lineNum":" 3969","line":""},
{"lineNum":" 3970","line":"/// Returns a slice with the given new alignment,"},
{"lineNum":" 3971","line":"/// all other pointer attributes copied from `AttributeSource`."},
{"lineNum":" 3972","line":"fn AlignedSlice(comptime AttributeSource: type, comptime new_alignment: usize) type {"},
{"lineNum":" 3973","line":"    const info = @typeInfo(AttributeSource).Pointer;"},
{"lineNum":" 3974","line":"    return @Type(.{"},
{"lineNum":" 3975","line":"        .Pointer = .{"},
{"lineNum":" 3976","line":"            .size = .Slice,"},
{"lineNum":" 3977","line":"            .is_const = info.is_const,"},
{"lineNum":" 3978","line":"            .is_volatile = info.is_volatile,"},
{"lineNum":" 3979","line":"            .is_allowzero = info.is_allowzero,"},
{"lineNum":" 3980","line":"            .alignment = new_alignment,"},
{"lineNum":" 3981","line":"            .address_space = info.address_space,"},
{"lineNum":" 3982","line":"            .child = info.child,"},
{"lineNum":" 3983","line":"            .sentinel = null,"},
{"lineNum":" 3984","line":"        },"},
{"lineNum":" 3985","line":"    });"},
{"lineNum":" 3986","line":"}"},
{"lineNum":" 3987","line":""},
{"lineNum":" 3988","line":"/// Returns the largest slice in the given bytes that conforms to the new alignment,"},
{"lineNum":" 3989","line":"/// or `null` if the given bytes contain no conforming address."},
{"lineNum":" 3990","line":"pub fn alignInBytes(bytes: []u8, comptime new_alignment: usize) ?[]align(new_alignment) u8 {"},
{"lineNum":" 3991","line":"    const begin_address = @ptrToInt(bytes.ptr);"},
{"lineNum":" 3992","line":"    const end_address = begin_address + bytes.len;"},
{"lineNum":" 3993","line":""},
{"lineNum":" 3994","line":"    const begin_address_aligned = mem.alignForward(begin_address, new_alignment);"},
{"lineNum":" 3995","line":"    const new_length = std.math.sub(usize, end_address, begin_address_aligned) catch |e| switch (e) {"},
{"lineNum":" 3996","line":"        error.Overflow => return null,"},
{"lineNum":" 3997","line":"    };"},
{"lineNum":" 3998","line":"    const alignment_offset = begin_address_aligned - begin_address;"},
{"lineNum":" 3999","line":"    return @alignCast(new_alignment, bytes[alignment_offset .. alignment_offset + new_length]);"},
{"lineNum":" 4000","line":"}"},
{"lineNum":" 4001","line":""},
{"lineNum":" 4002","line":"/// Returns the largest sub-slice within the given slice that conforms to the new alignment,"},
{"lineNum":" 4003","line":"/// or `null` if the given slice contains no conforming address."},
{"lineNum":" 4004","line":"pub fn alignInSlice(slice: anytype, comptime new_alignment: usize) ?AlignedSlice(@TypeOf(slice), new_alignment) {"},
{"lineNum":" 4005","line":"    const bytes = sliceAsBytes(slice);"},
{"lineNum":" 4006","line":"    const aligned_bytes = alignInBytes(bytes, new_alignment) orelse return null;"},
{"lineNum":" 4007","line":""},
{"lineNum":" 4008","line":"    const Element = @TypeOf(slice[0]);"},
{"lineNum":" 4009","line":"    const slice_length_bytes = aligned_bytes.len - (aligned_bytes.len % @sizeOf(Element));"},
{"lineNum":" 4010","line":"    const aligned_slice = bytesAsSlice(Element, aligned_bytes[0..slice_length_bytes]);"},
{"lineNum":" 4011","line":"    return @alignCast(new_alignment, aligned_slice);"},
{"lineNum":" 4012","line":"}"},
{"lineNum":" 4013","line":""},
{"lineNum":" 4014","line":"test \"read/write(Var)PackedInt\" {"},
{"lineNum":" 4015","line":"    switch (builtin.cpu.arch) {"},
{"lineNum":" 4016","line":"        // This test generates too much code to execute on WASI."},
{"lineNum":" 4017","line":"        // LLVM backend fails with \"too many locals: locals exceed maximum\""},
{"lineNum":" 4018","line":"        .wasm32, .wasm64 => return error.SkipZigTest,"},
{"lineNum":" 4019","line":"        else => {},"},
{"lineNum":" 4020","line":"    }"},
{"lineNum":" 4021","line":""},
{"lineNum":" 4022","line":"    const foreign_endian: Endian = if (native_endian == .Big) .Little else .Big;"},
{"lineNum":" 4023","line":"    const expect = std.testing.expect;"},
{"lineNum":" 4024","line":"    var prng = std.rand.DefaultPrng.init(1234);"},
{"lineNum":" 4025","line":"    const random = prng.random();"},
{"lineNum":" 4026","line":""},
{"lineNum":" 4027","line":"    @setEvalBranchQuota(10_000);"},
{"lineNum":" 4028","line":"    inline for ([_]type{ u8, u16, u32, u128 }) |BackingType| {"},
{"lineNum":" 4029","line":"        for ([_]BackingType{"},
{"lineNum":" 4030","line":"            @as(BackingType, 0), // all zeros"},
{"lineNum":" 4031","line":"            -%@as(BackingType, 1), // all ones"},
{"lineNum":" 4032","line":"            random.int(BackingType), // random"},
{"lineNum":" 4033","line":"            random.int(BackingType), // random"},
{"lineNum":" 4034","line":"            random.int(BackingType), // random"},
{"lineNum":" 4035","line":"        }) |init_value| {"},
{"lineNum":" 4036","line":"            const uTs = [_]type{ u1, u3, u7, u8, u9, u10, u15, u16, u86 };"},
{"lineNum":" 4037","line":"            const iTs = [_]type{ i1, i3, i7, i8, i9, i10, i15, i16, i86 };"},
{"lineNum":" 4038","line":"            inline for (uTs ++ iTs) |PackedType| {"},
{"lineNum":" 4039","line":"                if (@bitSizeOf(PackedType) > @bitSizeOf(BackingType))"},
{"lineNum":" 4040","line":"                    continue;"},
{"lineNum":" 4041","line":""},
{"lineNum":" 4042","line":"                const iPackedType = std.meta.Int(.signed, @bitSizeOf(PackedType));"},
{"lineNum":" 4043","line":"                const uPackedType = std.meta.Int(.unsigned, @bitSizeOf(PackedType));"},
{"lineNum":" 4044","line":"                const Log2T = std.math.Log2Int(BackingType);"},
{"lineNum":" 4045","line":""},
{"lineNum":" 4046","line":"                const offset_at_end = @bitSizeOf(BackingType) - @bitSizeOf(PackedType);"},
{"lineNum":" 4047","line":"                for ([_]usize{ 0, 1, 7, 8, 9, 10, 15, 16, 86, offset_at_end }) |offset| {"},
{"lineNum":" 4048","line":"                    if (offset > offset_at_end or offset == @bitSizeOf(BackingType))"},
{"lineNum":" 4049","line":"                        continue;"},
{"lineNum":" 4050","line":""},
{"lineNum":" 4051","line":"                    for ([_]PackedType{"},
{"lineNum":" 4052","line":"                        ~@as(PackedType, 0), // all ones: -1 iN / maxInt uN"},
{"lineNum":" 4053","line":"                        @as(PackedType, 0), // all zeros: 0 iN / 0 uN"},
{"lineNum":" 4054","line":"                        @bitCast(PackedType, @as(iPackedType, math.maxInt(iPackedType))), // maxInt iN"},
{"lineNum":" 4055","line":"                        @bitCast(PackedType, @as(iPackedType, math.minInt(iPackedType))), // maxInt iN"},
{"lineNum":" 4056","line":"                        random.int(PackedType), // random"},
{"lineNum":" 4057","line":"                        random.int(PackedType), // random"},
{"lineNum":" 4058","line":"                    }) |write_value| {"},
{"lineNum":" 4059","line":"                        { // Fixed-size Read/Write (Native-endian)"},
{"lineNum":" 4060","line":""},
{"lineNum":" 4061","line":"                            // Initialize Value"},
{"lineNum":" 4062","line":"                            var value: BackingType = init_value;"},
{"lineNum":" 4063","line":""},
{"lineNum":" 4064","line":"                            // Read"},
{"lineNum":" 4065","line":"                            const read_value1 = readPackedInt(PackedType, asBytes(&value), offset, native_endian);"},
{"lineNum":" 4066","line":"                            try expect(read_value1 == @bitCast(PackedType, @truncate(uPackedType, value >> @intCast(Log2T, offset))));"},
{"lineNum":" 4067","line":""},
{"lineNum":" 4068","line":"                            // Write"},
{"lineNum":" 4069","line":"                            writePackedInt(PackedType, asBytes(&value), offset, write_value, native_endian);"},
{"lineNum":" 4070","line":"                            try expect(write_value == @bitCast(PackedType, @truncate(uPackedType, value >> @intCast(Log2T, offset))));"},
{"lineNum":" 4071","line":""},
{"lineNum":" 4072","line":"                            // Read again"},
{"lineNum":" 4073","line":"                            const read_value2 = readPackedInt(PackedType, asBytes(&value), offset, native_endian);"},
{"lineNum":" 4074","line":"                            try expect(read_value2 == write_value);"},
{"lineNum":" 4075","line":""},
{"lineNum":" 4076","line":"                            // Verify bits outside of the target integer are unmodified"},
{"lineNum":" 4077","line":"                            const diff_bits = init_value ^ value;"},
{"lineNum":" 4078","line":"                            if (offset != offset_at_end)"},
{"lineNum":" 4079","line":"                                try expect(diff_bits >> @intCast(Log2T, offset + @bitSizeOf(PackedType)) == 0);"},
{"lineNum":" 4080","line":"                            if (offset != 0)"},
{"lineNum":" 4081","line":"                                try expect(diff_bits << @intCast(Log2T, @bitSizeOf(BackingType) - offset) == 0);"},
{"lineNum":" 4082","line":"                        }"},
{"lineNum":" 4083","line":""},
{"lineNum":" 4084","line":"                        { // Fixed-size Read/Write (Foreign-endian)"},
{"lineNum":" 4085","line":""},
{"lineNum":" 4086","line":"                            // Initialize Value"},
{"lineNum":" 4087","line":"                            var value: BackingType = @byteSwap(init_value);"},
{"lineNum":" 4088","line":""},
{"lineNum":" 4089","line":"                            // Read"},
{"lineNum":" 4090","line":"                            const read_value1 = readPackedInt(PackedType, asBytes(&value), offset, foreign_endian);"},
{"lineNum":" 4091","line":"                            try expect(read_value1 == @bitCast(PackedType, @truncate(uPackedType, @byteSwap(value) >> @intCast(Log2T, offset))));"},
{"lineNum":" 4092","line":""},
{"lineNum":" 4093","line":"                            // Write"},
{"lineNum":" 4094","line":"                            writePackedInt(PackedType, asBytes(&value), offset, write_value, foreign_endian);"},
{"lineNum":" 4095","line":"                            try expect(write_value == @bitCast(PackedType, @truncate(uPackedType, @byteSwap(value) >> @intCast(Log2T, offset))));"},
{"lineNum":" 4096","line":""},
{"lineNum":" 4097","line":"                            // Read again"},
{"lineNum":" 4098","line":"                            const read_value2 = readPackedInt(PackedType, asBytes(&value), offset, foreign_endian);"},
{"lineNum":" 4099","line":"                            try expect(read_value2 == write_value);"},
{"lineNum":" 4100","line":""},
{"lineNum":" 4101","line":"                            // Verify bits outside of the target integer are unmodified"},
{"lineNum":" 4102","line":"                            const diff_bits = init_value ^ @byteSwap(value);"},
{"lineNum":" 4103","line":"                            if (offset != offset_at_end)"},
{"lineNum":" 4104","line":"                                try expect(diff_bits >> @intCast(Log2T, offset + @bitSizeOf(PackedType)) == 0);"},
{"lineNum":" 4105","line":"                            if (offset != 0)"},
{"lineNum":" 4106","line":"                                try expect(diff_bits << @intCast(Log2T, @bitSizeOf(BackingType) - offset) == 0);"},
{"lineNum":" 4107","line":"                        }"},
{"lineNum":" 4108","line":""},
{"lineNum":" 4109","line":"                        const signedness = @typeInfo(PackedType).Int.signedness;"},
{"lineNum":" 4110","line":"                        const NextPowerOfTwoInt = std.meta.Int(signedness, comptime try std.math.ceilPowerOfTwo(u16, @bitSizeOf(PackedType)));"},
{"lineNum":" 4111","line":"                        const ui64 = std.meta.Int(signedness, 64);"},
{"lineNum":" 4112","line":"                        inline for ([_]type{ PackedType, NextPowerOfTwoInt, ui64 }) |U| {"},
{"lineNum":" 4113","line":"                            { // Variable-size Read/Write (Native-endian)"},
{"lineNum":" 4114","line":""},
{"lineNum":" 4115","line":"                                if (@bitSizeOf(U) < @bitSizeOf(PackedType))"},
{"lineNum":" 4116","line":"                                    continue;"},
{"lineNum":" 4117","line":""},
{"lineNum":" 4118","line":"                                // Initialize Value"},
{"lineNum":" 4119","line":"                                var value: BackingType = init_value;"},
{"lineNum":" 4120","line":""},
{"lineNum":" 4121","line":"                                // Read"},
{"lineNum":" 4122","line":"                                const read_value1 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), native_endian, signedness);"},
{"lineNum":" 4123","line":"                                try expect(read_value1 == @bitCast(PackedType, @truncate(uPackedType, value >> @intCast(Log2T, offset))));"},
{"lineNum":" 4124","line":""},
{"lineNum":" 4125","line":"                                // Write"},
{"lineNum":" 4126","line":"                                writeVarPackedInt(asBytes(&value), offset, @bitSizeOf(PackedType), @as(U, write_value), native_endian);"},
{"lineNum":" 4127","line":"                                try expect(write_value == @bitCast(PackedType, @truncate(uPackedType, value >> @intCast(Log2T, offset))));"},
{"lineNum":" 4128","line":""},
{"lineNum":" 4129","line":"                                // Read again"},
{"lineNum":" 4130","line":"                                const read_value2 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), native_endian, signedness);"},
{"lineNum":" 4131","line":"                                try expect(read_value2 == write_value);"},
{"lineNum":" 4132","line":""},
{"lineNum":" 4133","line":"                                // Verify bits outside of the target integer are unmodified"},
{"lineNum":" 4134","line":"                                const diff_bits = init_value ^ value;"},
{"lineNum":" 4135","line":"                                if (offset != offset_at_end)"},
{"lineNum":" 4136","line":"                                    try expect(diff_bits >> @intCast(Log2T, offset + @bitSizeOf(PackedType)) == 0);"},
{"lineNum":" 4137","line":"                                if (offset != 0)"},
{"lineNum":" 4138","line":"                                    try expect(diff_bits << @intCast(Log2T, @bitSizeOf(BackingType) - offset) == 0);"},
{"lineNum":" 4139","line":"                            }"},
{"lineNum":" 4140","line":""},
{"lineNum":" 4141","line":"                            { // Variable-size Read/Write (Foreign-endian)"},
{"lineNum":" 4142","line":""},
{"lineNum":" 4143","line":"                                if (@bitSizeOf(U) < @bitSizeOf(PackedType))"},
{"lineNum":" 4144","line":"                                    continue;"},
{"lineNum":" 4145","line":""},
{"lineNum":" 4146","line":"                                // Initialize Value"},
{"lineNum":" 4147","line":"                                var value: BackingType = @byteSwap(init_value);"},
{"lineNum":" 4148","line":""},
{"lineNum":" 4149","line":"                                // Read"},
{"lineNum":" 4150","line":"                                const read_value1 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), foreign_endian, signedness);"},
{"lineNum":" 4151","line":"                                try expect(read_value1 == @bitCast(PackedType, @truncate(uPackedType, @byteSwap(value) >> @intCast(Log2T, offset))));"},
{"lineNum":" 4152","line":""},
{"lineNum":" 4153","line":"                                // Write"},
{"lineNum":" 4154","line":"                                writeVarPackedInt(asBytes(&value), offset, @bitSizeOf(PackedType), @as(U, write_value), foreign_endian);"},
{"lineNum":" 4155","line":"                                try expect(write_value == @bitCast(PackedType, @truncate(uPackedType, @byteSwap(value) >> @intCast(Log2T, offset))));"},
{"lineNum":" 4156","line":""},
{"lineNum":" 4157","line":"                                // Read again"},
{"lineNum":" 4158","line":"                                const read_value2 = readVarPackedInt(U, asBytes(&value), offset, @bitSizeOf(PackedType), foreign_endian, signedness);"},
{"lineNum":" 4159","line":"                                try expect(read_value2 == write_value);"},
{"lineNum":" 4160","line":""},
{"lineNum":" 4161","line":"                                // Verify bits outside of the target integer are unmodified"},
{"lineNum":" 4162","line":"                                const diff_bits = init_value ^ @byteSwap(value);"},
{"lineNum":" 4163","line":"                                if (offset != offset_at_end)"},
{"lineNum":" 4164","line":"                                    try expect(diff_bits >> @intCast(Log2T, offset + @bitSizeOf(PackedType)) == 0);"},
{"lineNum":" 4165","line":"                                if (offset != 0)"},
{"lineNum":" 4166","line":"                                    try expect(diff_bits << @intCast(Log2T, @bitSizeOf(BackingType) - offset) == 0);"},
{"lineNum":" 4167","line":"                            }"},
{"lineNum":" 4168","line":"                        }"},
{"lineNum":" 4169","line":"                    }"},
{"lineNum":" 4170","line":"                }"},
{"lineNum":" 4171","line":"            }"},
{"lineNum":" 4172","line":"        }"},
{"lineNum":" 4173","line":"    }"},
{"lineNum":" 4174","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 127, "covered" : 78,};
var merged_data = [];
