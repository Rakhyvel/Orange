var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const io = std.io;"},
{"lineNum":"    3","line":"const builtin = @import(\"builtin\");"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"pub const std_options = struct {"},
{"lineNum":"    6","line":"    pub const io_mode: io.Mode = builtin.test_io_mode;"},
{"lineNum":"    7","line":"    pub const logFn = log;"},
{"lineNum":"    8","line":"};"},
{"lineNum":"    9","line":""},
{"lineNum":"   10","line":"var log_err_count: usize = 0;"},
{"lineNum":"   11","line":"var cmdline_buffer: [4096]u8 = undefined;"},
{"lineNum":"   12","line":"var fba = std.heap.FixedBufferAllocator.init(&cmdline_buffer);"},
{"lineNum":"   13","line":""},
{"lineNum":"   14","line":"pub fn main() void {","class":"lineCov","hits":"1","order":"157","possible_hits":"1",},
{"lineNum":"   15","line":"    if (builtin.zig_backend == .stage2_wasm or"},
{"lineNum":"   16","line":"        builtin.zig_backend == .stage2_x86_64 or"},
{"lineNum":"   17","line":"        builtin.zig_backend == .stage2_aarch64)"},
{"lineNum":"   18","line":"    {"},
{"lineNum":"   19","line":"        return mainSimple() catch @panic(\"test failure\");"},
{"lineNum":"   20","line":"    }"},
{"lineNum":"   21","line":""},
{"lineNum":"   22","line":"    const args = std.process.argsAlloc(fba.allocator()) catch","class":"lineCov","hits":"1","order":"158","possible_hits":"1",},
{"lineNum":"   23","line":"        @panic(\"unable to parse command line args\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   24","line":""},
{"lineNum":"   25","line":"    var listen = false;","class":"lineCov","hits":"1","order":"332","possible_hits":"1",},
{"lineNum":"   26","line":""},
{"lineNum":"   27","line":"    for (args[1..]) |arg| {","class":"lineCov","hits":"1","order":"333","possible_hits":"1",},
{"lineNum":"   28","line":"        if (std.mem.eql(u8, arg, \"--listen=-\")) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   29","line":"            listen = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   30","line":"        } else {"},
{"lineNum":"   31","line":"            @panic(\"unrecognized command line argument\");","class":"linePartCov","hits":"1","order":"334","possible_hits":"2",},
{"lineNum":"   32","line":"        }"},
{"lineNum":"   33","line":"    }"},
{"lineNum":"   34","line":""},
{"lineNum":"   35","line":"    if (listen) {","class":"lineCov","hits":"1","order":"335","possible_hits":"1",},
{"lineNum":"   36","line":"        return mainServer() catch @panic(\"internal test runner failure\");","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   37","line":"    } else {"},
{"lineNum":"   38","line":"        return mainTerminal();","class":"lineCov","hits":"1","order":"336","possible_hits":"1",},
{"lineNum":"   39","line":"    }"},
{"lineNum":"   40","line":"}"},
{"lineNum":"   41","line":""},
{"lineNum":"   42","line":"fn mainServer() !void {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   43","line":"    var server = try std.zig.Server.init(.{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   44","line":"        .gpa = fba.allocator(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   45","line":"        .in = std.io.getStdIn(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   46","line":"        .out = std.io.getStdOut(),","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   47","line":"        .zig_version = builtin.zig_version_string,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   48","line":"    });"},
{"lineNum":"   49","line":"    defer server.deinit();","class":"lineNoCov","hits":"0","possible_hits":"8",},
{"lineNum":"   50","line":""},
{"lineNum":"   51","line":"    while (true) {"},
{"lineNum":"   52","line":"        const hdr = try server.receiveMessage();","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   53","line":"        switch (hdr.tag) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   54","line":"            .exit => {"},
{"lineNum":"   55","line":"                return std.process.exit(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   56","line":"            },"},
{"lineNum":"   57","line":"            .query_test_metadata => {"},
{"lineNum":"   58","line":"                std.testing.allocator_instance = .{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   59","line":"                defer if (std.testing.allocator_instance.deinit()) {","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   60","line":"                    @panic(\"internal test runner memory leak\");","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   61","line":"                };"},
{"lineNum":"   62","line":""},
{"lineNum":"   63","line":"                var string_bytes: std.ArrayListUnmanaged(u8) = .{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   64","line":"                defer string_bytes.deinit(std.testing.allocator);","class":"lineNoCov","hits":"0","possible_hits":"7",},
{"lineNum":"   65","line":"                try string_bytes.append(std.testing.allocator, 0); // Reserve 0 for null.","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   66","line":""},
{"lineNum":"   67","line":"                const test_fns = builtin.test_functions;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   68","line":"                const names = try std.testing.allocator.alloc(u32, test_fns.len);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   69","line":"                defer std.testing.allocator.free(names);","class":"lineNoCov","hits":"0","possible_hits":"5",},
{"lineNum":"   70","line":"                const async_frame_sizes = try std.testing.allocator.alloc(u32, test_fns.len);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   71","line":"                defer std.testing.allocator.free(async_frame_sizes);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   72","line":"                const expected_panic_msgs = try std.testing.allocator.alloc(u32, test_fns.len);","class":"lineNoCov","hits":"0","possible_hits":"4",},
{"lineNum":"   73","line":"                defer std.testing.allocator.free(expected_panic_msgs);","class":"lineNoCov","hits":"0","possible_hits":"3",},
{"lineNum":"   74","line":""},
{"lineNum":"   75","line":"                for (test_fns, names, async_frame_sizes, expected_panic_msgs) |test_fn, *name, *async_frame_size, *expected_panic_msg| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   76","line":"                    name.* = @intCast(u32, string_bytes.items.len);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   77","line":"                    try string_bytes.ensureUnusedCapacity(std.testing.allocator, test_fn.name.len + 1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   78","line":"                    string_bytes.appendSliceAssumeCapacity(test_fn.name);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   79","line":"                    string_bytes.appendAssumeCapacity(0);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   80","line":""},
{"lineNum":"   81","line":"                    async_frame_size.* = @intCast(u32, test_fn.async_frame_size orelse 0);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   82","line":"                    expected_panic_msg.* = 0;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"   83","line":"                }"},
{"lineNum":"   84","line":""},
{"lineNum":"   85","line":"                try server.serveTestMetadata(.{","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   86","line":"                    .names = names,"},
{"lineNum":"   87","line":"                    .async_frame_sizes = async_frame_sizes,"},
{"lineNum":"   88","line":"                    .expected_panic_msgs = expected_panic_msgs,"},
{"lineNum":"   89","line":"                    .string_bytes = string_bytes.items,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   90","line":"                });"},
{"lineNum":"   91","line":"            },"},
{"lineNum":"   92","line":""},
{"lineNum":"   93","line":"            .run_test => {"},
{"lineNum":"   94","line":"                std.testing.allocator_instance = .{};","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   95","line":"                const index = try server.receiveBody_u32();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   96","line":"                const test_fn = builtin.test_functions[index];","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   97","line":"                if (test_fn.async_frame_size != null)","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   98","line":"                    @panic(\"TODO test runner implement async tests\");","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"   99","line":"                var fail = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  100","line":"                var skip = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  101","line":"                var leak = false;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  102","line":"                test_fn.func() catch |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  103","line":"                    error.SkipZigTest => skip = true,","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  104","line":"                    else => {"},
{"lineNum":"  105","line":"                        fail = true;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  106","line":"                        if (@errorReturnTrace()) |trace| {","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  107","line":"                            std.debug.dumpStackTrace(trace.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  108","line":"                        }"},
{"lineNum":"  109","line":"                    },"},
{"lineNum":"  110","line":"                };"},
{"lineNum":"  111","line":"                leak = std.testing.allocator_instance.deinit();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  112","line":"                try server.serveTestResults(.{","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  113","line":"                    .index = index,"},
{"lineNum":"  114","line":"                    .flags = .{"},
{"lineNum":"  115","line":"                        .fail = fail,"},
{"lineNum":"  116","line":"                        .skip = skip,"},
{"lineNum":"  117","line":"                        .leak = leak,"},
{"lineNum":"  118","line":"                    },"},
{"lineNum":"  119","line":"                });"},
{"lineNum":"  120","line":"            },"},
{"lineNum":"  121","line":""},
{"lineNum":"  122","line":"            else => {"},
{"lineNum":"  123","line":"                std.debug.print(\"unsupported message: {x}\", .{@enumToInt(hdr.tag)});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  124","line":"                std.process.exit(1);","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  125","line":"            },"},
{"lineNum":"  126","line":"        }"},
{"lineNum":"  127","line":"    }"},
{"lineNum":"  128","line":"}"},
{"lineNum":"  129","line":""},
{"lineNum":"  130","line":"fn mainTerminal() void {","class":"lineCov","hits":"1","order":"337","possible_hits":"1",},
{"lineNum":"  131","line":"    const test_fn_list = builtin.test_functions;","class":"lineCov","hits":"1","order":"338","possible_hits":"1",},
{"lineNum":"  132","line":"    var ok_count: usize = 0;","class":"lineCov","hits":"1","order":"339","possible_hits":"1",},
{"lineNum":"  133","line":"    var skip_count: usize = 0;","class":"lineCov","hits":"1","order":"340","possible_hits":"1",},
{"lineNum":"  134","line":"    var fail_count: usize = 0;","class":"lineCov","hits":"1","order":"341","possible_hits":"1",},
{"lineNum":"  135","line":"    var progress = std.Progress{","class":"lineCov","hits":"1","order":"342","possible_hits":"1",},
{"lineNum":"  136","line":"        .dont_print_on_dumb = true,"},
{"lineNum":"  137","line":"    };"},
{"lineNum":"  138","line":"    const root_node = progress.start(\"Test\", test_fn_list.len);","class":"lineCov","hits":"1","order":"343","possible_hits":"1",},
{"lineNum":"  139","line":"    const have_tty = progress.terminal != null and","class":"lineCov","hits":"1","order":"478","possible_hits":"1",},
{"lineNum":"  140","line":"        (progress.supports_ansi_escape_codes or progress.is_windows_terminal);","class":"lineCov","hits":"1","order":"479","possible_hits":"1",},
{"lineNum":"  141","line":""},
{"lineNum":"  142","line":"    var async_frame_buffer: []align(std.Target.stack_align) u8 = undefined;","class":"lineCov","hits":"1","order":"480","possible_hits":"1",},
{"lineNum":"  143","line":"    // TODO this is on the next line (using `undefined` above) because otherwise zig incorrectly"},
{"lineNum":"  144","line":"    // ignores the alignment of the slice."},
{"lineNum":"  145","line":"    async_frame_buffer = &[_]u8{};","class":"lineCov","hits":"1","order":"481","possible_hits":"1",},
{"lineNum":"  146","line":""},
{"lineNum":"  147","line":"    var leaks: usize = 0;","class":"lineCov","hits":"1","order":"482","possible_hits":"1",},
{"lineNum":"  148","line":"    for (test_fn_list, 0..) |test_fn, i| {","class":"lineCov","hits":"1","order":"483","possible_hits":"1",},
{"lineNum":"  149","line":"        std.testing.allocator_instance = .{};","class":"lineCov","hits":"1","order":"484","possible_hits":"1",},
{"lineNum":"  150","line":"        defer {"},
{"lineNum":"  151","line":"            if (std.testing.allocator_instance.deinit()) {","class":"linePartCov","hits":"1","order":"1624","possible_hits":"2",},
{"lineNum":"  152","line":"                leaks += 1;","class":"linePartCov","hits":"1","order":"2075","possible_hits":"3",},
{"lineNum":"  153","line":"            }"},
{"lineNum":"  154","line":"        }"},
{"lineNum":"  155","line":"        std.testing.log_level = .warn;","class":"lineCov","hits":"1","order":"485","possible_hits":"1",},
{"lineNum":"  156","line":""},
{"lineNum":"  157","line":"        var test_node = root_node.start(test_fn.name, 0);","class":"lineCov","hits":"1","order":"486","possible_hits":"1",},
{"lineNum":"  158","line":"        test_node.activate();","class":"lineCov","hits":"1","order":"490","possible_hits":"1",},
{"lineNum":"  159","line":"        progress.refresh();","class":"lineCov","hits":"1","order":"568","possible_hits":"1",},
{"lineNum":"  160","line":"        if (!have_tty) {","class":"lineCov","hits":"1","order":"693","possible_hits":"1",},
{"lineNum":"  161","line":"            std.debug.print(\"{d}/{d} {s}... \", .{ i + 1, test_fn_list.len, test_fn.name });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  162","line":"        }"},
{"lineNum":"  163","line":"        const result = if (test_fn.async_frame_size) |size| switch (std.options.io_mode) {","class":"lineCov","hits":"1","order":"694","possible_hits":"1",},
{"lineNum":"  164","line":"            .evented => blk: {"},
{"lineNum":"  165","line":"                if (async_frame_buffer.len < size) {"},
{"lineNum":"  166","line":"                    std.heap.page_allocator.free(async_frame_buffer);"},
{"lineNum":"  167","line":"                    async_frame_buffer = std.heap.page_allocator.alignedAlloc(u8, std.Target.stack_align, size) catch @panic(\"out of memory\");"},
{"lineNum":"  168","line":"                }"},
{"lineNum":"  169","line":"                const casted_fn = @ptrCast(fn () callconv(.Async) anyerror!void, test_fn.func);"},
{"lineNum":"  170","line":"                break :blk await @asyncCall(async_frame_buffer, {}, casted_fn, .{});"},
{"lineNum":"  171","line":"            },"},
{"lineNum":"  172","line":"            .blocking => {"},
{"lineNum":"  173","line":"                skip_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  174","line":"                test_node.end();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  175","line":"                progress.log(\"SKIP (async test)\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  176","line":"                continue;"},
{"lineNum":"  177","line":"            },"},
{"lineNum":"  178","line":"        } else test_fn.func();","class":"lineCov","hits":"2","order":"695","possible_hits":"2",},
{"lineNum":"  179","line":"        if (result) |_| {","class":"lineCov","hits":"1","order":"1609","possible_hits":"1",},
{"lineNum":"  180","line":"            ok_count += 1;","class":"lineCov","hits":"2","order":"1610","possible_hits":"2",},
{"lineNum":"  181","line":"            test_node.end();","class":"lineCov","hits":"1","order":"1611","possible_hits":"1",},
{"lineNum":"  182","line":"            if (!have_tty) std.debug.print(\"OK\\n\", .{});","class":"linePartCov","hits":"1","order":"1623","possible_hits":"2",},
{"lineNum":"  183","line":"        } else |err| switch (err) {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  184","line":"            error.SkipZigTest => {"},
{"lineNum":"  185","line":"                skip_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  186","line":"                progress.log(\"SKIP\\n\", .{});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  187","line":"                test_node.end();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  188","line":"            },"},
{"lineNum":"  189","line":"            else => {"},
{"lineNum":"  190","line":"                fail_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"2",},
{"lineNum":"  191","line":"                progress.log(\"FAIL ({s})\\n\", .{@errorName(err)});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  192","line":"                if (@errorReturnTrace()) |trace| {","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  193","line":"                    std.debug.dumpStackTrace(trace.*);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  194","line":"                }"},
{"lineNum":"  195","line":"                test_node.end();","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  196","line":"            },"},
{"lineNum":"  197","line":"        }"},
{"lineNum":"  198","line":"    }"},
{"lineNum":"  199","line":"    root_node.end();","class":"lineCov","hits":"1","order":"2076","possible_hits":"1",},
{"lineNum":"  200","line":"    if (ok_count == test_fn_list.len) {","class":"lineCov","hits":"1","order":"2081","possible_hits":"1",},
{"lineNum":"  201","line":"        std.debug.print(\"All {d} tests passed.\\n\", .{ok_count});","class":"lineCov","hits":"1","order":"2082","possible_hits":"1",},
{"lineNum":"  202","line":"    } else {"},
{"lineNum":"  203","line":"        std.debug.print(\"{d} passed; {d} skipped; {d} failed.\\n\", .{ ok_count, skip_count, fail_count });","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  204","line":"    }"},
{"lineNum":"  205","line":"    if (log_err_count != 0) {","class":"lineCov","hits":"1","order":"2091","possible_hits":"1",},
{"lineNum":"  206","line":"        std.debug.print(\"{d} errors were logged.\\n\", .{log_err_count});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  207","line":"    }"},
{"lineNum":"  208","line":"    if (leaks != 0) {","class":"lineCov","hits":"1","order":"2092","possible_hits":"1",},
{"lineNum":"  209","line":"        std.debug.print(\"{d} tests leaked memory.\\n\", .{leaks});","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  210","line":"    }"},
{"lineNum":"  211","line":"    if (leaks != 0 or log_err_count != 0 or fail_count != 0) {","class":"lineCov","hits":"1","order":"2093","possible_hits":"1",},
{"lineNum":"  212","line":"        std.process.exit(1);","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  213","line":"    }"},
{"lineNum":"  214","line":"}"},
{"lineNum":"  215","line":""},
{"lineNum":"  216","line":"pub fn log("},
{"lineNum":"  217","line":"    comptime message_level: std.log.Level,"},
{"lineNum":"  218","line":"    comptime scope: @Type(.EnumLiteral),"},
{"lineNum":"  219","line":"    comptime format: []const u8,"},
{"lineNum":"  220","line":"    args: anytype,"},
{"lineNum":"  221","line":") void {","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  222","line":"    if (@enumToInt(message_level) <= @enumToInt(std.log.Level.err)) {"},
{"lineNum":"  223","line":"        log_err_count += 1;","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  224","line":"    }"},
{"lineNum":"  225","line":"    if (@enumToInt(message_level) <= @enumToInt(std.testing.log_level)) {"},
{"lineNum":"  226","line":"        std.debug.print(","class":"lineNoCov","hits":"0","possible_hits":"6",},
{"lineNum":"  227","line":"            \"[\" ++ @tagName(scope) ++ \"] (\" ++ @tagName(message_level) ++ \"): \" ++ format ++ \"\\n\","},
{"lineNum":"  228","line":"            args,"},
{"lineNum":"  229","line":"        );"},
{"lineNum":"  230","line":"    }"},
{"lineNum":"  231","line":"}"},
{"lineNum":"  232","line":""},
{"lineNum":"  233","line":"/// Simpler main(), exercising fewer language features, so that"},
{"lineNum":"  234","line":"/// work-in-progress backends can handle it."},
{"lineNum":"  235","line":"pub fn mainSimple() anyerror!void {"},
{"lineNum":"  236","line":"    //const stderr = std.io.getStdErr();"},
{"lineNum":"  237","line":"    for (builtin.test_functions) |test_fn| {"},
{"lineNum":"  238","line":"        test_fn.func() catch |err| {"},
{"lineNum":"  239","line":"            if (err != error.SkipZigTest) {"},
{"lineNum":"  240","line":"                //stderr.writeAll(test_fn.name) catch {};"},
{"lineNum":"  241","line":"                //stderr.writeAll(\"\\n\") catch {};"},
{"lineNum":"  242","line":"                return err;"},
{"lineNum":"  243","line":"            }"},
{"lineNum":"  244","line":"        };"},
{"lineNum":"  245","line":"    }"},
{"lineNum":"  246","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 113, "covered" : 40,};
var merged_data = [];
