var data = {lines:[
{"lineNum":"    1","line":"const std = @import(\"std\");"},
{"lineNum":"    2","line":"const Span = @import(\"span.zig\").Span;"},
{"lineNum":"    3","line":"const String = @import(\"zig-string/zig-string.zig\").String;"},
{"lineNum":"    4","line":""},
{"lineNum":"    5","line":"pub const TokenKind = enum(u32) {"},
{"lineNum":"    6","line":"    // Literals"},
{"lineNum":"    7","line":"    BIN_INTEGER,"},
{"lineNum":"    8","line":"    CHAR,"},
{"lineNum":"    9","line":"    DECIMAL_INTEGER,"},
{"lineNum":"   10","line":"    HEX_INTEGER,"},
{"lineNum":"   11","line":"    IDENTIFIER,"},
{"lineNum":"   12","line":"    OCT_INTEGER,"},
{"lineNum":"   13","line":"    REAL,"},
{"lineNum":"   14","line":"    STRING,"},
{"lineNum":"   15","line":""},
{"lineNum":"   16","line":"    // Keywords"},
{"lineNum":"   17","line":"    AND,"},
{"lineNum":"   18","line":"    BREAK,"},
{"lineNum":"   19","line":"    CASE,"},
{"lineNum":"   20","line":"    CATCH,"},
{"lineNum":"   21","line":"    COND,"},
{"lineNum":"   22","line":"    CONST,"},
{"lineNum":"   23","line":"    CONTINUE,"},
{"lineNum":"   24","line":"    DEFER,"},
{"lineNum":"   25","line":"    ELSE,"},
{"lineNum":"   26","line":"    ERRDEFER,"},
{"lineNum":"   27","line":"    FN,"},
{"lineNum":"   28","line":"    FOR,"},
{"lineNum":"   29","line":"    IF,"},
{"lineNum":"   30","line":"    IN,"},
{"lineNum":"   31","line":"    LET,"},
{"lineNum":"   32","line":"    MUT,"},
{"lineNum":"   33","line":"    NOT,"},
{"lineNum":"   34","line":"    OR,"},
{"lineNum":"   35","line":"    ORELSE,"},
{"lineNum":"   36","line":"    RETURN,"},
{"lineNum":"   37","line":"    THROW,"},
{"lineNum":"   38","line":"    TRY,"},
{"lineNum":"   39","line":"    UNREACHABLE,"},
{"lineNum":"   40","line":"    WHERE,"},
{"lineNum":"   41","line":"    WHILE,"},
{"lineNum":"   42","line":""},
{"lineNum":"   43","line":"    // INVALIDATE,  // TODO: Reconsider"},
{"lineNum":"   44","line":"    // INVALIDATES,"},
{"lineNum":"   45","line":"    // VALIDATE,"},
{"lineNum":"   46","line":""},
{"lineNum":"   47","line":"    // Equals"},
{"lineNum":"   48","line":"    D_EQUALS,"},
{"lineNum":"   49","line":"    EQUALS,"},
{"lineNum":"   50","line":"    MINUS_EQUALS,"},
{"lineNum":"   51","line":"    NOT_EQUALS,"},
{"lineNum":"   52","line":"    PERCENT_EQUALS,"},
{"lineNum":"   53","line":"    PLUS_EQUALS,"},
{"lineNum":"   54","line":"    SLASH_EQUALS,"},
{"lineNum":"   55","line":"    STAR_EQUALS,"},
{"lineNum":"   56","line":"    D_STAR_EQUALS,"},
{"lineNum":"   57","line":""},
{"lineNum":"   58","line":"    // Math"},
{"lineNum":"   59","line":"    BAR,"},
{"lineNum":"   60","line":"    CARET,"},
{"lineNum":"   61","line":"    D_BAR,"},
{"lineNum":"   62","line":"    D_PLUS,"},
{"lineNum":"   63","line":"    D_MINUS,"},
{"lineNum":"   64","line":"    D_STAR,"},
{"lineNum":"   65","line":"    RIGHT_FAT_ARROW,"},
{"lineNum":"   66","line":"    GTR,"},
{"lineNum":"   67","line":"    GTE,"},
{"lineNum":"   68","line":"    LSR,"},
{"lineNum":"   69","line":"    LTE,"},
{"lineNum":"   70","line":"    MINUS,"},
{"lineNum":"   71","line":"    PERCENT,"},
{"lineNum":"   72","line":"    PLUS,"},
{"lineNum":"   73","line":"    LEFT_SKINNY_ARROW,"},
{"lineNum":"   74","line":"    RIGHT_SKINNY_ARROW,"},
{"lineNum":"   75","line":"    SLASH,"},
{"lineNum":"   76","line":"    BACK_SLASH,"},
{"lineNum":"   77","line":"    STAR,"},
{"lineNum":"   78","line":""},
{"lineNum":"   79","line":"    // Punctuation"},
{"lineNum":"   80","line":"    AMPERSAND,"},
{"lineNum":"   81","line":"    COLON,"},
{"lineNum":"   82","line":"    COMMA,"},
{"lineNum":"   83","line":"    D_PERIOD,"},
{"lineNum":"   84","line":"    E_MARK,"},
{"lineNum":"   85","line":"    PERIOD,"},
{"lineNum":"   86","line":"    PERIOD_Q_MARK,"},
{"lineNum":"   87","line":"    Q_MARK,"},
{"lineNum":"   88","line":"    SEMICOLON,"},
{"lineNum":"   89","line":""},
{"lineNum":"   90","line":"    // Open/Close"},
{"lineNum":"   91","line":"    L_BRACE,"},
{"lineNum":"   92","line":"    L_PAREN,"},
{"lineNum":"   93","line":"    L_SQUARE,"},
{"lineNum":"   94","line":"    R_BRACE,"},
{"lineNum":"   95","line":"    R_PAREN,"},
{"lineNum":"   96","line":"    R_SQUARE,"},
{"lineNum":"   97","line":"    INDENT,"},
{"lineNum":"   98","line":"    DEDENT,"},
{"lineNum":"   99","line":""},
{"lineNum":"  100","line":"    // Function stuff"},
{"lineNum":"  101","line":"    DELTA,"},
{"lineNum":"  102","line":"    DIAMOND,"},
{"lineNum":"  103","line":"    PERIOD_GTR,"},
{"lineNum":"  104","line":""},
{"lineNum":"  105","line":"    // Whitespace"},
{"lineNum":"  106","line":"    NEWLINE,"},
{"lineNum":"  107","line":"    EOF,"},
{"lineNum":"  108","line":""},
{"lineNum":"  109","line":"    // HACK: Used to count how many constructors are in the enum"},
{"lineNum":"  110","line":"    len,"},
{"lineNum":"  111","line":"};"},
{"lineNum":"  112","line":""},
{"lineNum":"  113","line":"pub const binaryOperators = [_]TokenKind{"},
{"lineNum":"  114","line":"    .R_PAREN,"},
{"lineNum":"  115","line":"    .EQUALS,"},
{"lineNum":"  116","line":"    .PLUS_EQUALS,"},
{"lineNum":"  117","line":"    .MINUS_EQUALS,"},
{"lineNum":"  118","line":"    .STAR_EQUALS,"},
{"lineNum":"  119","line":"    .SLASH_EQUALS,"},
{"lineNum":"  120","line":"    .PERCENT_EQUALS,"},
{"lineNum":"  121","line":"    .D_STAR_EQUALS,"},
{"lineNum":"  122","line":"    .BAR,"},
{"lineNum":"  123","line":"    .COMMA,"},
{"lineNum":"  124","line":"    .COLON,"},
{"lineNum":"  125","line":"    .RIGHT_SKINNY_ARROW,"},
{"lineNum":"  126","line":"    .AND,"},
{"lineNum":"  127","line":"    .OR,"},
{"lineNum":"  128","line":"    .NOT_EQUALS,"},
{"lineNum":"  129","line":"    .D_EQUALS,"},
{"lineNum":"  130","line":"    .GTR,"},
{"lineNum":"  131","line":"    .GTE,"},
{"lineNum":"  132","line":"    .LSR,"},
{"lineNum":"  133","line":"    .LTE,"},
{"lineNum":"  134","line":"    .ORELSE,"},
{"lineNum":"  135","line":"    .CATCH,"},
{"lineNum":"  136","line":"    .PLUS,"},
{"lineNum":"  137","line":"    .MINUS,"},
{"lineNum":"  138","line":"    .E_MARK,"},
{"lineNum":"  139","line":"    .STAR,"},
{"lineNum":"  140","line":"    .SLASH,"},
{"lineNum":"  141","line":"    .PERCENT,"},
{"lineNum":"  142","line":"    .DIAMOND,"},
{"lineNum":"  143","line":"    .D_PLUS,"},
{"lineNum":"  144","line":"    .D_MINUS,"},
{"lineNum":"  145","line":"    .D_BAR,"},
{"lineNum":"  146","line":"    .D_STAR,"},
{"lineNum":"  147","line":"    .PERIOD_GTR,"},
{"lineNum":"  148","line":"    .PERIOD,"},
{"lineNum":"  149","line":"    .LEFT_SKINNY_ARROW,"},
{"lineNum":"  150","line":"    .WHERE,"},
{"lineNum":"  151","line":"    .BACK_SLASH,"},
{"lineNum":"  152","line":"};"},
{"lineNum":"  153","line":""},
{"lineNum":"  154","line":"pub const Token = struct {"},
{"lineNum":"  155","line":"    // What kind of token this is"},
{"lineNum":"  156","line":"    kind: TokenKind,"},
{"lineNum":"  157","line":"    // Non-owning slice into the contents of the source file the text data for this token comes from"},
{"lineNum":"  158","line":"    data: []const u8,"},
{"lineNum":"  159","line":"    span: Span,"},
{"lineNum":"  160","line":""},
{"lineNum":"  161","line":"    pub fn create(data: []const u8, kind: ?TokenKind, line: i64, col: i64) Token {","class":"lineCov","hits":"1","order":"748","possible_hits":"1",},
{"lineNum":"  162","line":"        return .{ .data = data, .kind = kind orelse kindFromString(data), .span = Span{ .line = line, .col = col } };","class":"lineCov","hits":"1","order":"749","possible_hits":"1",},
{"lineNum":"  163","line":"    }"},
{"lineNum":"  164","line":""},
{"lineNum":"  165","line":"    pub fn repr(self: *Token) []const u8 {"},
{"lineNum":"  166","line":"        return reprFromTokenKind(self.kind) orelse self.data;"},
{"lineNum":"  167","line":"    }"},
{"lineNum":"  168","line":""},
{"lineNum":"  169","line":"    pub fn pprint(self: *Token) void {"},
{"lineNum":"  170","line":"        std.debug.print(\"Token {{line: {:03}, kind: {s}, data: {s}}}\\n\", .{ self.span.line, self.repr(), self.data });"},
{"lineNum":"  171","line":"    }"},
{"lineNum":"  172","line":""},
{"lineNum":"  173","line":"    pub fn expectToken(self: *Token, kind: TokenKind, data: []const u8, col: i64, line: i64) !void {","class":"lineCov","hits":"1","order":"1841","possible_hits":"1",},
{"lineNum":"  174","line":"        try std.testing.expectEqual(kind, self.kind);","class":"lineCov","hits":"1","order":"1842","possible_hits":"1",},
{"lineNum":"  175","line":"        try std.testing.expectEqualStrings(data, self.data);","class":"lineCov","hits":"1","order":"1843","possible_hits":"1",},
{"lineNum":"  176","line":"        try std.testing.expectEqual(col, self.span.col);","class":"lineCov","hits":"1","order":"1844","possible_hits":"1",},
{"lineNum":"  177","line":"        try std.testing.expectEqual(line, self.span.line);","class":"lineCov","hits":"1","order":"1845","possible_hits":"1",},
{"lineNum":"  178","line":"    }"},
{"lineNum":"  179","line":""},
{"lineNum":"  180","line":"    pub fn serialize(self: Token, out: *String) !void {","class":"lineCov","hits":"1","order":"1516","possible_hits":"1",},
{"lineNum":"  181","line":"        try out.insert(\"Token{data: \'\", out.len());","class":"lineCov","hits":"1","order":"1517","possible_hits":"1",},
{"lineNum":"  182","line":"        try out.insert(self.data, out.len());","class":"lineCov","hits":"1","order":"1523","possible_hits":"1",},
{"lineNum":"  183","line":"        try out.insert(\"\'}\", out.len());","class":"lineCov","hits":"1","order":"1545","possible_hits":"1",},
{"lineNum":"  184","line":"    }"},
{"lineNum":"  185","line":"};"},
{"lineNum":"  186","line":""},
{"lineNum":"  187","line":"pub fn kindFromString(data: []const u8) TokenKind {","class":"lineCov","hits":"1","order":"1053","possible_hits":"1",},
{"lineNum":"  188","line":"    var ix: usize = 0;","class":"lineCov","hits":"1","order":"1054","possible_hits":"1",},
{"lineNum":"  189","line":"    const num_ctors = @enumToInt(TokenKind.len);","class":"lineCov","hits":"1","order":"1055","possible_hits":"1",},
{"lineNum":"  190","line":""},
{"lineNum":"  191","line":"    while (ix < num_ctors) : (ix += 1) {","class":"lineCov","hits":"3","order":"1056","possible_hits":"3",},
{"lineNum":"  192","line":"        const kind: TokenKind = @intToEnum(TokenKind, ix);","class":"lineCov","hits":"2","order":"1057","possible_hits":"2",},
{"lineNum":"  193","line":"        const reprKind: ?[]const u8 = reprFromTokenKind(kind);","class":"lineCov","hits":"1","order":"1058","possible_hits":"1",},
{"lineNum":"  194","line":"        if (reprKind) |repr| {","class":"lineCov","hits":"1","order":"1061","possible_hits":"1",},
{"lineNum":"  195","line":"            if (strEquals(data, repr)) {","class":"lineCov","hits":"1","order":"1062","possible_hits":"1",},
{"lineNum":"  196","line":"                // Found the kind!"},
{"lineNum":"  197","line":"                return kind;","class":"lineNoCov","hits":"0","possible_hits":"1",},
{"lineNum":"  198","line":"            }"},
{"lineNum":"  199","line":"        }"},
{"lineNum":"  200","line":"    }"},
{"lineNum":"  201","line":"    return TokenKind.IDENTIFIER;","class":"lineCov","hits":"1","order":"1073","possible_hits":"1",},
{"lineNum":"  202","line":"}"},
{"lineNum":"  203","line":""},
{"lineNum":"  204","line":"pub fn reprFromTokenKind(kind: TokenKind) ?[]const u8 {","class":"lineCov","hits":"1","order":"1059","possible_hits":"1",},
{"lineNum":"  205","line":"    return switch (kind) {","class":"lineCov","hits":"1","order":"1060","possible_hits":"1",},
{"lineNum":"  206","line":"        .BIN_INTEGER => \"<binary integer>\","},
{"lineNum":"  207","line":"        .CHAR => \"<character literal>\","},
{"lineNum":"  208","line":"        .DECIMAL_INTEGER => \"<decimal integer>\","},
{"lineNum":"  209","line":"        .HEX_INTEGER => \"<hexadecimal integer>\","},
{"lineNum":"  210","line":"        .IDENTIFIER => \"<an identifier>\","},
{"lineNum":"  211","line":"        .OCT_INTEGER => \"<octal integer>\","},
{"lineNum":"  212","line":"        .REAL => \"<real number>\","},
{"lineNum":"  213","line":"        .STRING => \"<string literal>\","},
{"lineNum":"  214","line":"        .NEWLINE => \"<new-line>\","},
{"lineNum":"  215","line":"        .INDENT => \"<indent>\","},
{"lineNum":"  216","line":"        .DEDENT => \"<dedent>\","},
{"lineNum":"  217","line":"        .len => null,"},
{"lineNum":"  218","line":""},
{"lineNum":"  219","line":"        .AND => \"and\","},
{"lineNum":"  220","line":"        .BREAK => \"break\","},
{"lineNum":"  221","line":"        .CASE => \"case\","},
{"lineNum":"  222","line":"        .CATCH => \"catch\","},
{"lineNum":"  223","line":"        .COND => \"cond\","},
{"lineNum":"  224","line":"        .CONST => \"const\","},
{"lineNum":"  225","line":"        .CONTINUE => \"continue\","},
{"lineNum":"  226","line":"        .DEFER => \"defer\","},
{"lineNum":"  227","line":"        .ELSE => \"else\","},
{"lineNum":"  228","line":"        .ERRDEFER => \"errdefer\","},
{"lineNum":"  229","line":"        .FN => \"fn\","},
{"lineNum":"  230","line":"        .FOR => \"for\","},
{"lineNum":"  231","line":"        .IF => \"if\","},
{"lineNum":"  232","line":"        .IN => \"in\","},
{"lineNum":"  233","line":"        .LET => \"let\","},
{"lineNum":"  234","line":"        .MUT => \"mut\","},
{"lineNum":"  235","line":"        .NOT => \"not\","},
{"lineNum":"  236","line":"        .OR => \"or\","},
{"lineNum":"  237","line":"        .ORELSE => \"orelse\","},
{"lineNum":"  238","line":"        .RETURN => \"return\","},
{"lineNum":"  239","line":"        .THROW => \"throw\","},
{"lineNum":"  240","line":"        .TRY => \"try\","},
{"lineNum":"  241","line":"        .UNREACHABLE => \"unreachable\","},
{"lineNum":"  242","line":"        .WHERE => \"where\","},
{"lineNum":"  243","line":"        .WHILE => \"while\","},
{"lineNum":"  244","line":""},
{"lineNum":"  245","line":"        // Equals"},
{"lineNum":"  246","line":"        .D_EQUALS => \"==\","},
{"lineNum":"  247","line":"        .EQUALS => \"=\","},
{"lineNum":"  248","line":"        .MINUS_EQUALS => \"-=\","},
{"lineNum":"  249","line":"        .NOT_EQUALS => \"!=\","},
{"lineNum":"  250","line":"        .PERCENT_EQUALS => \"%=\","},
{"lineNum":"  251","line":"        .PLUS_EQUALS => \"+=\","},
{"lineNum":"  252","line":"        .SLASH_EQUALS => \"/=\","},
{"lineNum":"  253","line":"        .STAR_EQUALS => \"*=\","},
{"lineNum":"  254","line":"        .D_STAR_EQUALS => \"**=\","},
{"lineNum":"  255","line":""},
{"lineNum":"  256","line":"        // Math"},
{"lineNum":"  257","line":"        .LEFT_SKINNY_ARROW => \"<-\","},
{"lineNum":"  258","line":"        .BAR => \"|\","},
{"lineNum":"  259","line":"        .CARET => \"^\","},
{"lineNum":"  260","line":"        .D_BAR => \"||\","},
{"lineNum":"  261","line":"        .D_PLUS => \"++\","},
{"lineNum":"  262","line":"        .D_MINUS => \"--\","},
{"lineNum":"  263","line":"        .D_STAR => \"**\","},
{"lineNum":"  264","line":"        .RIGHT_FAT_ARROW => \"=>\","},
{"lineNum":"  265","line":"        .GTR => \">\","},
{"lineNum":"  266","line":"        .GTE => \">=\","},
{"lineNum":"  267","line":"        .LSR => \"<\","},
{"lineNum":"  268","line":"        .LTE => \"<=\","},
{"lineNum":"  269","line":"        .MINUS => \"-\","},
{"lineNum":"  270","line":"        .PERCENT => \"%\","},
{"lineNum":"  271","line":"        .PLUS => \"+\","},
{"lineNum":"  272","line":"        .RIGHT_SKINNY_ARROW => \"->\","},
{"lineNum":"  273","line":"        .SLASH => \"/\","},
{"lineNum":"  274","line":"        .BACK_SLASH => \"\\\\\","},
{"lineNum":"  275","line":"        .STAR => \"*\","},
{"lineNum":"  276","line":""},
{"lineNum":"  277","line":"        // Punctuation"},
{"lineNum":"  278","line":"        .AMPERSAND => \"&\","},
{"lineNum":"  279","line":"        .COLON => \":\","},
{"lineNum":"  280","line":"        .COMMA => \",\","},
{"lineNum":"  281","line":"        .D_PERIOD => \"..\","},
{"lineNum":"  282","line":"        .E_MARK => \"!\","},
{"lineNum":"  283","line":"        .PERIOD => \".\","},
{"lineNum":"  284","line":"        .PERIOD_Q_MARK => \".?\","},
{"lineNum":"  285","line":"        .Q_MARK => \"?\","},
{"lineNum":"  286","line":"        .SEMICOLON => \";\","},
{"lineNum":"  287","line":""},
{"lineNum":"  288","line":"        // Open/Close"},
{"lineNum":"  289","line":"        .L_BRACE => \"{\","},
{"lineNum":"  290","line":"        .L_PAREN => \"(\","},
{"lineNum":"  291","line":"        .L_SQUARE => \"[\","},
{"lineNum":"  292","line":"        .R_BRACE => \"}\","},
{"lineNum":"  293","line":"        .R_PAREN => \")\","},
{"lineNum":"  294","line":"        .R_SQUARE => \"]\","},
{"lineNum":"  295","line":""},
{"lineNum":"  296","line":"        // Functional"},
{"lineNum":"  297","line":"        .DELTA => \"|>\","},
{"lineNum":"  298","line":"        .DIAMOND => \"<>\","},
{"lineNum":"  299","line":"        .PERIOD_GTR => \".>\","},
{"lineNum":"  300","line":""},
{"lineNum":"  301","line":"        // EOF"},
{"lineNum":"  302","line":"        .EOF => \"(EOF)\","},
{"lineNum":"  303","line":"    };"},
{"lineNum":"  304","line":"}"},
{"lineNum":"  305","line":""},
{"lineNum":"  306","line":"fn strEquals(a: []const u8, b: []const u8) bool {","class":"lineCov","hits":"1","order":"1063","possible_hits":"1",},
{"lineNum":"  307","line":"    if (a.len != b.len) {","class":"lineCov","hits":"1","order":"1064","possible_hits":"1",},
{"lineNum":"  308","line":"        return false;","class":"lineCov","hits":"1","order":"1065","possible_hits":"1",},
{"lineNum":"  309","line":"    } else {"},
{"lineNum":"  310","line":"        var i: usize = 0;","class":"lineCov","hits":"1","order":"1066","possible_hits":"1",},
{"lineNum":"  311","line":"        while (i < a.len) : (i += 1) {","class":"lineCov","hits":"3","order":"1067","possible_hits":"3",},
{"lineNum":"  312","line":"            if (a[i] != b[i]) {","class":"lineCov","hits":"2","order":"1068","possible_hits":"2",},
{"lineNum":"  313","line":"                return false;","class":"lineCov","hits":"1","order":"1069","possible_hits":"1",},
{"lineNum":"  314","line":"            }"},
{"lineNum":"  315","line":"        }"},
{"lineNum":"  316","line":"        return true;","class":"lineCov","hits":"1","order":"1070","possible_hits":"1",},
{"lineNum":"  317","line":"    }"},
{"lineNum":"  318","line":"}"},
]};
var percent_low = 25;var percent_high = 75;
var header = { "command" : "test", "date" : "2023-04-18 20:41:50", "instrumented" : 31, "covered" : 30,};
var merged_data = [];
