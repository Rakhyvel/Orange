name: Integration & negative tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-2019]
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout main
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Checkout zig-string
      uses: actions/checkout@v4
      with:
        repository: 'JakubSzark/zig-string'
        path: src/zig-string
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Set up Zig
      uses: korandoru/setup-zig@v1
      with:
        zig-version: 0.13.0
    
    - name: Get Modified Files
      if: runner.os == 'Linux'
      id: modified_files
      run: |
        BASE_BRANCH=${{ github.event.pull_request.base.ref }}
        TEST_FILES=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep '^test/' || echo "")
        SRC_FILES=$(git diff --name-only --diff-filter=AM origin/main...HEAD | grep '^src/' || echo "")
        echo "test_files=$TEST_FILES" >> $GITHUB_ENV
        echo "src_files=$SRC_FILES" >> $GITHUB_ENV

    - name: Build kcov
      if: runner.os == 'Linux'
      run: |
        sudo apt update
        sudo apt install libcurl4-openssl-dev
        sudo apt install libelf-dev
        sudo apt install libdw-dev
        git clone https://github.com/SimonKagstrom/kcov.git
        cd kcov
        mkdir build && cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        kcov --version
    
    - name: Build project (Linux)
      if: runner.os == 'Linux'
      run: |
        export ORNG_STD_PATH="$GITHUB_WORKSPACE/std"
        python tests/test.py all
        ls -lah kcov-out/

    - name: Ensure Modified Lines in src/ Are Covered
      if: runner.os == 'Linux'
      run: |
        if [ -z "$src_files" ]; then
          echo "No modified source files, skipping coverage check."
          exit 0
        fi

        COVERED_LINES=$(grep -rohE 'src/[^:]+:[0-9]+' coverage/ | cut -d':' -f2 | sort -u)
        UNCOVERED_LINES=()

        for src_file in $src_files; do
          MODIFIED_LINES=$(git diff -U0 origin/${{ github.event.pull_request.base.ref }} -- $src_file | grep -E '^\+' | grep -oE '[0-9]+')
          for line in $MODIFIED_LINES; do
            if ! echo "$COVERED_LINES" | grep -q "^$line$"; then
              UNCOVERED_LINES+=("$src_file:$line")
            fi
          done
        done

        if [ ${#UNCOVERED_LINES[@]} -ne 0 ]; then
          echo "ERROR: The following modified lines are not covered by tests:"
          printf '%s\n' "${UNCOVERED_LINES[@]}"
          exit 1
        fi

    - name: Build project (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        export ORNG_STD_PATH="$GITHUB_WORKSPACE/std"
        python tests/test.py all --no-coverage

    # Upload artifacts if build fails
    - uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: zig-cache/log
