// 290
trait My_Trait {
    virtual fn b(&self, x: Int) -> Int

    virtual fn c(&mut self, x: Int) -> ()
}

struct My_Type { x: Int, y: Int }

impl My_Trait for My_Type {
    virtual fn b(&self, x: Int) -> Int { self.x + self.y * x }

    virtual fn c(&mut self, x: Int) -> () { self.x *= x }
}

fn main() -> Int {
    let mut my_val = My_Type(100, 45)
    let my_dyn: &mut dyn My_Trait = &my_val
    my_dyn.>c(2)
    my_dyn.>b(2)
}