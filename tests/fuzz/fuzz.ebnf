# https://github.com/proebsting/rdgen
# used just to check for ambiguity
# python3.10 ../rdgen/main.py create --input orng.ebnf --output parser.py && grep "AMBIGUOUS" parser.py

program: declaration {"newline" declaration} "eof".

declaration: "let" ["mut"] ident (":" arrowExpr ["=" expr] | "=" expr).

lambda: "\\" [param {"," param}] "->" arrowExpr ["where" arrowExpr] blockExpr.
param: ["mut"] ident ":" boolExpr ["where" boolExpr] ["=" boolExpr]. # must not be productExpr, or ambiguous with ,
                                                    # essentially an annotExpr that gaurantees pattern is an ident, type is given, and an optional `mut` modifier

statement: declaration
         | "defer" statement
         | "errdefer" statement
         | expr
         .

expr: caseMatchExpr
    | lambda
    | sumExpr
    .

sumExpr: productExpr {"|" annotExpr}. # (lhs of | must be ident or annotExpr with proper pattern left of the :)

productExpr: annotExpr {"," annotExpr}.

annotExpr: assignExpr [":" arrowExpr ["where" arrowExpr] ["=" arrowExpr]]. # (lhs of : must be ident or other TBD patterns)

assignExpr: arrowExpr [("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "<-") assignExpr].

arrowExpr: boolExpr {"->" boolExpr}.

boolExpr: conditionalExpr {("and" | "or") conditionalExpr}.

conditionalExpr: deltaExpr {("==" | "!=" | "<" | "<=" | ">" | ">=") deltaExpr}.

deltaExpr: coalesceExpr {">>" coalesceExpr}. # (rhs must be a call expr)

coalesceExpr: intExpr {("orelse" | "catch") intExpr}.

intExpr: termExpr {("+" | "-" | "!") termExpr}.

termExpr: prefixExpr {("*" | "/" | "%" | "<>" | "++" | "--" | "||") prefixExpr}.

prefixExpr: "!" hyperExpr                           # inferred error union
          | "not" hyperExpr                         # boolean not
          | "-" hyperExpr                           # negation
          | "&" ["mut"] prefixExpr                  # address-of
          | "[" ["mut" | expr | "*"] "]" prefixExpr # slice-of/tuple-of/multi-pointer
          | "?" hyperExpr                           # optional
          | hyperExpr
          .

hyperExpr: postfixExpr {(".>" | "**") postfixExpr}.

postfixExpr: factor {parens | ("[" ((".."[expr]) | (expr[".." [expr]])) "]") | ("." ident) | (".?") | (".!") | ("^")}.

factor: ident
      | "true"
      | "false"
      | int
      | hex
      | octal
      | bin
      | float
      | char
      | string
      | blockExpr
      | ifExpr
      | whileExpr
      | forExpr
      | "unreachable"
      | "." ident
      | parens
      .

indentBlockExpr: indent [statement {"newline" statement }] [("throw" expr "newline") | ("return" [expr] "newline") | ("continue" "newline") | ("break" "newline")] dedent.
braceBlockExpr: "{" {statement ";"} [("throw" expr) | ("return" [expr]) | ("continue") | ("break")] "}".
blockExpr: indentBlockExpr | braceBlockExpr.

ifExpr: "if" [declaration ";"] expr blockExpr ["else" blockExpr].

whileExpr: "while" [declaration ";"] expr [";" statement ] blockExpr ["else" blockExpr].

forExpr: "for" ["mut"] ident "in" expr blockExpr ["else" blockExpr].

barClause: annotExpr ["=>" annotExpr]. # for barClauses in match statements, if the lhs of has a pattern, => must be present
barElse: "else" "=>" annotExpr.
barListMiddle: barClause ["|" (barElse | barListMiddle)].
barList: "|" barListMiddle.

caseExpr: [declaration ";"] barList.
matchExpr: [declaration ";"] productExpr barList.
caseMatchExpr: "case" caseExpr
             | "match" matchExpr
             .

parens: "(" [expr] ")". # ABSOLUTELY needs to be `"(" expr ")"` so that you can put exprs in parens