# https://github.com/proebsting/rdgen
# used just to check for ambiguity
# python3.11 src/rdgen/main.py create --input docs/orng.ebnf --output parser.py && grep "AMBIGUOUS" parser.py

program: top_level_declaration "eof".

top_level_declaration: "fn main() -> Int" block_expr.

let_declaration: "let" let_pattern_atom (":" arrow_expr ["=" expr] | "=" expr).
let_pattern_product: let_pattern_atom {"," let_pattern_atom}.
let_pattern_atom: ["mut" | "const"] ident
                | "(" let_pattern_product ")"
                .

statement: let_declaration
         | "defer" (expr | let_declaration)
         | "errdefer" (expr | let_declaration)
         | expr
         .

expr: sum_expr.

sum_expr: product_expr {"|" annotation_expr}. # (lhs of | must be ident or annotation_expr with proper pattern left of the :)

product_expr: annotation_expr {"," annotation_expr}.

annotation_expr: assignment_expr [":" arrow_expr ["where" arrow_expr] ["=" expr]]. # (lhs of : must be ident or other TBD patterns)

assignment_expr: arrow_expr [("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "<-") assignment_expr].

arrow_expr: bool_expr {"->" bool_expr}.

bool_expr: comparison_expr {("and" | "or") comparison_expr}.

comparison_expr: delta_expr {("==" | "!=" | "<" | "<=" | ">" | ">=") delta_expr}.

delta_expr: coalesce_expr. # (rhs must be a call expr)

coalesce_expr: int_expr {("orelse" | "catch") int_expr}.

int_expr: term_expr {("+" | "-" | "!") term_expr}.

term_expr: prefix_expr {("*" | "/" | "%"| "||") prefix_expr}.

prefix_expr: "not" hyper_expr                         # boolean not
          | "-" hyper_expr                           # negation
          | "&" ["mut"] prefix_expr                  # address-of
          | "[" ["mut" | expr | "*"] "]" prefix_expr # slice-of/tuple-of/multi-pointer
          | "?" hyper_expr                           # optional
          | hyper_expr
          .

hyper_expr: postfix_expr {("**") postfix_expr}.

postfix_expr: control_flow {parens | ("[" ((".."[expr]) | (expr[".." [expr]])) "]") | ("." ident) | ("^")}.

control_flow: if_expr
            | while_expr
            | match_expr
            | factor
            .

factor: ident
      | "true"
      | "false"
      | int
      | hex
      | oct
      | bin
      | float
      | char
      | string
      | block_expr
      | fn_declaration
      | "unreachable"
      | "." ident
      | parens
      .

block_expr: "{" { statement "newline" } [("return" [expr]) | ("continue") | ("break")] "}".

if_expr: "if" [let_declaration ";"] expr block_expr ["else" control_flow].

while_expr: "while" [let_declaration ";"] expr [";" statement ] block_expr ["else" control_flow].

fn_declaration: "fn" [ident] paramlist "->" arrow_expr ["where" arrow_expr] block_expr.
paramlist: "(" [param {"," param}] ")".
param: let_pattern_atom ":" arrow_expr ["=" assignment_expr]. # must not be product_expr, or ambiguous with ,

match_expr: "match" [let_declaration ";"] expr "{" {match_bar_clause} [match_bar_else] "}".
match_bar_clause: match_pattern_inject "=>" assignment_expr "newline".
match_bar_else: "else" "=>" assignment_expr "newline".

match_pattern_product: match_pattern_inject {"," match_pattern_inject}.
match_pattern_inject: match_pattern_atom ["<-" match_pattern_atom].
match_pattern_atom: ["mut"] ident {"." ident} # ident if part of a dot, symbol otherwise
                  | "true"
                  | "false"
                  | int
                  | hex
                  | octal
                  | bin
                  | float
                  | char
                  | string
                  | block_expr
                  | "." ident
                  | "(" match_pattern_product ")"
                  .

parens: "(" [expr] ")". # ABSOLUTELY needs to be `"(" expr ")"` so that you can put all exprs in parens