# https://github.com/proebsting/rdgen
# used just to check for ambiguity
# python3.10 ../rdgen/main.py create --input orng.ebnf --output parser.py && grep "AMBIGUOUS" parser.py

program: top_level_declaration {"newline" top_level_declaration} "eof".

top_level_declaration: fn_declaration 
                     | const_declaration
                     .

non_fn_declaration: let_declaration | const_declaration.

const_declaration: "const" ident [":" arrowExpr] "=" expr.

let_declaration: "let" ["mut"] ident (":" arrowExpr ["=" expr] | "=" expr).

statement: non_fn_declaration
         | "defer" statement
         | "errdefer" statement
         | expr
         .

expr: caseMatchExpr
    | sumExpr
    .

sumExpr: productExpr {"|" annotExpr}. # (lhs of | must be ident or annotExpr with proper pattern left of the :)

productExpr: annotExpr {"," annotExpr}.

annotExpr: assignExpr [":" arrowExpr ["=" arrowExpr]]. # (lhs of : must be ident or other TBD patterns)

assignExpr: arrowExpr [("=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "<-") assignExpr].

arrowExpr: boolExpr {"->" boolExpr}.

boolExpr: conditionalExpr {("and" | "or") conditionalExpr}.

conditionalExpr: coalesceExpr {("==" | "!=" | "<" | "<=" | ">" | ">=") coalesceExpr}.

coalesceExpr: intExpr {("orelse" | "catch") intExpr}.

intExpr: termExpr {("+" | "-" | "!") termExpr}.

termExpr: prefixExpr {("*" | "/" | "%" | "||") prefixExpr}.

prefixExpr: "not" hyperExpr                         # boolean not
          | "-" hyperExpr                           # negation
          | "&" ["mut"] prefixExpr                  # address-of
          | "[" ["mut" | expr | "*"] "]" prefixExpr # slice-of/tuple-of/multi-pointer
          | "?" hyperExpr                           # optional
          | hyperExpr
          .

hyperExpr: postfixExpr {("**") postfixExpr}.

postfixExpr: factor {parens | ("[" ((".."[expr]) | (expr[".." [expr]])) "]") | ("." ident) | ("^")}.

factor: ident
      | "true"
      | "false"
      | int
      | hex
      | octal
      | bin
      | float
      | char
      | string
      | blockExpr
      | ifExpr
      | whileExpr
      | fn_declaration
      | "." ident
      | parens
      .

indentBlockExpr: indent [statement {"newline" statement }] [("return" [expr] "newline") | ("continue" "newline") | ("break" "newline")] dedent.
braceBlockExpr: "{" {statement ";"} [("return" [expr]) | ("continue") | ("break")] "}".
blockExpr: indentBlockExpr | braceBlockExpr.

ifExpr: "if" [non_fn_declaration ";"] expr blockExpr ["else" blockExpr].

whileExpr: "while" [non_fn_declaration ";"] expr [";" statement ] blockExpr ["else" blockExpr].

fn_declaration: "fn" [ident] paramlist "->" arrowExpr "=" blockExpr.
paramlist: "(" [param {"," param}] ")".
param: ["mut"] ident ":" arrowExpr ["=" arrowExpr]. # must not be productExpr, or ambiguous with ,
                                                    # essentially an annotExpr that gaurantees pattern is an ident, type is given, and an optional `mut` modifier

barClause: annotExpr ["=>" annotExpr]. # for barClauses in match statements, if the lhs of has a pattern, => must be present
barElse: "else" "=>" annotExpr.
barListMiddle: barClause ["|" (barElse | barListMiddle)].
barList: "|" barListMiddle.

caseExpr: [non_fn_declaration ";"] barList.
caseMatchExpr: "case" caseExpr.

parens: "(" [expr] ")". # ABSOLUTELY needs to be `"(" expr ")"` so that you can put exprs in parens