# https://github.com/proebsting/rdgen
# used just to check for ambiguity
# python3.11 src/rdgen/main.py create --input docs/orng.ebnf --output parser.py && grep "AMBIGUOUS" parser.py

program: top_level_declaration "eof".

top_level_declaration: "fn main() -> Int" block_expr fn_declaration.

###                                                            ###
### Put `let_declaration` and everything following after here: ###
###                                                            ###

let_declaration: "let" let_pattern_atom (":" arrow_expr ["=" arrow_expr] | "=" arrow_expr).
let_pattern_product: let_pattern_atom {"," let_pattern_atom}.
let_pattern_atom: ["mut" | "const"] ident
                | "(" let_pattern_product ")"
                .

let_pre: [let_declaration ";"].

statement: let_declaration
         | trait_declaration
         | impl
         | "defer" assignment_expr
         | "errdefer" assignment_expr
         | assignment_expr
         .



# Reachable only by parens
expr: sum_expr.

sum_expr: product_expr {"|" annotation_expr}. # (lhs of | must be ident or annotation_expr with proper pattern left of the :)

product_expr: annotation_expr {"," annotation_expr}.

annotation_expr: assignment_expr [":" arrow_expr ["where" arrow_expr] ["=" arrow_expr]].



# Reachable by statement/expression
assignment_expr: arrow_expr [("=" | "+=" | "-=" | "*=" | "/=" | "%=") arrow_expr].

arrow_expr: bool_expr {"->" bool_expr}.

bool_expr: comparison_expr {("and" | "or") comparison_expr}.

comparison_expr: coalesce_expr {("==" | "!=" | "<" | "<=" | ">" | ">=") coalesce_expr}.

coalesce_expr: int_expr {("orelse" | "catch") int_expr}.

int_expr: term_expr {("+" | "-" | "!") term_expr}.

term_expr: prefix_expr ({("*" | "/" | "||" | "%") prefix_expr}).

prefix_expr: "not" prefix_expr                                    # boolean not
           | "-" prefix_expr                                      # negation
           | "&" ["mut"] ["dyn"] prefix_expr                      # address-of/trait object
           | "[" ["mut" | bool_expr | "*"] "]" prefix_expr  # slice-of/tuple-of/multi-pointer
           | "?" postfix_expr                                     # optional
           | postfix_expr
           .

postfix_expr: (control_flow | factor) 
      { call_args
      | "[" ((".."[bool_expr]) | (bool_expr[".." [bool_expr]])) "]"
      | "." ident
      | ".>" ident call_args
      | "^"
      }.

call_args: "(" [assignment_expr {"," assignment_expr}] ")".

control_flow: if_expr
            | while_expr
            | match_expr
            #| for_expr
            | "comptime" block_expr
            | factor
            .

factor: ident
      | "self"
      | fn_declaration
      | parens
      .

literal: "true"
       | "false"
       | int
       | hex
       | oct
       | bin
       | float
       | char
       | string
       | block_expr
       | "." ident ["(" assignment_expr ")"]
       | "unreachable"
       .

block_expr: "{" [ assignment_expr "newline" { "newline" statement "newline" } ] [( "return" [assignment_expr]) | ("continue") | ("break")] "}".

if_expr: "if" let_pre bool_expr block_expr ["else" control_flow].

while_expr: "while" let_pre bool_expr [";" statement ] block_expr ["else" control_flow].

#for_expr: "for" ["mut"] ident "in" bool_expr block_expr ["else" control_flow]. # TODO: Perhaps specify type of element?

fn_declaration: "fn" [ident] paramlist "->" bool_expr ["where" arrow_expr] block_expr.
paramlist: "(" [["mut" | "const"] param {"," ["mut" | "const"] param}] ")".
param: ident ":" arrow_expr ["=" arrow_expr]. # must not be product_expr, or ambiguous with ,

trait_declaration: "trait" ident "{" {method_declaration} "}". # Traits may be empty, but the braces are necessary to maintain unambiguity
method_declaration: ["virtual"] "fn" ident method_paramlist "->" bool_expr ["where" arrow_expr].
method_paramlist: "(" [("const" param | ["mut"](param|receiver)) {"," ["mut" | "const"]param}] ")".
receiver: ["&" ["mut"]] "self".

impl: "impl" [ident] "for" arrow_expr "{" {method_definition}"}".
method_definition: ["virtual"] "fn" ident method_paramlist "->" bool_expr ["where" arrow_expr] block_expr.

match_expr: "match" let_pre assignment_expr "{" match_mapping {match_mapping}"}".
match_mapping: match_pattern_sum_value "=>" assignment_expr "newline".
match_pattern_sum_value: match_pattern_atom ["(" match_pattern_atom ")"].
match_pattern_atom: ["mut"] ident {"." ident} # ident if part of a dot, symbol otherwise
                  | "." ident ["(" match_pattern_atom ")"]
                  | "(" match_pattern_product ")"
                  | literal
                  .
match_pattern_product: match_pattern_sum_value {"," match_pattern_sum_value}.

parens: "(" [expr] ")". # ABSOLUTELY needs to be `"(" expr ")"` so that you can put all exprs in parens
                        # This also makes it so that tuples, sums, and annotations are always parenthized, which helps with landmarking